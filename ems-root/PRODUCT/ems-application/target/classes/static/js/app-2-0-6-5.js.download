/*!
 *
 * Angle - Bootstrap Admin App + AngularJS
 *
 * Version: 3.2.0
 * Author: @themicon_co
 * Website: http://themicon.co
 * License: https://wrapbootstrap.com/help/licenses
 *
 */
// APP START
// -----------------------------------
// if(window.location.origin == 'http://krmct002.kartrocket.com' )
// {
//     var baseUrl = 'http://krmct000.kartrocket.com/v1/';
// }
// else if( window.location.origin == 'https://krmct.uat.kartrocket.com')
// {
//     var baseUrl = 'https://krmct.uat.api.kartrocket.com/v1/';
// }
//
// else if(window.location.origin == 'https://app.shiprocket.in')
// {
//     var baseUrl = 'https://apiv2.shiprocket.in/v1/';
// }
//
// else if(window.location.origin == 'https://krmct003.kartrocket.com')
// {
//     var baseUrl = 'https://krmct001.kartrocket.com/v1/';
// }
// else if(window.location.origin == 'http://krmct.sprint.kartrocket.com')
// {
//     var baseUrl = 'https://krmct.sprint.api.kartrocket.com/v1/';
// }
// else
// {
//     // var baseUrl = 'http://krmct001.kartrocket.com/v1/';
//     var baseUrl = 'http://krmct001.kartrocket.com/v1/';
//     //  var baseUrl = 'http://krmct.uat.api.kartrocket.com/v1/';
//     // var baseUrl = 'https://apiv2.shiprocket.in/v1/';
// }


(function () {
    'use strict';
    angular.module('multichannel', [
        //'components-font-awesome',
        'dndLists',
        'app.core',
        'app.routes',
        'app.sidebar',
        'app.settings',
        'app.dashboard',
        'app.notify',
        'app.colors',
        'app.lazyload',
        'app.bootstrapui',
        'app.charts',
        'app.utils',
        'ngRaven',
        'ngCookies',
        'app.help',
        //'as.sortable',
        //'bm.uiTour',
        // 'custom route'
        'app.upload',
        // 'd3',
        'app.setting',
        'satellizer',
        'app.auth',
        'app.services',
        'app.products',
        'app.orders',
        'app.report',
        // 'app.fulfillment',
        'app.shiprocket',
        'app.Loader',
        //End coustom route
        //constant file
        'SR_CONSTANTS'
    ])
})();

(function() {
    'use strict';

    angular
        .module('app.core', [
            'ngRoute',
            'ngAnimate',
            'ngStorage',
            'as.sortable',
            'pascalprecht.translate',
            'ui.bootstrap',
            'ui.router',
            'oc.lazyLoad',
            'cfp.loadingBar',
            'ngSanitize',
            'ngResource',
            'tmh.dynamicLocale',
            'ui.utils',
            'satellizer',
            'selectize'
        ]);
})();
(function() {
    'use strict';

    angular
        .module('app.core')
        .config(coreConfig);

    coreConfig.$inject = ['$controllerProvider', '$compileProvider', '$filterProvider', '$provide', '$animateProvider'];
    function coreConfig($controllerProvider, $compileProvider, $filterProvider, $provide, $animateProvider){

      var core = angular.module('app.core');
      // registering components after bootstrap
      core.controller = $controllerProvider.register;
      core.directive  = $compileProvider.directive;
      core.filter     = $filterProvider.register;
      core.factory    = $provide.factory;
      core.service    = $provide.service;
      core.constant   = $provide.constant;
      core.value      = $provide.value;

      // Disables animation on items with class .ng-no-animation
      $animateProvider.classNameFilter(/^((?!(ng-no-animation)).)*$/);
    }

})();
/**=========================================================
 * Module: constants.js
 * Define constants to inject across the application
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.core')
        .constant('APP_MEDIAQUERY', {
          'desktopLG':             1200,
          'desktop':                992,
          'tablet':                 768,
          'mobile':                 480
        })
      ;

})();
(function() {
    'use strict';

    angular
        .module('app.core')
        .run(appRun);

    appRun.$inject = ['$rootScope', '$state', '$stateParams',  '$window', '$templateCache', 'Colors', '$localStorage'];
    
    function appRun($rootScope, $state, $stateParams, $window, $templateCache, Colors, $localStorage) {
      
      // Set reference to access them from any scope
      
      $rootScope.$state = $state;
      $rootScope.$stateParams = $stateParams;
      $rootScope.$storage = $window.localStorage;

      $rootScope.colorByName = Colors.byName;

      // cancel click event easily
      $rootScope.cancel = function($event) {
        $event.stopPropagation();
      };

      $rootScope.closeActive = function()
      { 
        console.log('ab ay')
         $('.sidebar').find('.nav').find('li').removeClass('active'); 
      }
      // Hooks Example
      // ----------------------------------- 

      // Hook not found
      $rootScope.$on('$stateNotFound',
        function(event, unfoundState/*, fromState, fromParams*/) {
            console.log(unfoundState.to); // "lazy.state"
            console.log(unfoundState.toParams); // {a:1, b:2}
            console.log(unfoundState.options); // {inherit:false} + default options
        });
      // Hook error
      $rootScope.$on('$stateChangeError',
        function(event, toState, toParams, fromState, fromParams, error){
          console.log(error);
        });
      // Hook success
      $rootScope.$on('$stateChangeSuccess',
        function(/*event, toState, toParams, fromState, fromParams*/) {
          // display new view from top
          $window.scrollTo(0, 0);
          // Save the route title
          $rootScope.currTitle = $state.current.title;
        });

      // Load a title dynamically
      $rootScope.currTitle = $state.current.title;
      $rootScope.pageTitle = function() {
        var title = $rootScope.app.name + ' - ' + ($rootScope.currTitle || $rootScope.app.description);
        document.title = title;
        return title;
      };   

    }

})();


(function() {
    'use strict';

    angular
        .module('app.routes', [
            'app.lazyload',
            'ngMeta'
        ]);
})();

/**=========================================================
 * Module: helpers.js
 * Provides helper functions for routes definition
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.routes')
        .provider('RouteHelpers', RouteHelpersProvider)
        ;

    RouteHelpersProvider.$inject = ['APP_REQUIRES'];
    function RouteHelpersProvider(APP_REQUIRES) {

      /* jshint validthis:true */
      return {
        // provider access level
        basepath: basepath,
        resolveFor: resolveFor,
        // controller access level
        $get: function() {
          return {
            basepath: basepath,
            resolveFor: resolveFor
          };
        }
      };

      // Set here the base of the relative path
      // for all app views
      function basepath(uri) {
        return 'app/views/' + uri;
      }

      // Generates a resolve object by passing script names
      // previously configured in constant.APP_REQUIRES
      function resolveFor() {
        var _args = arguments;
        return {
          deps: ['$ocLazyLoad','$q', function ($ocLL, $q) {
            // Creates a promise chain for each argument
            var promise = $q.when(1); // empty promise
            for(var i=0, len=_args.length; i < len; i ++){
              promise = andThen(_args[i]);
            }
            return promise;

            // creates promise to chain dynamically
            function andThen(_arg) {
              // also support a function that returns a promise
              if(typeof _arg === 'function')
                  return promise.then(_arg);
              else
                  return promise.then(function() {
                    // if is a module, pass the name. If not, pass the array
                    var whatToLoad = getRequired(_arg);
                    // simple error check
                    if(!whatToLoad) return $.error('Route resolve: Bad resource name [' + _arg + ']');
                    // finally, return a promise
                    return $ocLL.load( whatToLoad );
                  });
            }
            // check and returns required data
            // analyze module items with the form [name: '', files: []]
            // and also simple array of script files (for not angular js)
            function getRequired(name) {
              if (APP_REQUIRES.modules)
                  for(var m in APP_REQUIRES.modules)
                      if(APP_REQUIRES.modules[m].name && APP_REQUIRES.modules[m].name === name)
                          return APP_REQUIRES.modules[m];
              return APP_REQUIRES.scripts && APP_REQUIRES.scripts[name];
            }

          }]};
      } // resolveFor

    }


})();


/**=========================================================
 * Module: config.js
 * App routes and resources configuration
 =========================================================*/
(function() {
    'use strict';
    angular.module('app.routes')
    .constant('appConstant', {
        intercomProductionID: 'b9mhafe0',
        intercomDevelopmentID: 'o8mf2syq',
        nonIntercomStates: ['auth.mailer', 'social-auth', 'auth.login', 'auth.register', 'auth.calculator', 'auth.logout', 'auth.recovery', 'auth.confirm', 'auth.reset', 'auth.recoveryotp'], // these are the states where intercom is not required.
        internationalPlans: [3, 4, 5, 6, 8, 9, 10] //plan id where international is available
    })
    .config(routesConfig)
    .run(appRun);

    routesConfig.$inject = ['$stateProvider', '$locationProvider', '$urlRouterProvider', 'RouteHelpersProvider', 'ngMetaProvider', '$authProvider', 'appConstant', '$logProvider'];
    function routesConfig($stateProvider, $locationProvider, $urlRouterProvider, helper, ngMetaProvider, $authProvider, appConstant, $logProvider) {
        // Set the following to true to enable the HTML5 Mode
        // You may have to set <base> tag in index and a routing configuration in your server
        $locationProvider.html5Mode(true);

        $stateProvider.decorator('data', ngMetaProvider.mergeNestedStateData);
        var intercomData = { };
        var currentPath = window.location.pathname.replace('/', '');
        if( window.location.origin == 'https://app.shiprocket.in' )
        {
            intercomData.app_id = appConstant.intercomProductionID;
        } else {
            intercomData.app_id = appConstant.intercomDevelopmentID;
        }

        function getUTM(){
            var name = 'UTM='
            var decodedCookie = decodeURIComponent(document.cookie);
            var ca = decodedCookie.split(';');
            for(var i = 0; i <ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) == 0) {
                    return JSON.parse(c.substring(name.length, c.length));
                }
            }
            return {};
        }

        function getRcode(){
            let a = new URLSearchParams(window.location.search);
            return { rcode: a.get("rcode") };
        }

        function mergeAllParams(){
            let rcode = getRcode();
            let utm = getUTM();
            let newParam = JSON.stringify(Object.assign(rcode, utm));
            return window.btoa(newParam);
        }
        mergeAllParams()

        $authProvider.facebook({
            url: "/auth/login/facebook/callback?rcode=",
            clientId: '719834648216007',
            redirectUri: window.location.origin + "/social-auth" ,
            requiredUrlParams: ['display', 'scope', 'state'],
            scope: ['email'],
            scopeDelimiter: ',',
            display: 'popup',
            oauthType: '2.0',
            state : mergeAllParams,
            popupOptions: { width: 580, height: 400 }
        });

        $authProvider.google({
            url: "/auth/login/google/callback",
            clientId: '415578535638-taan01jiogdj99gb3g4bdn4friqeuer8.apps.googleusercontent.com',
            redirectUri: window.location.origin + "/social-auth" ,
            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',
            requiredUrlParams: ['scope', 'state'],
            optionalUrlParams: ['display'],
            scope: ['profile', 'email'],
            scopePrefix: 'openid',
            scopeDelimiter: ' ',
            display: 'popup',
            oauthType: '2.0',
            state : mergeAllParams,
            popupOptions: { width: 452, height: 633 }
        });

        $logProvider.debugEnabled(true);
        if(localStorage.getItem('satellizer_token') && localStorage.getItem('ngStorage-USER'))
        {
            //intercom code to send user info
            var data = JSON.parse(localStorage.getItem('ngStorage-USER'));
            intercomData.first_name = data.first_name;
            intercomData.last_name = data.last_name;
            intercomData.email = data.email;
            intercomData.created_at = data.created_at;
            //intercom code to send user info end
            $urlRouterProvider.otherwise('/dashboard');
        } else {
            $urlRouterProvider.otherwise('/login');
        }

        if(currentPath === 'calculator')
        {
            $urlRouterProvider.otherwise('/calculator');
        }
        appConstant.intercomData = intercomData;


        ngMetaProvider.useTitleSuffix(false);
        ngMetaProvider.setDefaultTitle('ShipRocket - Multi-channel Order, Inventory & Shipping  Management Solution');
        //  JS for ga start
        // JS for ga end
        var storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
        // $authProvider.baseUrl = SR_CONSTANTS.APIBaseUrl;
        $authProvider.loginUrl = 'auth/login';
        $authProvider.signupUrl = 'auth/register';

        // Application Routes
        // -----------------------------------
        $stateProvider
        .state('auth', {
            // url: '/auth',
            templateUrl: 'app/pages/page.html',
            // resolve: helper.resolveFor('modernizr', 'icons'),
            controller: ['$rootScope', function($rootScope) {
                $rootScope.app.layout.isBoxed = false;
            }]
        })

        .state('social-auth', {
            url: '/social-auth',
            template: '<style>#intercom-container{display: none;}</style>'
        })

        .state('auth.login', {
            url: '/login?company_id&token&connected&under_maintenance&activate_charge&prev_charge_id&refund&refund_amount&plan_id&whmcs_product_id&billing_cycle',
            title: 'Log In - ShipRocket',
            params:
                {
                    redirect_url: undefined,
                    redirect_params: {
                    },
                    toState: '',
                    toParams: {},
                    id:'',
                    shop:'',
                    activate_charge: '',
                    prev_charge_id: '',
                    refund: '',
                    refund_amount: '',
                    plan_id: '',
                    whmcs_product_id:'',
                    billing_cycle:''
                },
            controller : 'authController',
            templateUrl: 'app/pages/login.html',
            data: {
                'meta': {
                    'title':'Log In - ShipRocket',
                    'og:description': 'ShipRocket - eCommerce Shipping in India. An E-commerce logistics and courier aggregator that lets you ship at discounted rates. Automated shipping solutions for making shipping fast, secure and easy. Get Started Today.',
                  }
                }
        })

        .state('auth.confirm', {
            url: '/confirm/{id:int}/token/{token}',
            title: 'Login',
            controller : 'authController',
            templateUrl: 'app/pages/confirm.html',
            data: {
                'meta': {
                    'title':'ShipRocket Login',
                    'og:description': 'Login to your ShipRocket account.',
                  }
                }
        })

        .state('auth.register', {
            url: '/register?utm_source=""&utm_medium=""&utm_campaign=""&utm_content=""&utm_term=""&gclid=""&log_id=""&rcode=""',
            title: 'Register',
            controller : 'authController',
            templateUrl: 'app/pages/user_register.html',
            data: {
                'meta': {
                    'title':'ShipRocket Registration',
                    'og:description': 'Register for a new ShipRocket account.',
                  }
                },
            reloadOnSearch:false
        })

        .state('auth.logout', {
            url: '/logout',
            title: 'logout',
            controller : 'authController'
        })

        .state('auth.calculator', {
            url: '/calculator',
            title: 'calculator',
            templateUrl: 'app/pages/shipping_calculator.html',
            data: {
                'meta': {
                    'title':'ShipRocket | Shipping Calculator ',
                    'og:description': ' Calculat shipping cost',
                    'canonical':'https://www.shiprocket.in/shipping-rate-calculator'
                  }
                }
        })

        .state('auth.recovery', {
            url: '/recovery',
            title: 'Login',
            controller: 'authController',
            templateUrl: 'app/pages/recover.html'
        })

        .state('auth.recoveryotp', {
            url: '/recovery',
            title: 'Login',
            controller: 'authController',
            templateUrl: 'app/pages/passwordresetotp.html',
            params : {
                recoveryData : {}
            }
        })

        .state('auth.reset', {
            url: '/recovery',
            title: 'Login',
            controller : 'authController',
            templateUrl: 'app/pages/changepassword.html',
            params: {
                paramData : {}
            },
            data: {
                'meta': {
                    'title':'ShipRocket Login',
                    'og:description': 'Login to your ShipRocket account.',
                  }
                }
        })

        .state('app', {
            abstract: true,
            templateUrl: helper.basepath('app.html'),
            // resolve: helper.resolveFor('fastclick', 'modernizr', 'icons', 'screenfull', 'animo', 'sparklines', 'slimscroll', 'classyloader', 'toaster', 'whirl')
        })

        .state('app.dashboard', {
            url: '/dashboard',
            title: 'Dashboard',
            templateUrl: helper.basepath('dashboardnew.html'),
            params: {
                paramData : {}
            },
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.dashboard-orders', {
            url: '/dashboard/orders',
            title: 'Dashboard',
            templateUrl: helper.basepath('dashboardnew.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.dashboard-shipment', {
            url: '/dashboard/shipment',
            title: 'Dashboard',
            templateUrl: helper.basepath('dashboardnew.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.orders', {
            url: '/orders',
            title: 'Orders',
            templateUrl: helper.basepath('Orders/orders.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.unprocessible', {
            url: '/orders/unprocessable?page&per_page',
            params: {
                page: '1',
                per_page: '15',
                status: ''
            },
            title: 'unprocessibleOrders',
            templateUrl: helper.basepath('Orders/unProcessableOrders.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.processing', {
            url: '/orders/processing?page&perPage&isDashboard&shop&ids',
            params: {
                page: '1',
                perPage: '15',
                status: '',
                shop: '',
                ids: ''
            },
            title: 'processingOrders',
            templateUrl: helper.basepath('Orders/processingOrders.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.processing_international', {
            url: '/orders/processing/international?page&perPage&isDashboard',
            params:
            {
                page: '1',
                perPage: '15',
                status: ''
            },
            title: 'processingOrders',
            templateUrl: helper.basepath('Orders/processingOrders.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.manifested', {
            url: '/orders/manifests?page&perPage',
            params:
            {
                page: '1',
                perPage: '15'
            },
            title: 'manifestedOrders',
            templateUrl: helper.basepath('Orders/manifestedOrders.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.viewallorders', {
            url: '/orders/all?page&perPage&shipment_type&filter&search&date_from&date_to&payment_method&sub_status',
            params:
            {
                page: '1',
                perPage: '15',
                shipment_type: '0',
                payment_method: '',
                filter: '',
                search: '',
                date_from: '',
                date_to: '',
                sub_status: ''
            },
            title: 'AllOrders',
            templateUrl: helper.basepath('Orders/viewallorders.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.tracking', {
            url: '/tracking?page&perPage&filter&search&date_from&date_to&sub_status',
            params: {
                page: '1',
                perPage: '15',
                filter: '',
                search: '',
                date_from: '',
                date_to: '',
                sub_status: ''
            },
            title: 'tracking Page',
            templateUrl: helper.basepath('Orders/tracking.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.order', {
            url: '/order/{id}',
            title: 'order',
            controller: 'OrderController',
            templateUrl: helper.basepath('Orders/order.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.manifests', {
            url: '/manifests/{type}?page&perPage&pickup',
            params: {
                page: '1',
                perPage: '15'
            },
            title: 'Manifest Page',
            templateUrl: helper.basepath('Orders/manifestspage.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.manifest', {
            url: '/manifest/detail/{id}?page&perPage',
            title: 'Manifest',
            params:
            {
                page: '1',
                perPage: '15'
            },
            templateUrl: helper.basepath('Orders/manifestdetails.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.customorder', {
            url: '/addorder/{type}?redirect_url',
            params:
            {
                redirect_url : ''
            },
            title: 'Custom Order',
            templateUrl: helper.basepath('Orders/addOrder.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.customers', {
            url: '/customers',
            title: 'Customers',
            controller: 'CustomersController',
            constrollerAs: 'Customers',
            templateUrl: helper.basepath('Orders/customers.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.add_customer', {
            url: '/add_customer',
            title: 'addcustomer',
            controller: 'CustomersController',
            constrollerAs: 'Customers',
            templateUrl: helper.basepath('Orders/add_customer.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.categories', {
            url: '/categories?page&perPage',
            params: {
                page: '1',
                perPage: '15'
            },
            title: 'Categories',
            templateUrl: function() {
                storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
                return (storeddata.is_free_plan || storeddata.is_basic_plan || !storeddata.inventory_sync_status) ? helper.basepath('partials/upgradePlanCategories.html') : helper.basepath('Settings/categories.html');
            },
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.addCategory', {
            url: '/category/add',
            title: 'Categories',
            templateUrl: helper.basepath('Settings/add_new_category.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.editCategory', {
            url: '/category/edit/{id}',
            title: 'Categories',
            templateUrl: helper.basepath('Settings/add_new_category.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.taxclasses', {
            url: '/taxclasses',
            title: 'Taxclasses',
            controller: 'TaxclassesController',
            constrollerAs: 'Taxclasses',
            templateUrl: function() {
                storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
                return (storeddata.is_free_plan || storeddata.is_basic_plan || !storeddata.inventory_sync_status) ? helper.basepath('partials/upgradePlanTaxclass.html') : helper.basepath('Settings/taxclasses.html');
            },
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.inventory', {
            url: '/inventory?page&perPage',
            params: {
                page: '1',
                perPage: '15'
            },
            title: 'Inventory',
            controller: 'InventoryController',
            constrollerAs: 'Inventory',
            templateUrl: function() {
                storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
                return (storeddata.is_free_plan || storeddata.is_basic_plan || !storeddata.inventory_sync_status) ? helper.basepath('partials/upgradePlanInventory.html') : helper.basepath('Products/inventory.html');

            },
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }

        })

        .state('app.listings', { // Channel Catalog page
            url: '/listings/{filter}?page&perPage&search&channel_id',
            params: {
                page: '1',
                perPage: '15',
                filter : function(){
                    storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
                    return (storeddata.is_free_plan || storeddata.is_basic_plan || !storeddata.inventory_sync_status) ? '' : 'unmapped'
                },
                search: '',
                channel_id: ''
            },
            title: 'Listings',
            templateUrl: function() {
                storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
                return (storeddata.is_free_plan || storeddata.is_basic_plan || !storeddata.inventory_sync_status) ? helper.basepath('Products/othersPlanlistings.html'): helper.basepath('Products/listings.html');
            },
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                },
            reloadOnSearch:false
        })

        .state('app.products', {
            url: '/products/{filter}?page&perPage',
            params: {
                page: '1',
                perPage: '15'
            },
            title: 'Products',
            templateUrl: function() {
                storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
                return (storeddata.is_free_plan || storeddata.is_basic_plan || !storeddata.inventory_sync_status) ? helper.basepath('partials/upgradePlan.html') : helper.basepath('Products/products.html');
            },
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }


        })

        .state('app.product', {
            url: '/products/{id}',
            title: 'Product',
            templateUrl: helper.basepath('Products/product.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }

        })

        .state('app.channel', {
            url: '/channels',
            title: 'Channels',
            controller: 'ChannelsController',
            constrollerAs: 'Channels',
            templateUrl: helper.basepath('Settings/userchannellist.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.post_order_settings', {
            url: '/post_order_settings',
            title: 'Post Order Settings',
            templateUrl: helper.basepath('post_order/settings.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

         .state('app.add_marketing_banners', {
            url: '/add-marketing-banners',
            title: 'marketing banners',
            controller: 'add_marketing_banners',
            constrollerAs: 'add_marketing_banners',
            templateUrl: helper.basepath('post_order/add_marketing_banner.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

         .state('app.slug_popup', {
            url: '/slug_popup',
            title: 'slug_popup',
            controller: 'slug_popup_controller',
            constrollerAs: 'slug_popup_controller',
            templateUrl: helper.basepath('post_order/slug_popup.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
         .state('app.post_nps', {
            url: '/nps?page&perPage&from_date&to_date',
            params:
            {
                page: '1',
                perPage: '15',
                from_date: '',
                to_date: ''
            },            
            title: 'NPS responses',
            controller: 'post_nps_controller',
            constrollerAs: 'post_nps_controller',
            templateUrl: helper.basepath('post_order/post_nps.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

         .state('app.pocx_menu_links', {
            url: '/menu-links',
            title: 'Menu Links',
            controller: 'menu_links_controller',
            constrollerAs: 'menu_links_controller',
            templateUrl: helper.basepath('post_order/menu_links.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

         .state('app.marketing_banners', {
            url: '/marketing-banners',
            title: 'Banners',
            controller: 'marketing_banners',
            constrollerAs: 'marketing_banners',
            templateUrl: helper.basepath('post_order/marketing_banners.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.inventorytoggle', {
            url: '/manage-catalog-settings',
            title: 'Manage Catalog Settings',
            controller: 'MasterCatalogSettingsController',
            templateUrl: function() {
                storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
                return (storeddata.is_free_plan || storeddata.is_basic_plan) ? helper.basepath('partials/upgradeToggleSwitch.html') : helper.basepath('Settings/inventorytoggle.html');
            },
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.international', {
            url: '/international-process-flow',
            title: 'International Process Flow',
            controller: 'InternationalProcessFlowController',
            params:{
                skip_allowed: true,
            },
            templateUrl: function() {
                storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
                return (_.indexOf(appConstant.internationalPlans, storeddata.plan_id) > -1) ? helper.basepath('Settings/international-process-flow.html') : helper.basepath('partials/upgradeInternational.html');
            },
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.international_details', {
            url: '/international-details',
            title: 'International Details',
            controller: 'InternationalDetailsController',
            templateUrl: helper.basepath('Settings/international-details.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.international_couriers', {
            url: '/international-couriers',
            title: 'International Couriers',
            controller: 'InternationalCouriersController',
            templateUrl: helper.basepath('Settings/activate-couriers.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.international_activate_couriers', {
            url: '/international-activate-couriers',
            title: 'International Couriers',
            controller: 'InternationalActivateCouriersController',
            templateUrl: helper.basepath('Settings/courier-companies.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.channels', {
            url: '/channels/add_channel',
            title: 'Channels',
            controller: 'ChannelsController',
            constrollerAs: 'Channels',
            templateUrl: helper.basepath('Settings/allchannelsList.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.add_channel', {
            url: '/channels/add_channel/{id}/?&username',
            title: 'Add Channel',
            controller: 'ChannelsController',
            constrollerAs: 'Channels',
            templateUrl: helper.basepath('Settings/add_channel.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.edit_channel', {
            url: '/channels/edit/{id}',
            title: 'Add Channel',
            controller: 'ChannelsController',
            constrollerAs: 'Channels',
            templateUrl: helper.basepath('Settings/edit_channel.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.users', {
            url: '/users',
            title: 'Usres',
            controller: 'UsersController',
            constrollerAs: 'Users',
            templateUrl: helper.basepath('Settings/users.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.company', {
            url: '/company',
            title: 'Company',
            controller: 'CompanyController',
            constrollerAs: 'CompanyController',
            templateUrl: helper.basepath('Settings/company.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.add_company', {
            url: '/add_company',
            title: 'Add Company',
            controller: 'CompanyController',
            constrollerAs: 'CompanyController',
            templateUrl: helper.basepath('Settings/add_company.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.addproduct', {
            url: '/addproducts',
            title: 'Product',
            templateUrl: helper.basepath('Products/addProduct.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.setup_wizard', {
            url: '/setupwizard',
            title: 'Setup Wizard',
            controller: 'setupwizard',
            constrollerAs: 'setupwizard',
            templateUrl: helper.basepath('Settings/setup_wizard.html'),
        })

        .state('app.courierpriority', {
            url: '/courierPriority?redirect_url',
            params: {
                redirect_url: ''
            },
            title: 'Courier Priority',
            templateUrl: helper.basepath('shiprocket/courierPriority.html'),
        })

        .state('app.user_plandetails', {
            url: '/billing-plan-details',
            title: 'Timeline Page',
            templateUrl: helper.basepath('shiprocket/plandetails.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.user_creditdetails', {
            url: '/billing-credit-details?page&perPage&from&to&recharge&utm_source&utm_medium&utm_campaign&utm_content&utm_term&is_first_recharge',
            params: {
                page: '1',
                perPage: '15',
                from:'',
                to:'',
                recharge: '',
                utm_source: '',
                utm_medium: '',
                utm_campaign: '',
                utm_content: '',
                utm_term: '',
                is_first_recharge: ''
            },
            title: 'Timeline Page',
            templateUrl: helper.basepath('shiprocket/creditdetails.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.rateCalculator', {
            url: '/rate-calculator',
            title: 'Shiprocket Rate Calculator',
            templateUrl: helper.basepath('shiprocket/shiprocketpriceCalculator.html'),
        })

        .state('app.rateCalculator-international', {
            url: '/rate-calculator/international',
            title: 'Shiprocket Rate Calculator',
            templateUrl: helper.basepath('shiprocket/shiprocketpriceCalculator.html'),
        })

        .state('app.user_chargedetail', {
            url: '/billing-charge-details?page&perPage&to&from&status&search',
            params:
            {
                page: '1',
                perPage: '15',
                from: '',
                to: '',
                status:'',
                search:''
            },
            title: 'Weight Reconcilation',
            templateUrl: helper.basepath('shiprocket/chargedetail.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.onhold_reconcile', {
            url: '/onhold-reconcilation?page&perPage',
            params:
            {
                page: '1',
                perPage: '15',
                date_from: '',
                date_to: ''
            },
            controller: 'onHoldReconcilationController',
            constrollerAs: 'vm',
            title: 'On-Hold Reconcilation Page',
            templateUrl: helper.basepath('shiprocket/onhold-reconcile.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.user_timeline', {
            url: '/billing-statement?page&perPage&recharge&status&from&to&utm_source&utm_medium&utm_campaign&utm_content&utm_term',
            params: {
                page: '1',
                perPage: '15',
                recharge: '',
                status: '',
                from: '',
                to: '',
                utm_source: '',
                utm_medium: '',
                utm_campaign: '',
                utm_content: '',
                utm_term: ''
            },
            title: 'Timeline Page',
            templateUrl: helper.basepath('shiprocket/statement.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.user_statement', {
            url: '/statement?page&per_page&courier_id&shipment_status&from&to',
            params: {
                page: '1',
                per_page: '15',
                courier_id: '',
                shipment_status: '',
                from: '',
                to: ''
            },
            title: 'Statement Page',
            templateUrl: helper.basepath('shiprocket/statementpage.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.transaction_logs', {
            url: '/remittance-logs?page&perPage',
            params: {
                page: '1',
                perPage: '15'
            },
            title: 'Transaction Logs',
            templateUrl: helper.basepath('shiprocket/transactionLogs.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.user_invoicing', {
            url: '/invoice?page&perPage',
            params: {
                page: '1',
                perPage: '15'
            },
            title: 'Invoice Page',
            templateUrl: helper.basepath('shiprocket/invoicepage.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.codReconcileUser', {
            url: '/user-cod-reconcile?page&perPage',
            params: {
                page: '1',
                perPage: '15',
            },
            title: 'COD Reconcile',
            templateUrl: helper.basepath('shiprocket/user-cod-reconcile.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.ordereport', {
            url: '/order-report?page&perPage',
            title: 'Order-Report',
            params: {
                page: '1',
                perPage: '15'
            },
            templateUrl: helper.basepath('reportv1/order-report.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.delhiveryWarehouseReport', {
            url: '/delhivery-warehouse-report?page&perPage',
            title: 'Delhivery Warehouse Report',
            params: {
                page: '1',
                perPage: '15'
            },
            templateUrl: helper.basepath('reportv1/delhivery-warehouse-report.html'),
            controller: 'delhiveryReportController',
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.codReconcile', {
            url: '/cod-reconcile?page&perPage',
            title: 'Cod-Reconcile',
            params: {
                page: '1',
                perPage: '15'
            },
            templateUrl: helper.basepath('reportv1/cod-reconcile.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.billingReport', {
            url: '/billing-report?page&perPage',
            title: 'Billing-Report',
            params: {
                page: '1',
                perPage: '15'
            },
            templateUrl: helper.basepath('reportv1/billing-report.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.company_Master', {
            url: '/company-master',
            title: 'Company-Master',
            params: {
                page: '1',
                perPage: '15'
            },
            templateUrl: helper.basepath('reportv1/company_master.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.weightDisputeReport', {
            url: '/weightDisputeReport',
            title: 'Weight Dispute Report',
            params: {
                page: '1',
                perPage: '15'
            },
            templateUrl: helper.basepath('reportv1/weight_dispute_report.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.sellerDataReport', {
            url: '/sellerDataReport',
            templateUrl: helper.basepath('reportv1/seller_data_report.html'),
            data: {
                'meta': {
                    'robots': "noindex",
                }
            }
        })

        .state('app.zoneServiceability', {
            url: '/pickup-zone-serviceability',
            templateUrl: helper.basepath('reportv1/pickup_zone_serviceability.html'),
            data: {
                'meta': {
                    'robots': "noindex",
                }
            }
        })

        .state('app.billingAutomation', {
            url: '/admin/auto-billing',
            title: 'Billing Automation',
            templateUrl: helper.basepath('reportv1/admin-billing.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.scheduledReportsList', {
            url: '/scheduled-reports',
            title: 'Scheduled-Reports',
            templateUrl: helper.basepath('reportv1/scheduled_reportslist.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.ndrPanelRaised', {
            url: '/ndrpanel-raised?client_id&page&perPage&status',
            params:
            {
                page: '1',
                perPage: '15'
            },
            title: 'NDR Raised',
            templateUrl: helper.basepath('ndrpanel/ndrpanel_raised.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.ndrPanelClosed', {
            url: '/ndrpanel-closed?client_id&page&perPage',
            params:
            {
                page: '1',
                perPage: '15'
            },
            title: 'NDR closed',
            templateUrl: helper.basepath('ndrpanel/ndrpanel_closed.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.ndrPending', {
            url: '/ndr-pending?page&perPage&attempts&ndr_status&aging',
            params:
            {
                page: '1',
                perPage: '15',
                attempts:'',
                ndr_status:'',
                aging:''
            },
            title: 'NDR Raised',
            templateUrl: helper.basepath('Orders/ndrPending.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.ndrClosed', {
            url: '/ndr-closed?page&perPage&action_by&ndr_status&s_status&attempts',
            params:
            {
                page: '1',
                perPage: '15',
                attempts:'',
                //action:'',
                action_by:'',
                ndr_status : '',
                s_status : '',
                //shipment_status : ''
            },
            title: 'NDR Closed',
            templateUrl: helper.basepath('Orders/ndrClosed.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.ndrNoAction', {
            url: '/ndr-noaction?page&perPage&action&ndr_status&s_status&attempts',
            params:
            {
                page: '1',
                perPage: '15',
                attempts:'',
                action:'',
                ndr_status:'',
                s_status : ''
            },
            title: 'NDR Action Not Allowed',
            templateUrl: helper.basepath('Orders/ndrNoAction.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.rtoDelivered', {
            url: '/rto-delivered?page&perPage&search&date_from&date_to',
            params: {
                page: '1',
                perPage: '15',
                search: '',
                date_from: '',
                date_to: ''
            },
            title: 'RTO Delivered',
            templateUrl: helper.basepath('Orders/rtoDelivered.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.rtoInitiated', {
            url: '/rto-initiated?page&perPage&search&date_from&date_to',
            params: {
                page: '1',
                perPage: '15',
                search: '',
                date_from: '',
                date_to: ''
            },
            title: 'RTO Initiated',
            templateUrl: helper.basepath('Orders/rtoInitiated.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.rtoAcknowledged', {
            url: '/rto-acknowledged?page&perPage&search&date_from&date_to',
            params: {
                page: '1',
                perPage: '15',
                search: '',
                date_from: '',
                date_to: ''
            },
            title: 'RTO Acknowledged',
            templateUrl: helper.basepath('Orders/rtoAcknowledged.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('auth.mailer', {
            url: '/tracking/awb/{id}?coid',
            title: 'AWS Status',
            templateUrl:('app/pages/mailer.html'),
        })
        .state('auth.aws_status', {
            url: '/aws-status/:type',
            title: 'AWS Status',
            templateUrl: helper.basepath('reportv1/aws-status.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.aws_status', {
            url: '/aws-report',
            title: 'AWS Status',
            templateUrl: helper.basepath('reportv1/aws-status.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.codPanel', {
            url: '/COD-Panel',
            title: 'COD Panel',
            templateUrl: helper.basepath('reportv1/codPanel.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.userPage', {
            url: '/user-page',
            title: 'User Page',
            templateUrl: helper.basepath('Settings/userpage.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.activities', {
            title: 'Activities',
            url: '/activities?page&perPage&type',
            controller: 'activitiesController',
            controllerAs: 'vm',
            templateUrl: helper.basepath('Settings/activities.html'),
            params: {
              type: '3',
              page: '1',
              perPage: '15'
            },
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.freeplan', {
            url: '/free-plan',
            title: 'free Plan',
            templateUrl: helper.basepath('Settings/free-plan.html'),
        })
        .state('app.tour', {
            url: '/tour',
            title: 'tour',
            templateUrl: helper.basepath('/tour.html'),
        })
        .state('app.misBillingReport', {
            url: '/misupload',
            title: 'MIS Upload',
            templateUrl: helper.basepath('/misreport/misreportpage.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })
        .state('app.courierRatingReport', {
            url: '/rating-report',
            title: 'courier-rating',
            templateUrl: helper.basepath('/reportv1/ratingReportpage.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.welcome', {
            url: '/welcome',
            title: 'Welcome',
            templateUrl: helper.basepath('/Settings/welcome-new.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.companyGeneralDetails', {
            url: '/company-general-details?redirect_url',
            params: {
                redirect_url: ''
            },
            title: 'Company General Details',
            templateUrl: helper.basepath('/Settings/company-general-details.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.companyAddressDetails', {
            url: '/company-address-details?redirect_url',
            params: {
                redirect_url: ''
            },
            title: 'Company Address Details',
            templateUrl: helper.basepath('/Settings/company-address-details.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.paymentType', {
            url: '/company-payment-type',
            title: 'Company Payment Mode',
            templateUrl: helper.basepath('/Settings/company-payment-type.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.userKyc', {
            url: '/kyc',
            title: 'Know Your Customer',
            templateUrl: helper.basepath('/Settings/kyc.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.rtoPickup', {
            url: '/rto-address-setting',
            title: 'RTO Address Settings',
            templateUrl: helper.basepath('/Settings/rto-address-setting.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.labelBuyerSettings', {
            url: '/label-buyer-settings',
            title: 'Label & Buyer Settings',
            templateUrl: helper.basepath('/Settings/company-label-buyer.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.companyBankDetails', {
            url: '/company-bank-details?redirect_url',
            params: {
                redirect_url: ''
            },
            title: 'Company Bank Details',
            templateUrl: helper.basepath('/Settings/company-bank-details.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.companyPickupLocation', {
            url: '/company-pickup-location?redirect_url',
            params: {
                redirect_url: ''
            },
            title: 'Company piclup Location',
            templateUrl: helper.basepath('/Settings/company-pickup-location.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.editCompanyDetails', {
            url: '/edit-company-details',
            title: 'Edit Company General Details',
            templateUrl: helper.basepath('/Settings/edit-company-details.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.shipWithLink', {
            url: '/ship-with-link',
            title: 'Ship With Link',
            templateUrl: helper.basepath('/Settings/ship-with-link.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.apiUser', {
            url: '/api-user',
            title: 'API User',
            templateUrl: helper.basepath('/Settings/api-user.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.recharge', {
            url: '/recharge',
            title: 'Recharge',
            templateUrl: helper.basepath('/Settings/recharge-amount.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.wdImage', {
            url: '/wd-images',
            title: 'Weight Dispute Images',
            templateUrl: helper.basepath('/misreport/wd-images-upload.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.wdMis', {
            url: '/wd-mis',
            title: 'Weight Dispute MIS',
            templateUrl: helper.basepath('/misreport/wd-mis-upload.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.wdResolvedSheet', {
            url: '/wd-resolved-sheet',
            title: 'Weight Dispute Resolved Sheet',
            templateUrl: helper.basepath('/misreport/wd-resolved-sheet.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.codRemittance', {
            url: '/cod_remittance',
            title: 'COD Remittance',
            templateUrl: helper.basepath('/reportv1/cod-remittance-sheet.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                },
        })

        .state('app.kycAdmin', {
            url: '/kyc-admin?page&perPage&client_id&client_name&client_phone&client_email&status',
            title: 'KYC Admin',
            templateUrl: helper.basepath('/reportv1/kyc_admin.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                },
            params: {
              page: '1',
              perPage: '15',
              client_id: '',
              status: '',
              client_email: '',
              client_phone: '',
              client_name: ''
            }
        })

        .state('app.bankVerification', {
            url: '/bank-verification?page&perPage&client_id&client_name&client_phone&client_email&status&beneficiary_name',
            title: 'Bank Verification Admin',
            templateUrl: helper.basepath('/reportv1/bank_verification.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                },
            params: {
              page: '1',
              perPage: '15',
              client_id: '',
              status: '',
              client_email: '',
              client_phone: '',
              client_name: '',
              beneficiary_name: ''
            }
        })

        .state('app.shippingLimit', {
            url: '/shipping-limit',
            title: 'Shipping Limit',
            templateUrl: helper.basepath('/Settings/set-shipping-limit.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                },
        })

        .state('app.help', {
          url: '/help',
          title: 'Help',
          templateUrl: helper.basepath('/help/help.html'),
          data: {
              'meta': {
                  'robots':'noindex',
                }
              }
        })

        .state('app.pincodeUpload', {
            url: '/pincodeUpload',
            title: 'Pincode Upload',
            templateUrl: helper.basepath('/reportv1/pincodeUpload.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                },
        })

        .state('app.priceUpload', {
            url: '/priceUpload',
            title: 'Price Upload',
            templateUrl: helper.basepath('/reportv1/priceUpload.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                },
        })

        .state('app.weightSlab', {
            url: '/admin/wd-slab',
            title: 'Weight Slab',
            templateUrl: helper.basepath('reportv1/weight-dispute-slab.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.sellerListing', {
            url: '/internal/sellers?page&perPage',
            title: 'Listing of Sellers',
            templateUrl: helper.basepath('/reportv1/seller-admin.html'),
            params: {
                page: '1',
                perPage: '15',
                search: '',
                date_from: '',
                date_to: ''
            },
            data: {
                'meta': {
                    'robots':'noindex',
                }
            }
        })

        .state('app.shipmentListing', {
            url: '/internal/shipments?page&perPage&client_id&status&wd&fc&is_international&date_from&date_to',
            title: 'Listing of Shipments',
            templateUrl: helper.basepath('/reportv1/shipment-admin.html'),
            params: {
                page: '1',
                perPage: '15',
            },
            data: {
                'meta': {
                    'robots':'noindex',
                }
            }
        })
          .state('app.createTicket', {
            url: '/raise_new_query',
            title: 'Raise New Query',
            templateUrl: helper.basepath('/help/raise-new-ticket.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                }
            }
        })
          .state('app.viewAllTickets', {
            url: '/view_all_tickets?page&perPage&date_from&date_to',
            title: 'View All Tickets',
            templateUrl: helper.basepath('/help/view_all_tickets.html'),
            params : {
                page : '1',
                perPage: '15',
                date_from: '',
                date_to: ''
            },
            data: {
                'meta': {
                    'robots':'noindex',
                }
            }
        })
          .state('app.ticketsDetails', {
            url: '/ticket_details/{id}',
            title: 'Ticket Details',
            templateUrl: helper.basepath('/help/ticket_details.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                }
            }
        })

        .state('app.referral', {
            url: '/referral',
            title: 'Referral Program',
            templateUrl: helper.basepath('/Settings/referral_program.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                }
            }
        })

        .state('app.returns', {
          url: '/orders/returns?page&perPage&order_status&search&from&to',
          title: 'Return Orders',
          templateUrl: helper.basepath('/Orders/returnOrders.html'),
          // controller: 'returnOrdersController',
          // controllerAs: 'ret',
          params: {
              page: '1',
              perPage: '15',
              order_status: '',
              search: '',
              from: '',
              to: ''
          },
          data: {
              'meta': {
                  'robots':'noindex',
              }
          }
        })

        .state('app.createReturn', {
            url: '/create/returns/{id}',
            title: 'Create Return',
            templateUrl: helper.basepath('Orders/createReturn.html'),
            data: {
                'meta': {
                    'robots':'noindex',
                  }
                }
        })

        .state('app.remittanceUpload', {
            url: '/remittance_upload',
            title: 'Remittance Upload',
            templateUrl: helper.basepath('/reportv1/remittance_upload.html')
        })

        .state('app.remittanceHistoryView', {
            url: '/remittance-history?crf_id',
            title: 'Remittance History',
            templateUrl: helper.basepath('/reportv1/remittance_history_view.html')
        })

    } // routesConfig

    appRun.$inject = ['$rootScope', 'appConstant', 'freshChatFactory' , 'OneSignalFactory', 'UrlValidator','ngMeta', 'AppService', '$auth', '$uibModal', 'SR_CONSTANTS', 'SatellizerConfig', '$localStorage', '$location', '$sessionStorage', '$window', '$state' , '$cookies'];
    function appRun($rootScope, appConstant, freshChatFactory , OneSignalFactory, UrlValidator,ngMeta, AppService, $auth, $uibModal, SR_CONSTANTS, SatellizerConfig, $localStorage, $location, $sessionStorage, $window, $state, $cookies){
        ngMeta.init();
        function checkMobileOS() {
          var useragent = window.navigator.userAgent || window.navigator.vendor || window.opera;
          if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|Mobile|mobile|CriOS/i.test(useragent) ){
            $rootScope.isMobile == true;
            $rootScope.isAndroid == false;
            $rootScope.isIOS == true;
          } else if( /Android/.test(useragent)) {
            $rootScope.isMobile == true;
            $rootScope.isAndroid == true;
            $rootScope.isIOS == false;
          } else {
            return;
          }
        }

        let user = $localStorage.USER;

        if(user && !user.is_seller){
          WootricSurvey.stop();
        }

        if(user){
            var date_diff = Math.round(moment.duration(moment().diff(user.created_at.date)).asDays()); //date diff between current date and user's signup date

            //window variables for whatfix personalization
            window.seller_var = {
                first_name : user.first_name,
                plan_id : user.plan_id,
                company_id : user.company_id,
                signup_date : date_diff
            };
        }else{
            window.seller_var = {};
        }

        checkMobileOS();

        if(window.innerWidth <= 1024){
          $rootScope.isMobile == true;
        }

        SatellizerConfig.baseUrl= SR_CONSTANTS.APIBaseUrl;
        $rootScope.showAppUrl = false;
        $rootScope.showAppPopup = false;
        $rootScope.$state = $state;
        $rootScope.showRestrictedGoodsWarning = false;

        var userAgent = window.navigator.userAgent;

        var restrictedWarning = $cookies.get('restrictedWarning');

        function disableStrips(expr){
            switch (expr) {
              case 'appUrl':
                $cookies.put('restrictedAppStrip',true)
                $rootScope.showAppUrl = false;
                break;
              case 'restrictedWarning':
                $cookies.put('restrictedWarning',true)
                $rootScope.showRestrictedGoodsWarning = false;
                restrictedWarning = true;
                break;
              case 'showAppPopup':
                $cookies.put('hideAppPopup',true);
                $rootScope.showAppPopup = false;
                break;
            }
        }


        if(!restrictedWarning){
          $rootScope.$on('$stateChangeSuccess',
            function(event, toState, toParams, fromState, fromParams) {
              if($localStorage.USER && !restrictedWarning){
                $rootScope.showRestrictedGoodsWarning = true;
              } else {
                $rootScope.showRestrictedGoodsWarning = false;
              }
            }
          );
        }

        if($state.current.url === '/calulator' || $state.current.url === '/social-auth'){
            window.Intercom("shutdown");
            window.intercomSettings.hide_default_launcher = true;
        }

        if(/Android/.test(userAgent)){
            var appUrl = 'https://play.google.com/store/apps/details?id=com.shiprocket.shiprocket&hl=en&';
            $rootScope.$on('$stateChangeSuccess',
              function(event, toState, toParams, fromState, fromParams) {
                var mobileApp = $cookies.get('restrictedAppStrip');
                var hideAppPopup = $cookies.get('hideAppPopup');
                $state.current = toState;
                if(toState.name == 'auth.register'){
                    $rootScope.showAppUrl = false;
                    $rootScope.showAppPopup = false;
                } else if (toState.name == "auth.login") {
                  if (!mobileApp) {
                    $rootScope.showAppUrl = true;
                  }
                } else {
                    if ($localStorage.USER) {
                      var user_data = $localStorage.USER;
                      $rootScope.showAppUrl = false;
                      $rootScope.showAppPopup = hideAppPopup ? false : true;
                    } else {
                      $rootScope.showAppPopup = false
                    }
                }
                if($cookies.get('UTM') !== undefined)
                {
                    $rootScope.mobileAppUrl = appUrl + 'referrer=utm_source%3D'+$cookies.getObject('UTM').utm_source+
                                            '%26utm_medium%3D'+$cookies.getObject('UTM').utm_medium+
                                            '%26utm_campaign%3D'+$cookies.getObject('UTM').utm_campaign+
                                            '%26utm_content%3D'+$cookies.getObject('UTM').utm_content+
                                            '%26utm_term%3D'+$cookies.getObject('UTM').utm_term+
                                            '%26gclid%3D'+$cookies.getObject('UTM').gclid;
                } else{
                    $rootScope.mobileAppUrl = appUrl + 'referrer=utm_source%3Ddefault';
                }
              });
        }

        $rootScope.intercon_active = false;
        $rootScope.freshchat_active = false;
        $rootScope.SR_CONSTANTS = SR_CONSTANTS;
        //$rootScope.status = 'srndr2';

        logJSErrorToSentry($localStorage, SR_CONSTANTS);
        var path = {};

        $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams, options) {
            $rootScope.showRestrictedGoodsWarning = false;
            if(restrictedWarning == null && $localStorage.USER){
              $rootScope.showRestrictedGoodsWarning = true;
            }

            if (appConstant.nonIntercomStates.indexOf(toState.name) === -1) {
                //freshchat show
                if (!$rootScope.freshchat_active) {
                    freshChatFactory.run();
                    $rootScope.freshchat_active = true;
                }
                freshChatFactory.update_data();

                if (!$rootScope.intercon_active) {
                    window.Intercom("boot", appConstant.intercomData);
                    $rootScope.intercon_active = true;
                    olark('api.box.hide');
                }
            } else {
		            WootricSurvey.stop();
                //freshchat close
                if ($rootScope.freshchat_active) {
                    freshChatFactory.hide_chat();
                    $rootScope.freshchat_active = false;
                }

                if ($rootScope.intercon_active) {
                    window.Intercom("shutdown");
                    olark('api.box.show');
                    window.intercomSettings.hide_default_launcher = true;
                    $rootScope.intercon_active = false;
                }
            }

            if (fromState && fromState.name == "" && options.relative == null) {

                //code to check utm params
                var all_params = $location.search();
                if(angular.isDefined(all_params.utm_source) || angular.isDefined(all_params.utm_medium) || angular.isDefined(all_params.utm_campaign) || angular.isDefined(all_params.utm_content) || angular.isDefined(all_params.utm_term) ||  angular.isDefined(all_params.gclid)){
                   var utm = {
                        utm_source:     angular.isDefined(all_params.utm_source)   ? all_params.utm_source   : undefined,
                        utm_medium:     angular.isDefined(all_params.utm_medium)   ? all_params.utm_medium   : undefined,
                        utm_campaign:   angular.isDefined(all_params.utm_campaign) ? all_params.utm_campaign : undefined,
                        utm_content:    angular.isDefined(all_params.utm_content)  ? all_params.utm_content  : undefined,
                        utm_term:       angular.isDefined(all_params.utm_term)     ? all_params.utm_term     : undefined,
                        gclid:          angular.isDefined(all_params.gclid)     ? all_params.gclid     : undefined
                    };
                    // delete all_params.utm_source;
                    // delete all_params.utm_medium;
                    // delete all_params.utm_campaign;
                    // delete all_params.utm_content;
                    // delete all_params.utm_term;
                    // delete all_params.gclid;
                    // $sessionStorage.UTM = utm;
                    utm = JSON.stringify(utm)
                    var domain = '.' + SR_CONSTANTS.APIBaseUrl.split('.').splice(-2).join('.').split('/')[0]
                    $cookies.remove('UTM');
                    var date = new Date();
                    date.setDate(date.getDate() + 30);
                    $cookies.put('UTM', utm, {
                      expires : date,
                      path: '/',
                      domain: domain
                    })
                    // $location.search(all_params);
                }

                var user = $localStorage.USER;
                $rootScope.user_data = $localStorage.USER;
                if (user && $state.current.name != "auth.calculator" && $state.current.name != "auth.mailer") {
                    var from_shopify = $localStorage.USER.from_shopify;
                    AppService.post('auth/login/user', false, { token: user.token })
                    .success(function(data) {
                        freshChatFactory.update_data();
                        if (data.token) {
                            $auth.setToken(data.token);
                            $localStorage.USER = data;
                            $localStorage.USER.from_shopify = from_shopify;
                        }
                    })
                    .error(function(error) {
                        AppService.isAuth(error);
                    });
                    $rootScope.isBasicPlan = user.is_basic_plan;
                    $rootScope.toggleOff = !user.inventory_sync_status;
                }
            } else if (toState && toState.name !== "auth.logout") {
                var user = $localStorage.USER;
                if(user && $state.current.name != "auth.calculator" && $state.current.name != "auth.mailer"){
                    AppService.post('auth/login/user', false, { token: window.localStorage.satellizer_token })
                    .success(function(data) {
                        if (data.token) {
                            $auth.setToken(data.token);
                            $localStorage.USER = data;
                        }
                    })
                    .error(function(error) {
                        AppService.isAuth(error);
                    });
                }
            }
        });

        OneSignalFactory.initialize();

       $rootScope.$watch('showAppUrl', function() {
           $rootScope.appUrl = $rootScope.showAppUrl ? 'download-app' : '';
           //$rootScope.RestrictedWarning = $rootScope.showRestrictedGoodsWarning ? 'showRestrictedGoodsWarningDiv' : '';
        })
       $rootScope.$watch('showAppPopup', function() {
           $rootScope.appPopup = $rootScope.showAppPopup ? 'download-app-popup' : '';
           //$rootScope.RestrictedWarning = $rootScope.showRestrictedGoodsWarning ? 'showRestrictedGoodsWarningDiv' : '';
        })

       $rootScope.disableStrips = disableStrips;
    }
})();

(function() {
    'use strict';

    angular
        .module('app.settings', []);
})();


(function() {
    'use strict';

    angular
        .module('app.settings').directive('numbersOnly', function () {
        return {
            require: 'ngModel',
            link: function (scope, element, attr, ngModelCtrl) {
                function fromUser(text) {
                    if (text) {
                        var transformedInput = text.replace(/[^0-9]/g, '');

                        if (transformedInput !== text) {
                            ngModelCtrl.$setViewValue(transformedInput);
                            ngModelCtrl.$render();
                        }
                        return transformedInput;
                    }
                    return undefined;
                }

                ngModelCtrl.$parsers.push(fromUser);
            }
        };
    });
})();

(function() {
    'use strict';

    angular
        .module('app.settings').factory('GoogleAdWordsService', ["$window", function ($window) {
        // Conversion labels
        var google_conversion_label = {
            'recharge_success': "dAewCPifgHUQ1aTjywM"
        };
        // Basic settings for AdWords Conversion
        var googleTrackConversion = function (conversion_label) {
            $window.google_trackConversion({
                google_conversion_label: google_conversion_label[conversion_label],
                google_conversion_id: 964219477,
                google_conversion_language : "en",
                google_conversion_format : "3",
                google_conversion_color : "ffffff",
                google_remarketing_only : false
            });
        };

        return {
            sendRechargeSuccessConversion: function () {
                // Trigger recharge_success conversion
                googleTrackConversion('recharge_success');
            }
        };
    }]);
})();
(function() {
    'use strict';

//vaidatin url factory

angular.module('app.settings')
    .factory('UrlValidator', ['$localStorage', '$timeout',  function ($localStorage, $timeout) {

        //regex for validating url
        function isValid(url) {
            return /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(url);
        }

        return {
            isValid: isValid              
        }
    }]);
})();

(function(angular, undefined) {
  angular.module("SR_CONSTANTS", [])
.constant("SR_CONSTANTS", {"APIBaseUrl":"https://apiv2.shiprocket.in/v1/","baseTemplatePrefix":"http://krmct001.kartrocket.com/v1/app/","GATrackingID":"XXXXXXXXXXXXX","api_urls":{"get_dashboard_overview":"dashboard/overview","get_dashboard_top_products":"dashboard/top/products","get_dashboard_top_categories":"dashboard/top/categories","get_shipments_pending":"shipments/ndr/pending","get_shipments_rto_details":"shipments/rto/details","get_dashboard_orders":"dashboard/orders","get_dashboard_shipment":"dashboard/shipment","get_return_orders":"orders/processing/return","get_orders_show":"orders/show/","get_order_activities":"orders/activities/","get_courier_shipment_tracking":"courier/track/shipment/","get_single_reassign_data":"courier/single_reassign_data","single_reassign_manifest":"courier/single_reassign_manifest","update_product_imei":"products/update/imei","generate_pickup":"courier/generate/pickup","generate_bulk_pickup":"courier/generate/bulk_pickup","get_countries":"countries","get_countries_show":"countries/show/","update_order_address":"orders/address/update","order_delivered":"orders/delivered/","billing_deduct":"billing/deduct","generate_picklists":"picklists/generate","all_pending_cod_recon":"cod/recon/pending_cod?per_page=all","print_invoice":"orders/print/invoice","print_channel_invoice":"orders/print/invoice/channel","generate_label":"courier/generate/label","save_shipment_details":"shipments/save/","billing_discrepancy":"billing/discrepancy","courier_serviceability":"courier/serviceability","assign_awb":"courier/assign/awb","bulk_assign_awb":"courier/bulk_assign/awb","export_orders":"orders/export","fetch_orders":"orders/fetch","orders_status":"orders/status","orders_fulfill":"orders/fulfill","get_courier_applied_weight":"courier/applied_weight","get_orders_count":"orders/count","cancel_orders":"orders/cancel","get_recharge_amount_weight":"billing/recharge/amount_weight","recharge":"billing/recharge","sync_statement":"billing/sync_statement","products_import":"products/import","channel_products_import":"listings/bulk","listings_import":"listings/import","inventory_import":"inventory/import","orders_import":"orders/import","unprocessable_orders":"orders/unprocessable","search_listings":"listings/search","orders_mapping":"orders/mapping","get_inventory_sync_status":"settings/inventory/sync/status","sync_inventory":"settings/inventory/sync/","sync_tracking":"courier/track/all?awb=","update_product_hsn":"products/update/hsn","update_ndr_sheet":"internal/report/ndr/upload","check_weight_dispute":"weightdispute/check","get_api_users":"settings/api/getapiusers","create_api_user":"settings/api/","add_rto_address":"settings/company/addrto","get_rto_addr_info":"settings/company/rto","update_Password":"settings/api/updatePassword","remittance_summary":"account/details/remittance_summary","recharge_summary":"courier/transaction_summary","getReferralCode":"referral/referral-code","SendReferralSms":"referral/send-referral","checkReferralCode":"referral/check-referral","activity_logs":"account/details/activities/logs"},"intercom_events":{"order_clicked":"Clicked Order","bulk_invoice_button_clicked":"Clicked Bulk Invoice Button","bulk_picklist_button_clicked":"Clicked Bulk Picklist Button","bulk_label_button_clicked":"Clicked Bulk Label Button","invoice_clicked":"Clicked Single - Invoice","dimensions_edited":"Edited Dimension","unProcessable_page_clicked":"Clicked UnProcessable Page","uploaded_product_sheet":"Uploaded Product sheet","uploaded_listing_sheet":"Uploaded Listing sheet","uploaded_inventory_sheet":"Uploaded Inventory sheet","uploaded_order_sheet":"Uploaded Order sheet","clicked_bulk_map":"Clicked Bulk Map","clicked_single_map":"Clicked Single Map","single_add_stock_clicked":"Clicked Single Add Stock","bulk_add_stock_clicked":"Clicked Bulk Add Stock","order_ID_clicked":"Clicked Order ID","invoice_order_internal_clicked":"Clicked Invoice Order Internal","manifest_order_internal_clicked":"Clicked Manifest - Order Internal","address_edited":"Edited Address","label_order_internal_clicked":"Clicked Label - Order Internal","manage_catalog_clicked":"Clicked Manage Catalog - Toggle inventory","manage_catalog_toggle_on":"Toggle ON","manage_catalog_toggle_off":"Toggle OFF","uploaded_ndr_sheet":"Uploaded NDR sheet","uploaded_channel_products":"Uploaded Products to Channel Catalog"},"alert_messages":{"whmcs_id_not_created":"Your WHMCS Id not created Please contact to support team","enter_numerical_value":"Please Enter Numerical Value.","enter_numerical_value_gtr_than_0":"Please enter numerical value greater than zero","order_cancel_success":"Successfully cancelled Order","courier_company_not_available":"Courier Company Not Available","refreshing_amount":"Refreshing Amount","order_sync_started":"Order Synchronization Started","status_sync_started":"Status Synchronization Started","successfully_uploaded":"Successfully Uploaded","no_file_import":"No file selected for import.","uploading":"Uploading","waiting_for_queue":"Waiting For Queue ---","processing":"Processing ----","select_sku":"Please select sku","input_weight":"please Input weight","select_courier_company":"Please select any courier company","no_imei_product":"You Do Not Have Any IMEI Product","sync_tracking":"Syncing tracking Information. Please Wait."}});

})(angular);


(function() {
    'use strict';

/**
 * @ngdoc service
 * @name wootricAngularApp.freshChatFactory
 * @description
 * # freshChatFactory
 * Factory in the wootricAngularApp.
 */
angular.module('app.settings')
    .factory('freshChatFactory', ['$localStorage', '$timeout',  function ($localStorage, $timeout) {

        function set_data() {
            var user = $localStorage.USER;
            if(user){
                window.fcWidget.setExternalId(user.company_id);
                window.fcWidget.user.setFirstName(user.first_name);
                window.fcWidget.user.setEmail(user.email);

                var freshchatProp = {
                    company_name: user.company_name,                 
                    plan_id: user.plan_id,                 
                    signup_date: user.created_at.date,                 
                    tier: user.tier ? user.tier : null,                 
                    status: !user.is_plan_expired,
                    onboarding_complete: user.is_onboarding_complete,
                };
                window.fcWidget.user.setProperties(freshchatProp);
            }
            
        }

        function boot() {
            window.fcWidget.init({
              token: "96897de8-0062-4c4c-aa5b-aa7a040d1c47",
              host: "https://wchat.freshchat.com",
              config: {
                headerProperty: {
                  //Hide the chat button on load
                  hideChatButton: false,
                }
              }
            });            
        }

        function hide() {
            window.fcWidget.hide();
        }

        return {
            run: boot,                
            update_data: set_data,
            hide_chat: hide
        }
    }]);
})();
;(function(angular){
    'use strict'
    var app = angular.module('ngPopover', []);
    app.directive('ngPopover', function() {
        return {
            restrict: 'A',
            scope: {
                direction: '@',
                onClose: '&',
                trigger:'@',
                onOpen: '&',
                popoverClass: '@',
            },
            replace: false,
            transclude: true, // we want to insert custom content inside the directive
            link: function($scope, element, attrs, ctrl) {

                $scope.popoverClass = attrs.popoverClass;
                $scope.dropDirection = attrs.direction || 'bottom';
                var left, top;
                var trigger = element;
                var target = document.querySelector('ng-popover-template[trigger="'+$scope.trigger+'"]');

                // Add click event listener to trigger
                trigger.addEventListener('click', function(ev){
                    var left, top;
                    var trigger = this; //get trigger element
                    var target =  document.querySelector('ng-popover-template[trigger="'+$scope.trigger+'"]'); //get triger's target popover
                    ev.preventDefault();
                    
                    calcPopoverPosition(trigger, target); //calculate the position of the popover
                   hideAllPopovers(trigger);
                    target[0].classList.toggle('hide'); //toggle display of target popover
                    // if target popover is visible then add click listener to body and call the open popover callback
                    if(!target.classList.contains('hide')){
                        ctrl.registerBodyListener();
                        $scope.onOpen();
                        $scope.$apply();
                    }
                    //else remove click listener from body and call close popover callback
                    else{
                        ctrl.unregisterBodyListener();
                        $scope.onClose();
                        $scope.$apply();
                    }
                }, false);

                var getTriggerOffset = function(){
                    var triggerRect = trigger.getBoundingClientRect();
                    var bodyRect = document.body.getBoundingClientRect();
                    return {
                        top: triggerRect.top + document.body.scrollTop,
                        left: triggerRect.left + document.body.scrollLeft
                    }
                };

                // calculates the position of the popover
                var calcPopoverPosition = function(trigger, target){
                    target.classList.toggle('hide');
                    var targetWidth = target.offsetWidth;
                    var targetHeight = target.offsetHeight;
                    target.classList.toggle('hide');
                    var triggerWidth = trigger.offsetWidth;
                    var triggerHeight = trigger.offsetHeight;
                    switch($scope.dropDirection){
                        case 'left': {
                            left = getTriggerOffset().left - targetWidth - 10 + 'px';
                            top = getTriggerOffset().top + 'px';
                            break;
                        }

                        case 'right':{
                            left = getTriggerOffset().left + triggerWidth + 10 + 'px';
                            top = getTriggerOffset().top + 'px';
                            break;
                        }

                        case'top':{
                            left = getTriggerOffset().left + 'px';
                            top = getTriggerOffset().top - targetHeight - 10 + 'px';
                            break;
                        }

                        default:{
                            left = getTriggerOffset().left +'px';
                            top = getTriggerOffset().top + triggerHeight + 10 + 'px'
                        }
                    }
                    target.style.position = 'absolute';
                    target.style.left = left;
                    target.style.top = top;
                }
                calcPopoverPosition(trigger, target);
            },

            controller: ['$scope', function($scope){
                // logic to hide popover on click of body
                var bodyListenerLogic = function(e){
                    var clickedElement = e.target;
                    var insidePopover = false;
                    do {
                        if(clickedElement != document && (clickedElement.classList && (clickedElement.classList.contains('ng-popover-template') || clickedElement.classList.contains('ng-popover-trigger')))) {
                            insidePopover = true;
                        break;
                        }
                    } while ((clickedElement = clickedElement.parentNode));
                    if(!insidePopover) {
                        hideAllPopovers();
                        document.body.removeEventListener('click', bodyListenerLogic);
                        $scope.onClose();
                        $scope.$apply();
                    }
                }
                this.registerBodyListener = function(){
                    document.body.addEventListener('click', bodyListenerLogic);
                }

                this.unregisterBodyListener = function(){
                    document.body.removeEventListener('click', bodyListenerLogic)
                }
            }],
            template: '<div class="ng-popover-template hide"><div class="ng-popover-wrapper {{dropDirection}}"><div class="ng-popover-content" ng-class="popoverClass"><ng-transclude></ng-transclude></div></div></div>'
        }
    });

    app.factory('ngPopoverFactory', function(){
        return {
            closePopover : function(trigger){
                document.querySelector('ng-popover-template[trigger='+trigger+']').classList.add('hide');
            },
            closeAll : function(){
                var allPopovers = document.querySelectorAll('ng-popover-template');
                for(var i=0; i<allPopovers.length; i++){
                    if(!allPopovers[i].classList.contains('hide'))
                        allPopovers[i].classList.add('hide');
                }
            }
        }
    });

    // Hides all popovers, skips the popover whose trigger Id is provided in the function call
    var hideAllPopovers = function(trigger){
        var triggerId;
        if(trigger)
            triggerId = trigger.getAttribute('id');
         var allPopovers = trigger != undefined ? document.querySelectorAll('ng-popover-template:not([trigger="'+triggerId+'"])') : document.querySelectorAll('ng-popover-template');
        for(var i =0; i<allPopovers.length; i++){
            var popover = allPopovers[i];
            if(!popover.classList.contains('hide'))
                popover.classList.add('hide')
        }
    }
})(angular);
(function() {
    'use strict';

//OneSignal Factory

angular.module('app.settings')
    .factory('OneSignalFactory', ['$localStorage', function ($localStorage) {

        function load_manifest(){
            var link = document.createElement("link");
            link.href = "/manifest.json";
            link.rel = "manifest";

            document.getElementsByTagName( "head" )[0].appendChild( link );
        }

        function loadScript( url ) {
            load_manifest();
          var script = document.createElement( "script" )
          script.type = "text/javascript";
          if(script.readyState) {  //IE
            script.onreadystatechange = function() {
              if ( script.readyState === "loaded" || script.readyState === "complete" ) {
                script.onreadystatechange = null;
                initialize();
              }
            };
          } else {  //Others
            script.onload = function() {
              initialize();
            };
          }

          script.src = url;
          script.async = true;
          document.getElementsByTagName( "head" )[0].appendChild( script );
        }

        loadScript("https://cdn.onesignal.com/sdks/OneSignalSDK.js");

        function initialize() {
            var OneSignal = window.OneSignal || [];

            if(window.location.origin == 'https://app.shiprocket.in'){
                var oneSignal_app_id = "2488d886-96b8-47d6-9e5b-34625de9fa1c";
            }else if(window.location.origin == 'http://ankita-qa.kartrocket.com'){
                var oneSignal_app_id = "44faab20-5c14-4bee-9859-ec12c02eb3ac";
            }else if(window.location.origin == 'https://krmct003.kartrocket.com'){
                var oneSignal_app_id = "5ff15f5d-7d6c-4f3d-96c0-a76bf97cfaa4";
            }else{
                var oneSignal_app_id = "6a13fc22-c743-4985-9b9e-9ada649cd45a";
            }
            OneSignal.push(function() {
              OneSignal.init({
                appId: oneSignal_app_id,
                autoRegister: false,
                notifyButton: {
                  enable: false,
                },
                allowLocalhostAsSecureOrigin: true,
                promptOptions: {
                  /* actionMessage limited to 90 characters */
                  actionMessage: "We'd like to show you notifications for the latest news and updates.",
                  /* acceptButtonText limited to 15 characters */
                  acceptButtonText: "ALLOW",
                  /* cancelButtonText limited to 15 characters */
                  cancelButtonText: "NO THANKS"
                }, 
                welcomeNotification: {
                    "title": "Welcome to Shiprocket",
                    "message": "Thanks for subscribing!",
                    "url": "https://app.shiprocket.in" /* Leave commented for the notification to not open a window on Chrome and Firefox (on Safari, it opens to your webpage) */
                }
              });
              if (Notification.permission === "granted") {
                // Automatically subscribe user if deleted cookies and browser shows "Allow"
                OneSignal.registerForPushNotifications();
              } else {
                OneSignal.showHttpPrompt();
              }
            });

            set_login_tags(); //if any
        }

        //Available tags - 
        //seller_type => otp_non_verified, lite_sellers, non_lite_sellers
        //international => true, false 
        //international true for plan_id 1,2,7,11,12

        function send_user_tags(tags_json){
            var OneSignal = window.OneSignal || [];
            OneSignal.push(function() {
              OneSignal.sendTags(tags_json, function(tagsSent) {
                // Callback called when tags have finished sending
                console.log("onesignal tags sent");
              });
            }); 
        }

        function set_login_tags(){
            if($localStorage.USER != undefined){
                var lite_seller = $localStorage.USER.is_free_plan;
                var user_plan_id = $localStorage.USER.plan_id;
                var intl_plan_id_array = [1,2,7,11,12]; //these plans do not have international shipping
                var temp_international = "false";
                if(intl_plan_id_array.indexOf(user_plan_id) == -1){
                  var temp_international = "true";
                }
                var temp_seller_type = "non_lite_sellers"; 
                if(lite_seller){
                  var temp_seller_type = "lite_sellers"; 
                }

                send_user_tags({
                  "seller_type": temp_seller_type,
                  "international": temp_international,
                });      
            }
        }

        function set_otp_not_verified_tags(){
            send_user_tags({
              "seller_type": "otp_non_verified",
              "international": "false",
            });
        }

        function set_lite_seller_tags(){
            send_user_tags({
              "seller_type": "lite_sellers",
              "international": "false",
            });
        }

        function send_plan_update_tags(plan_id){
            var seller_type_temp = "lite_sellers";
            var international_temp = "false"; 
            if(plan_id != 1){
                seller_type_temp = "non_lite_sellers";
            }
            if(plan_id != 1 && plan_id != 2){
                international_temp = "true";
            }
            send_user_tags({
            "seller_type": seller_type_temp,
            "international": international_temp,
            });
        }

        return {
            initialize: loadScript,
            set_login_tags : set_login_tags,
            set_otp_not_verified_tags : set_otp_not_verified_tags,
            set_lite_seller_tags : set_lite_seller_tags,
            send_plan_update_tags : send_plan_update_tags   
        }

    }]);
})();
"use strict";

var setUserContextForSentry = function($localStorage, SR_CONSTANTS){
        // Add user data for All Error Logs
        if ($localStorage.USER) {
            Raven.setUserContext({
                'email': $localStorage.USER.email,
                'plan_ID': $localStorage.USER.plan_id,
                'company_ID': $localStorage.USER.company_id,
                'inventory_sync_status': $localStorage.USER.inventory_sync_status
            });
            Raven.setTagsContext({
                auth_token: $localStorage.USER.token
            });
        }else {
            Raven.setUserContext({});
        }

        Raven.setExtraContext({
            cookie: document.cookie
        });
};


var logJSErrorToSentry = function($localStorage, SR_CONSTANTS){

    var env_name = "default";
    if(window.location.origin == 'http://krmct002.kartrocket.com' ) {
        env_name = "staging";
    } else if( window.location.origin == 'https://krmct.uat.kartrocket.com') {
        env_name = "uat";
    }else if(window.location.origin == 'https://app.shiprocket.in') {
        env_name = "production";
    }else if(window.location.origin == 'https://krmct003.kartrocket.com') {
        env_name = "dev";
    }else if(window.location.origin == 'http://krmct.sprint.kartrocket.com') {
        env_name = "sprint";
    }

    var version = JSON.parse(GetJSON("app/js/version.json"));
    try {
        var ravenDns = 'https://08d2be9f0b70454697cd870e24d0c8cf@sentry.io/146909';
        if(ravenDns){
            Raven.config(ravenDns,{
                environment:env_name,
                release: version.VERSION
            }).addPlugin(Raven.Plugins.Angular).install();
        }
        setUserContextForSentry($localStorage, SR_CONSTANTS);
    } catch(e) {
        console.log('Some error in raven configuration:', e.message);
    }
};

(function() {
    'use strict';
    angular
        .module('app.settings')
        .run(settingsRun);
    settingsRun.$inject = ['$rootScope', '$localStorage', '$window', 'Notify'];
    function settingsRun($rootScope, $localStorage,$window, Notify){
      // Global Settings
      // -----------------------------------

      $rootScope.app = {
        name: 'Shiprocket',
        description: '',
        year: ((new Date()).getFullYear()),
        layout: {
          isFixed: true,
          isCollapsed: true,
          isBoxed: false,
          isRTL: false,
          horizontal: false,
          isFloat: false,
          asideHover: true,
          theme: 'app/css/theme-e.css',
          asideScrollbar: true
        },
        useFullLayout: true,
        hiddenFooter: false,
        offsidebarOpen: false,
        asideToggled: false,
        viewAnimation: 'ng-fadeIn'
      };

            $rootScope.loginUser = $localStorage.USER;

      // Setup the layout mode
      $rootScope.app.layout.horizontal = ( $rootScope.$stateParams.layout === 'app-h') ;

      // Close submenu when sidebar change from collapsed to normal
      $rootScope.$watch('app.layout.isCollapsed', function(newValue) {
        if( newValue === false )
          $rootScope.$broadcast('closeSidebarMenu');
      });

        //CHECK INTERNET CONNECTIVITY
        $rootScope.online = navigator.onLine;
        $window.addEventListener("offline", function() {
            $rootScope.$apply(function() {
                $('.uk-notify-message ').remove();
              $rootScope.online = false;
              Notify.alert('Please Connect to Internet', {timeout: null})
            });
        }, false);

        $window.addEventListener("online", function() {
            $rootScope.$apply(function() {
              $rootScope.online = true;
              $('.uk-notify-message ').remove();
              Notify.alert('Internet Connected', {timeout: 1000})
            });
        }, false);

        // user information

    }

})();

(function() {
    'use strict';
    angular.module('app.Loader', []);
})();



(function() {
    'use strict';
    angular
        .module('app.Loader').factory('loaderFactory', function () {
        var loader = {
            text: "Loading Your Data Please Wait.",
            show: false
        };

        function hide(){
            loader.show = false;
            loader.text = "Loading Your Data Please Wait.";
        }

        function display(text){
            loader.text = text;
            loader.show = true;
        }

        function getProperties(property) {
            return loader[property]
        }

        return {
            hide: hide,
            display: display,
            getProperties: getProperties,
        };
    });
})();

(function() {
    'use strict';
    angular.module('app.Loader').directive('loaderWithText', function () {
        return {
            restrict: 'E',
            replace: true,
            templateUrl: 'app/views/directives/loaderWithText.html',
            controller: ['$scope','loaderFactory',
                function ($scope, loaderFactory) {

                    $scope.loader = {
                        text: "",
                        show: false
                    };

                    $scope.$watch(function () { return loaderFactory.getProperties('text');}, function (newValue, oldValue) {
                        if(newValue !== oldValue){
                            $scope.loader.text = newValue;
                        }
                    });
                    $scope.$watch(function () { return loaderFactory.getProperties('show');}, function (newValue, oldValue) {
                        if(newValue !== oldValue){
                            $scope.loader.show = newValue;
                        }
                    });

                }]

        }

    });
})();

function GetJSON(yourUrl){
    var Httpreq = new XMLHttpRequest(); // a new request
    Httpreq.open("GET",yourUrl,false);
    Httpreq.send(null);
    return Httpreq.responseText;
}

(function() {
    'use strict';


angular
    .module('app.settings').directive('decimalPlaces',function(){
    return {
        scope:{
            dpLength: "="
        },
        link:function(scope,ele,attrs){
            ele.bind('keypress',function(e){

            });


            ele.on('keydown', function (event) {
                var $input = $(this);
                var value = $input.val();
                value = value.replace(/[^0-9\.]/g, '');

                var findsDot = new RegExp(/\./g);
                var containsDot = value.match(findsDot);
                if (containsDot != null && ([46, 110, 190].indexOf(event.which) > -1)) {
                    event.preventDefault();
                    return false;
                }

                // $input.val(value);


                // var newVal=$(this).val();
                if($input.val().length >= scope.dpLength+1){
                    if([8, 9, 13, 27, 37, 38, 39, 40, 110].indexOf(event.which) > -1) {
                        // backspace, enter, escape, arrows
                        return true;
                    }else{
                        event.preventDefault();
                        return false;
                    }
                }

                if (event.which == 64 || event.which == 16) {
                    // numbers
                    return false;
                } if ([8, 9, 13, 27, 37, 38, 39, 40, 110].indexOf(event.which) > -1) {
                    // backspace, enter, escape, arrows
                    return true;
                } else if (event.which >= 48 && event.which <= 57) {
                    // numbers
                    return true;
                } else if (event.which >= 96 && event.which <= 105) {
                    // numpad number
                    return true;
                } else if ([46, 110, 190].indexOf(event.which) > -1) {
                    // dot and numpad dot
                    return true;
                } else {
                    event.preventDefault();
                    return false;
                }
            });


        }
    };
});
})();

;(function() {
    'use strict';

/**
 * @ngdoc service
 * @name wootricAngularApp.wootricFactory
 * @description
 * # wootricFactory
 * Factory in the wootricAngularApp.
 */
angular.module('app.settings')
    .factory('wootricFactory', ['$localStorage', '$timeout',  function ($localStorage, $timeout) {

        function set_data() {
            var user = $localStorage.USER;
            if(user){
                var date = moment(user.created_at.date).unix();
                window.wootricSettings = {
                    email: user.email,// TODO: The current logged in user's email address.
                    created_at: date, // TODO: The current logged in user's sign-up date as a 10 digit Unix timestamp.
                    account_token: 'NPS-397ff8f2' // This is your unique account token.
                };
                var i=new Image;i.src="//d8myem934l1zi.cloudfront.net/pixel.gif?account_token="+window.wootricSettings.account_token+"&email="+encodeURIComponent(window.wootricSettings.email)+"&created_at="+window.wootricSettings.created_at+"&url="+encodeURIComponent(window.location)+"&random="+Math.random()
                window.lightningjs||function(c){function g(b,d){d&&(d+=(/\?/.test(d)?"&":"?")+"lv=1");c[b]||function(){var i=window,h=document,j=b,g=h.location.protocol,l="load",k=0;(function(){function b(){a.P(l);a.w=1;c[j]("_load")}c[j]=function(){function m(){m.id=e;return c[j].apply(m,arguments)}var b,e=++k;b=this&&this!=i?this.id||0:0;(a.s=a.s||[]).push([e,b,arguments]);m.then=function(b,c,h){var d=a.fh[e]=a.fh[e]||[],j=a.eh[e]=a.eh[e]||[],f=a.ph[e]=a.ph[e]||[];b&&d.push(b);c&&j.push(c);h&&f.push(h);return m};return m};var a=c[j]._={};a.fh={};a.eh={};a.ph={};a.l=d?d.replace(/^\/\//,(g=="https:"?g:"http:")+"//"):d;a.p={0:+new Date};a.P=function(b){a.p[b]=new Date-a.p[0]};a.w&&b();i.addEventListener?i.addEventListener(l,b,!1):i.attachEvent("on"+l,b);var q=function(){function b(){return["<head></head><",c,' onload="var d=',n,";d.getElementsByTagName('head')[0].",d,"(d.",g,"('script')).",i,"='",a.l,"'\"></",c,">"].join("")}var c="body",e=h[c];if(!e)return setTimeout(q,100);a.P(1);var d="appendChild",g="createElement",i="src",k=h[g]("div"),l=k[d](h[g]("div")),f=h[g]("iframe"),n="document",p;k.style.display="none";e.insertBefore(k,e.firstChild).id=o+"-"+j;f.frameBorder="0";f.id=o+"-frame-"+j;/MSIE[ ]+6/.test(navigator.userAgent)&&(f[i]="javascript:false");f.allowTransparency="true";l[d](f);try{f.contentWindow[n].open()}catch(s){a.domain=h.domain,p="javascript:var d="+n+".open();d.domain='"+h.domain+"';",f[i]=p+"void(0);"}try{var r=f.contentWindow[n];r.write(b());r.close()}catch(t){f[i]=p+'d.write("'+b().replace(/"/g,String.fromCharCode(92)+'"')+'");d.close();'}a.P(2)};a.l&&q()})()}();c[b].lv="1";return c[b]}var o="lightningjs",k=window[o]=g(o);k.require=g;k.modules=c}({});
                window.wootric = lightningjs.require("wootric", "//d27j601g4x0gd5.cloudfront.net/beacon.js");
            }

        }
        return {
            run: function() {
                set_data();
                $timeout(function () {
                    // window.wootric_survey_immediately = true; // Shows survey immediately for testing purposes.  TODO: Comment out for production.
                    // window.wootric_no_surveyed_cookie = true; // Bypass cookie based throttle for testing purposes.  TODO: Comment out for production.
                    window.wootric("run");
                }, 2000);
            }
        }
    }]);
})();

(function() {
    'use strict';

    angular
        .module('app.bootstrapui', []);
})();
(function() {
    'use strict';

    angular
        .module('app.charts', []);
})();
(function() {
    'use strict';

    angular
        .module('app.colors', []);
})();
;(function() {
    'use strict';

    angular.module('app.dashboard', []);
})();

(function() {
    'use strict';

    angular
        .module('app.lazyload', []);
})();
(function() {
    'use strict';

    angular
        .module('app.loadingbar', []);
})();
(function() {
    'use strict';

    angular
        .module('app.notify', []);
})();
(function() {
    'use strict';

    angular
        .module('app.sidebar', []);
})();
(function() {
    'use strict';

    angular
        .module('app.translate', []);
})();
(function() {
    'use strict';

    angular
        .module('app.utils', [
          'app.colors'
          ]);
})();

/**=========================================================
 * Module: demo-alerts.js
 * Provides a simple demo for pagination
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('AlertDemoCtrl', AlertDemoCtrl);

    function AlertDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.alerts = [
            { type: 'danger', msg: 'Oh snap! Change a few things up and try submitting again.' },
            { type: 'warning', msg: 'Well done! You successfully read this important alert message.' }
          ];

          vm.addAlert = function() {
            vm.alerts.push({msg: 'Another alert!'});
          };

          vm.closeAlert = function(index) {
            vm.alerts.splice(index, 1);
          };
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .config(bootstrapuiConfig);

    bootstrapuiConfig.$inject = ['$uibTooltipProvider'];
    function bootstrapuiConfig($uibTooltipProvider){
      $uibTooltipProvider.options({appendToBody: true});
    }
})();
/**=========================================================
 * Module: demo-buttons.js
 * Provides a simple demo for buttons actions
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('ButtonsCtrl', ButtonsCtrl);

    function ButtonsCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.singleModel = 1;

          vm.radioModel = 'Middle';

          vm.checkModel = {
            left: false,
            middle: true,
            right: false
          };
        }
    }
})();

/**=========================================================
 * Module: demo-carousel.js
 * Provides a simple demo for bootstrap ui carousel
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('CarouselDemoCtrl', CarouselDemoCtrl);

    function CarouselDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.myInterval = 5000;

          var slides = vm.slides = [];
          vm.addSlide = function(id) {
            id = id || 8;
            slides.push({
              image: 'app/img/bg' + id + '.jpg',
              text: ['More','Extra','Lots of','Surplus'][slides.length % 2] + ' ' +
                ['Cats', 'Kittys', 'Felines', 'Cutes'][slides.length % 2]
            });
          };

          vm.addSlide(4);
          vm.addSlide(7);
          vm.addSlide(8);

        }
    }
})();

/**=========================================================
 * Module: demo-datepicker.js
 * Provides a simple demo for bootstrap datepicker
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('DatepickerDemoCtrl', DatepickerDemoCtrl);

    function DatepickerDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.today = function() {
            vm.dt = new Date();
          };
          vm.today();

          vm.clear = function () {
            vm.dt = null;
          };

          // Disable weekend selection
          vm.disabled = function(date, mode) {
            return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );
          };

          vm.toggleMin = function() {
            vm.minDate = vm.minDate ? null : new Date();
          };
          vm.toggleMin();

          vm.open = function($event) {
            $event.preventDefault();
            $event.stopPropagation();

            vm.opened = true;
          };

          vm.dateOptions = {
            formatYear: 'yy',
            startingDay: 1
          };

          vm.initDate = new Date('2019-10-20');
          vm.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
          vm.format = vm.formats[0];
        }
    }
})();
/**=========================================================
 * Module: modals.js
 * Provides a simple way to implement bootstrap modals from templates
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('ModalController', ModalController);

    ModalController.$inject = ['$uibModal'];
    function ModalController($uibModal) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          vm.open = function (size) {

            var modalInstance = $uibModal.open({
              templateUrl: '/myModalContent.html',
              controller: ModalInstanceCtrl,
              size: size
            });

            var state = $('#modal-state');
            modalInstance.result.then(function () {
              state.text('Modal dismissed with OK status');
            }, function () {
              state.text('Modal dismissed with Cancel status');
            });
          };

          // Please note that $uibModalInstance represents a modal window (instance) dependency.
          // It is not the same as the $uibModal service used above.

          ModalInstanceCtrl.$inject = ['$scope', '$uibModalInstance'];
          function ModalInstanceCtrl($scope, $uibModalInstance) {

            $scope.ok = function () {
              $uibModalInstance.close('closed');
            };

            $scope.cancel = function () {
              $uibModalInstance.dismiss('cancel');
            };
          }
        }
    }

})();

/**=========================================================
 * Module: demo-pagination.js
 * Provides a simple demo for pagination
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('PaginationDemoCtrl', PaginationDemoCtrl);

    function PaginationDemoCtrl() {
        var vm = this;


        activate();

        ////////////////

        function activate() {
          vm.totalItems = 64;
          vm.currentPage = 4;

          vm.setPage = function (pageNo) {
            vm.currentPage = pageNo;
          };

          vm.pageChanged = function() {
            console.log('Page changed to: ' + vm.currentPage);
          };

          vm.maxSize = 5;
          vm.bigTotalItems = 175;
          vm.bigCurrentPage = 1;
        }
    }
})();

/**=========================================================
 * Module: demo-popover.js
 * Provides a simple demo for popovers
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('PopoverDemoCtrl', PopoverDemoCtrl);

    function PopoverDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.dynamicPopover = 'Hello, World!';
          vm.dynamicPopoverTitle = 'Title';
        }
    }
})();

/**=========================================================
 * Module: demo-progress.js
 * Provides a simple demo to animate progress bar
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('ProgressDemoCtrl', ProgressDemoCtrl);

    function ProgressDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.max = 200;

          vm.random = function() {
            var value = Math.floor((Math.random() * 100) + 1);
            var type;

            if (value < 25) {
              type = 'success';
            } else if (value < 50) {
              type = 'info';
            } else if (value < 75) {
              type = 'warning';
            } else {
              type = 'danger';
            }

            vm.showWarning = (type === 'danger' || type === 'warning');

            vm.dynamic = value;
            vm.type = type;
          };
          vm.random();

          vm.randomStacked = function() {
            vm.stacked = [];
            var types = ['success', 'info', 'warning', 'danger'];

            for (var i = 0, n = Math.floor((Math.random() * 4) + 1); i < n; i++) {
                var index = Math.floor((Math.random() * 4));
                vm.stacked.push({
                  value: Math.floor((Math.random() * 30) + 1),
                  type: types[index]
                });
            }
          };
          vm.randomStacked();
        }
    }
})();

/**=========================================================
 * Module: demo-rating.js
 * Provides a demo for ratings UI
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('RatingDemoCtrl', RatingDemoCtrl);

    function RatingDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.rate = 7;
          vm.max = 10;
          vm.isReadonly = false;

          vm.hoveringOver = function(value) {
            vm.overStar = value;
            vm.percent = 100 * (value / vm.max);
          };

          vm.ratingStates = [
            {stateOn: 'fa fa-check', stateOff: 'fa fa-check-circle'},
            {stateOn: 'fa fa-star', stateOff: 'fa fa-star-o'},
            {stateOn: 'fa fa-heart', stateOff: 'fa fa-ban'},
            {stateOn: 'fa fa-heart'},
            {stateOff: 'fa fa-power-off'}
          ];
        }
    }
})();

/**=========================================================
 * Module: demo-timepicker.js
 * Provides a simple demo for bootstrap ui timepicker
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('TimepickerDemoCtrl', TimepickerDemoCtrl);

    function TimepickerDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.mytime = new Date();

          vm.hstep = 1;
          vm.mstep = 15;

          vm.options = {
            hstep: [1, 2, 3],
            mstep: [1, 5, 10, 15, 25, 30]
          };

          vm.ismeridian = true;
          vm.toggleMode = function() {
            vm.ismeridian = ! vm.ismeridian;
          };

          vm.update = function() {
            var d = new Date();
            d.setHours( 14 );
            d.setMinutes( 0 );
            vm.mytime = d;
          };

          vm.changed = function () {
            console.log('Time changed to: ' + vm.mytime);
          };

          vm.clear = function() {
            vm.mytime = null;
          };
        }
    }
})();

/**=========================================================
 * Module: demo-tooltip.js
 * Provides a simple demo for tooltip
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('TooltipDemoCtrl', TooltipDemoCtrl);

    function TooltipDemoCtrl() {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.dynamicTooltip = 'Hello, World!';
          vm.dynamicTooltipText = 'dynamic';
          vm.htmlTooltip = 'I\'ve been made <b>bold</b>!';

          vm.autoplace = function (context, source) {
            //return (predictTooltipTop(source) < 0) ?  "bottom": "top";
            var pos = 'top';
            if(predictTooltipTop(source) < 0)
              pos = 'bottom';
            if(predictTooltipLeft(source) < 0)
              pos = 'right';
            return pos;
          };

            // Predicts tooltip top position 
            // based on the trigger element
            function predictTooltipTop(el) {
              var top = el.offsetTop;
              var height = 40; // asumes ~40px tooltip height

              while(el.offsetParent) {
                el = el.offsetParent;
                top += el.offsetTop;
              }
              return (top - height) - (window.pageYOffset);
            }

            // Predicts tooltip top position 
            // based on the trigger element
            function predictTooltipLeft(el) {
              var left = el.offsetLeft;
              var width = el.offsetWidth;

              while(el.offsetParent) {
                el = el.offsetParent;
                left += el.offsetLeft;
              }
              return (left - width) - (window.pageXOffset);
            }
        }
    }
})();

/**=========================================================
 * Module: demo-typeahead.js
 * Provides a simple demo for typeahead
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.bootstrapui')
        .controller('TypeaheadCtrl', TypeaheadCtrl);

    TypeaheadCtrl.$inject = ['$http'];
    function TypeaheadCtrl($http) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          vm.selected = undefined;
          vm.states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Dakota', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];

          // Any function returning a promise object can be used to load values asynchronously
          vm.getLocation = function(val) {
            return $http.get('//maps.googleapis.com/maps/api/geocode/json', {
              params: {
                address: val,
                sensor: false
              }
            }).then(function(res){
              var addresses = [];
              angular.forEach(res.data.results, function(item){
                /*jshint -W106*/
                addresses.push(item.formatted_address);
              });
              return addresses;
            });
          };

          vm.statesWithFlags = [{'name':'Alabama','flag':'5/5c/Flag_of_Alabama.svg/45px-Flag_of_Alabama.svg.png'},{'name':'Alaska','flag':'e/e6/Flag_of_Alaska.svg/43px-Flag_of_Alaska.svg.png'},{'name':'Arizona','flag':'9/9d/Flag_of_Arizona.svg/45px-Flag_of_Arizona.svg.png'},{'name':'Arkansas','flag':'9/9d/Flag_of_Arkansas.svg/45px-Flag_of_Arkansas.svg.png'},{'name':'California','flag':'0/01/Flag_of_California.svg/45px-Flag_of_California.svg.png'},{'name':'Colorado','flag':'4/46/Flag_of_Colorado.svg/45px-Flag_of_Colorado.svg.png'},{'name':'Connecticut','flag':'9/96/Flag_of_Connecticut.svg/39px-Flag_of_Connecticut.svg.png'},{'name':'Delaware','flag':'c/c6/Flag_of_Delaware.svg/45px-Flag_of_Delaware.svg.png'},{'name':'Florida','flag':'f/f7/Flag_of_Florida.svg/45px-Flag_of_Florida.svg.png'},{'name':'Georgia','flag':'5/54/Flag_of_Georgia_%28U.S._state%29.svg/46px-Flag_of_Georgia_%28U.S._state%29.svg.png'},{'name':'Hawaii','flag':'e/ef/Flag_of_Hawaii.svg/46px-Flag_of_Hawaii.svg.png'},{'name':'Idaho','flag':'a/a4/Flag_of_Idaho.svg/38px-Flag_of_Idaho.svg.png'},{'name':'Illinois','flag':'0/01/Flag_of_Illinois.svg/46px-Flag_of_Illinois.svg.png'},{'name':'Indiana','flag':'a/ac/Flag_of_Indiana.svg/45px-Flag_of_Indiana.svg.png'},{'name':'Iowa','flag':'a/aa/Flag_of_Iowa.svg/44px-Flag_of_Iowa.svg.png'},{'name':'Kansas','flag':'d/da/Flag_of_Kansas.svg/46px-Flag_of_Kansas.svg.png'},{'name':'Kentucky','flag':'8/8d/Flag_of_Kentucky.svg/46px-Flag_of_Kentucky.svg.png'},{'name':'Louisiana','flag':'e/e0/Flag_of_Louisiana.svg/46px-Flag_of_Louisiana.svg.png'},{'name':'Maine','flag':'3/35/Flag_of_Maine.svg/45px-Flag_of_Maine.svg.png'},{'name':'Maryland','flag':'a/a0/Flag_of_Maryland.svg/45px-Flag_of_Maryland.svg.png'},{'name':'Massachusetts','flag':'f/f2/Flag_of_Massachusetts.svg/46px-Flag_of_Massachusetts.svg.png'},{'name':'Michigan','flag':'b/b5/Flag_of_Michigan.svg/45px-Flag_of_Michigan.svg.png'},{'name':'Minnesota','flag':'b/b9/Flag_of_Minnesota.svg/46px-Flag_of_Minnesota.svg.png'},{'name':'Mississippi','flag':'4/42/Flag_of_Mississippi.svg/45px-Flag_of_Mississippi.svg.png'},{'name':'Missouri','flag':'5/5a/Flag_of_Missouri.svg/46px-Flag_of_Missouri.svg.png'},{'name':'Montana','flag':'c/cb/Flag_of_Montana.svg/45px-Flag_of_Montana.svg.png'},{'name':'Nebraska','flag':'4/4d/Flag_of_Nebraska.svg/46px-Flag_of_Nebraska.svg.png'},{'name':'Nevada','flag':'f/f1/Flag_of_Nevada.svg/45px-Flag_of_Nevada.svg.png'},{'name':'New Hampshire','flag':'2/28/Flag_of_New_Hampshire.svg/45px-Flag_of_New_Hampshire.svg.png'},{'name':'New Jersey','flag':'9/92/Flag_of_New_Jersey.svg/45px-Flag_of_New_Jersey.svg.png'},{'name':'New Mexico','flag':'c/c3/Flag_of_New_Mexico.svg/45px-Flag_of_New_Mexico.svg.png'},{'name':'New York','flag':'1/1a/Flag_of_New_York.svg/46px-Flag_of_New_York.svg.png'},{'name':'North Carolina','flag':'b/bb/Flag_of_North_Carolina.svg/45px-Flag_of_North_Carolina.svg.png'},{'name':'North Dakota','flag':'e/ee/Flag_of_North_Dakota.svg/38px-Flag_of_North_Dakota.svg.png'},{'name':'Ohio','flag':'4/4c/Flag_of_Ohio.svg/46px-Flag_of_Ohio.svg.png'},{'name':'Oklahoma','flag':'6/6e/Flag_of_Oklahoma.svg/45px-Flag_of_Oklahoma.svg.png'},{'name':'Oregon','flag':'b/b9/Flag_of_Oregon.svg/46px-Flag_of_Oregon.svg.png'},{'name':'Pennsylvania','flag':'f/f7/Flag_of_Pennsylvania.svg/45px-Flag_of_Pennsylvania.svg.png'},{'name':'Rhode Island','flag':'f/f3/Flag_of_Rhode_Island.svg/32px-Flag_of_Rhode_Island.svg.png'},{'name':'South Carolina','flag':'6/69/Flag_of_South_Carolina.svg/45px-Flag_of_South_Carolina.svg.png'},{'name':'South Dakota','flag':'1/1a/Flag_of_South_Dakota.svg/46px-Flag_of_South_Dakota.svg.png'},{'name':'Tennessee','flag':'9/9e/Flag_of_Tennessee.svg/46px-Flag_of_Tennessee.svg.png'},{'name':'Texas','flag':'f/f7/Flag_of_Texas.svg/45px-Flag_of_Texas.svg.png'},{'name':'Utah','flag':'f/f6/Flag_of_Utah.svg/45px-Flag_of_Utah.svg.png'},{'name':'Vermont','flag':'4/49/Flag_of_Vermont.svg/46px-Flag_of_Vermont.svg.png'},{'name':'Virginia','flag':'4/47/Flag_of_Virginia.svg/44px-Flag_of_Virginia.svg.png'},{'name':'Washington','flag':'5/54/Flag_of_Washington.svg/46px-Flag_of_Washington.svg.png'},{'name':'West Virginia','flag':'2/22/Flag_of_West_Virginia.svg/46px-Flag_of_West_Virginia.svg.png'},{'name':'Wisconsin','flag':'2/22/Flag_of_Wisconsin.svg/45px-Flag_of_Wisconsin.svg.png'},{'name':'Wyoming','flag':'b/bc/Flag_of_Wyoming.svg/43px-Flag_of_Wyoming.svg.png'}];

        }
    }
})();

/**=========================================================
 * Module: chartist.js
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('ChartistController', ChartistController);

    function ChartistController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // Line chart
          // ----------------------------------- 

          vm.lineData = {
            labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'],
            series: [
              [12, 9, 7, 8, 5],
              [2, 1, 3.5, 7, 3],
              [1, 3, 4, 5, 6]
            ]
          };

          vm.lineOptions = {
            fullWidth: true,
            height: 220,
            chartPadding: {
              right: 40
            }
          };

          // Bar bipolar
          // ----------------------------------- 

          vm.barBipolarOptions = {
            high: 10,
            low: -10,
            height: 220,
            axisX: {
              labelInterpolationFnc: function(value, index) {
                return index % 2 === 0 ? value : null;
              }
            }
          };

          vm.barBipolarData = {
            labels: ['W1', 'W2', 'W3', 'W4', 'W5', 'W6', 'W7', 'W8', 'W9', 'W10'],
            series: [
              [1, 2, 4, 8, 6, -2, -1, -4, -6, -2]
            ]
          };


          // Bar horizontal
          // ----------------------------------- 

          vm.barHorizontalData = {
            labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],
            series: [
              [5, 4, 3, 7, 5, 10, 3],
              [3, 2, 9, 5, 4, 6, 4]
            ]
          };

          vm.barHorizontalOptions = {
            seriesBarDistance: 10,
            reverseData: true,
            horizontalBars: true,
            height: 220,
            axisY: {
              offset: 70
            }
          };

          // Smil Animations
          // ----------------------------------- 

          // Let's put a sequence number aside so we can use it in the event callbacks
          var seq = 0,
            delays = 80,
            durations = 500;

          vm.smilData = {
            labels: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'],
            series: [
              [12, 9, 7, 8, 5, 4, 6, 2, 3, 3, 4, 6],
              [4,  5, 3, 7, 3, 5, 5, 3, 4, 4, 5, 5],
              [5,  3, 4, 5, 6, 3, 3, 4, 5, 6, 3, 4],
              [3,  4, 5, 6, 7, 6, 4, 5, 6, 7, 6, 3]
            ]
          };

          vm.smilOptions = {
            low: 0,
            height: 260
          };

          vm.smilEvents = {
            created: function() {
              seq = 0;
            },
            draw: function(data) {
              seq++;

              if(data.type === 'line') {
                // If the drawn element is a line we do a simple opacity fade in. This could also be achieved using CSS3 animations.
                data.element.animate({
                  opacity: {
                    // The delay when we like to start the animation
                    begin: seq * delays + 1000,
                    // Duration of the animation
                    dur: durations,
                    // The value where the animation should start
                    from: 0,
                    // The value where it should end
                    to: 1
                  }
                });
              } else if(data.type === 'label' && data.axis === 'x') {
                data.element.animate({
                  y: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.y + 100,
                    to: data.y,
                    // We can specify an easing function from Chartist.Svg.Easing
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'label' && data.axis === 'y') {
                data.element.animate({
                  x: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 100,
                    to: data.x,
                    easing: 'easeOutQuart'
                  }
                });
              } else if(data.type === 'point') {
                data.element.animate({
                  x1: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                  },
                  x2: {
                    begin: seq * delays,
                    dur: durations,
                    from: data.x - 10,
                    to: data.x,
                    easing: 'easeOutQuart'
                  },
                  opacity: {
                    begin: seq * delays,
                    dur: durations,
                    from: 0,
                    to: 1,
                    easing: 'easeOutQuart'
                  }
                });
              } 
            }
          };


          // SVG PATH animation
          // ----------------------------------- 

          vm.pathData = {
            labels: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            series: [
              [1, 5, 2, 5, 4, 3],
              [2, 3, 4, 8, 1, 2],
              [5, 4, 3, 2, 1, 0.5]
            ]
          };

          vm.pathOptions = {
            low: 0,
            showArea: true,
            showPoint: false,
            fullWidth: true,
            height: 260
          };

          vm.pathEvents = {
            draw: function(data) {
              if(data.type === 'line' || data.type === 'area') {
                data.element.animate({
                  d: {
                    begin: 2000 * data.index,
                    dur: 2000,
                    from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),
                    to: data.path.clone().stringify(),
                    easing: Chartist.Svg.Easing.easeOutQuint
                  }
                });
              }
            }
          };

        }
    }
})();


/**=========================================================
 * Module: chart.controller.js
 * Controller for ChartJs
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('ChartJSController', ChartJSController);

    ChartJSController.$inject = ['Colors'];
    function ChartJSController(Colors) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // random values for demo
          var rFactor = function(){ return Math.round(Math.random()*100); };

          // Line chart
          // ----------------------------------- 

          vm.lineData = {
              labels : ['January','February','March','April','May','June','July'],
              datasets : [
                {
                  label: 'My First dataset',
                  fillColor : 'rgba(114,102,186,0.2)',
                  strokeColor : 'rgba(114,102,186,1)',
                  pointColor : 'rgba(114,102,186,1)',
                  pointStrokeColor : '#fff',
                  pointHighlightFill : '#fff',
                  pointHighlightStroke : 'rgba(114,102,186,1)',
                  data : [rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor()]
                },
                {
                  label: 'My Second dataset',
                  fillColor : 'rgba(35,183,229,0.2)',
                  strokeColor : 'rgba(35,183,229,1)',
                  pointColor : 'rgba(35,183,229,1)',
                  pointStrokeColor : '#fff',
                  pointHighlightFill : '#fff',
                  pointHighlightStroke : 'rgba(35,183,229,1)',
                  data : [rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor()]
                }
              ]
            };


          vm.lineOptions = {
            scaleShowGridLines : true,
            scaleGridLineColor : 'rgba(0,0,0,.05)',
            scaleGridLineWidth : 1,
            bezierCurve : true,
            bezierCurveTension : 0.4,
            pointDot : true,
            pointDotRadius : 4,
            pointDotStrokeWidth : 1,
            pointHitDetectionRadius : 20,
            datasetStroke : true,
            datasetStrokeWidth : 2,
            datasetFill : true,
          };


          // Bar chart
          // ----------------------------------- 

          vm.barData = {
              labels : ['January','February','March','April','May','June','July'],
              datasets : [
                {
                  fillColor : Colors.byName('info'),
                  strokeColor : Colors.byName('info'),
                  highlightFill: Colors.byName('info'),
                  highlightStroke: Colors.byName('info'),
                  data : [rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor()]
                },
                {
                  fillColor : Colors.byName('primary'),
                  strokeColor : Colors.byName('primary'),
                  highlightFill : Colors.byName('primary'),
                  highlightStroke : Colors.byName('primary'),
                  data : [rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor(),rFactor()]
                }
              ]
          };
          
          vm.barOptions = {
            scaleBeginAtZero : true,
            scaleShowGridLines : true,
            scaleGridLineColor : 'rgba(0,0,0,.05)',
            scaleGridLineWidth : 1,
            barShowStroke : true,
            barStrokeWidth : 2,
            barValueSpacing : 5,
            barDatasetSpacing : 1,
          };


          //  Doughnut chart
          // ----------------------------------- 
          
          vm.doughnutData = [
                {
                  value: 300,
                  color: Colors.byName('purple'),
                  highlight: Colors.byName('purple'),
                  label: 'Purple'
                },
                {
                  value: 50,
                  color: Colors.byName('info'),
                  highlight: Colors.byName('info'),
                  label: 'Info'
                },
                {
                  value: 100,
                  color: Colors.byName('yellow'),
                  highlight: Colors.byName('yellow'),
                  label: 'Yellow'
                }
              ];

          vm.doughnutOptions = {
            segmentShowStroke : true,
            segmentStrokeColor : '#fff',
            segmentStrokeWidth : 2,
            percentageInnerCutout : 85,
            animationSteps : 100,
            animationEasing : 'easeOutBounce',
            animateRotate : true,
            animateScale : false
          };

          // Pie chart
          // ----------------------------------- 

          vm.pieData =[
                {
                  value: 300,
                  color: Colors.byName('purple'),
                  highlight: Colors.byName('purple'),
                  label: 'Purple'
                },
                {
                  value: 40,
                  color: Colors.byName('yellow'),
                  highlight: Colors.byName('yellow'),
                  label: 'Yellow'
                },
                {
                  value: 120,
                  color: Colors.byName('info'),
                  highlight: Colors.byName('info'),
                  label: 'Info'
                }
              ];

          vm.pieOptions = {
            segmentShowStroke : true,
            segmentStrokeColor : '#fff',
            segmentStrokeWidth : 2,
            percentageInnerCutout : 0, // Setting this to zero convert a doughnut into a Pie
            animationSteps : 100,
            animationEasing : 'easeOutBounce',
            animateRotate : true,
            animateScale : false
          };

          // Polar chart
          // ----------------------------------- 
          
          vm.polarData = [
                {
                  value: 300,
                  color: Colors.byName('pink'),
                  highlight: Colors.byName('pink'),
                  label: 'Red'
                },
                {
                  value: 50,
                  color: Colors.byName('purple'),
                  highlight: Colors.byName('purple'),
                  label: 'Green'
                },
                {
                  value: 100,
                  color: Colors.byName('pink'),
                  highlight: Colors.byName('pink'),
                  label: 'Yellow'
                },
                {
                  value: 140,
                  color: Colors.byName('purple'),
                  highlight: Colors.byName('purple'),
                  label: 'Grey'
                },
              ];

          vm.polarOptions = {
            scaleShowLabelBackdrop : true,
            scaleBackdropColor : 'rgba(255,255,255,0.75)',
            scaleBeginAtZero : true,
            scaleBackdropPaddingY : 1,
            scaleBackdropPaddingX : 1,
            scaleShowLine : true,
            segmentShowStroke : true,
            segmentStrokeColor : '#fff',
            segmentStrokeWidth : 2,
            animationSteps : 100,
            animationEasing : 'easeOutBounce',
            animateRotate : true,
            animateScale : false
          };


          // Radar chart
          // ----------------------------------- 

          vm.radarData = {
            labels: ['Eating', 'Drinking', 'Sleeping', 'Designing', 'Coding', 'Cycling', 'Running'],
            datasets: [
              {
                label: 'My First dataset',
                fillColor: 'rgba(114,102,186,0.2)',
                strokeColor: 'rgba(114,102,186,1)',
                pointColor: 'rgba(114,102,186,1)',
                pointStrokeColor: '#fff',
                pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(114,102,186,1)',
                data: [65,59,90,81,56,55,40]
              },
              {
                label: 'My Second dataset',
                fillColor: 'rgba(151,187,205,0.2)',
                strokeColor: 'rgba(151,187,205,1)',
                pointColor: 'rgba(151,187,205,1)',
                pointStrokeColor: '#fff',
                pointHighlightFill: '#fff',
                pointHighlightStroke: 'rgba(151,187,205,1)',
                data: [28,48,40,19,96,27,100]
              }
            ]
          };

          vm.radarOptions = {
            scaleShowLine : true,
            angleShowLineOut : true,
            scaleShowLabels : false,
            scaleBeginAtZero : true,
            angleLineColor : 'rgba(0,0,0,.1)',
            angleLineWidth : 1,
            /*jshint -W109*/
            pointLabelFontFamily : "'Arial'",
            pointLabelFontStyle : 'bold',
            pointLabelFontSize : 10,
            pointLabelFontColor : '#565656',
            pointDot : true,
            pointDotRadius : 3,
            pointDotStrokeWidth : 1,
            pointHitDetectionRadius : 20,
            datasetStroke : true,
            datasetStrokeWidth : 2,
            datasetFill : true
          };
        }
    }
})();

/**=========================================================
 * Module: chart.js
 * Wrapper directive for chartJS. 
 * Based on https://gist.github.com/AndreasHeiberg/9837868
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        /* Aliases for various chart types */
        .directive('linechart',     chartJS('Line')      )
        .directive('barchart',      chartJS('Bar')       )
        .directive('radarchart',    chartJS('Radar')     )
        .directive('polarchart',    chartJS('PolarArea') )
        .directive('piechart',      chartJS('Pie')       )
        .directive('doughnutchart', chartJS('Doughnut')  )
        .directive('donutchart',    chartJS('Doughnut')  )
        ;

    function chartJS(type) {
        return function() {
            return {
                restrict: 'A',
                scope: {
                    data: '=',
                    options: '=',
                    id: '@',
                    width: '=',
                    height: '=',
                    resize: '=',
                    chart: '@',
                    segments: '@',
                    responsive: '=',
                    tooltip: '=',
                    legend: '='
                },
                link: function ($scope, $elem) {
                    var ctx = $elem[0].getContext('2d');
                    var autosize = false;

                    $scope.size = function () {
                        if ($scope.width <= 0) {
                            $elem.width($elem.parent().width());
                            ctx.canvas.width = $elem.width();
                        } else {
                            ctx.canvas.width = $scope.width || ctx.canvas.width;
                            autosize = true;
                        }

                        if($scope.height <= 0){
                            $elem.height($elem.parent().height());
                            ctx.canvas.height = ctx.canvas.width / 2;
                        } else {
                            ctx.canvas.height = $scope.height || ctx.canvas.height;
                            autosize = true;
                        }
                    };

                    $scope.$watch('data', function (newVal) {
                        if(chartCreated)
                            chartCreated.destroy();

                        // if data not defined, exit
                        if (!newVal) {
                            return;
                        }
                        if ($scope.chart) { type = $scope.chart; }

                        if(autosize){
                            $scope.size();
                            chart = new Chart(ctx);
                        }

                        if($scope.responsive || $scope.resize)
                            $scope.options.responsive = true;

                        if($scope.responsive !== undefined)
                            $scope.options.responsive = $scope.responsive;

                        chartCreated = chart[type]($scope.data, $scope.options);
                        chartCreated.update();
                        if($scope.legend)
                            angular.element($elem[0]).parent().after( chartCreated.generateLegend() );
                    }, true);

                    $scope.$watch('tooltip', function (newVal) {
                        if (chartCreated)
                            chartCreated.draw();
                        if(newVal===undefined || !chartCreated.segments)
                            return;
                        if(!isFinite(newVal) || newVal >= chartCreated.segments.length || newVal < 0)
                            return;
                        var activeSegment = chartCreated.segments[newVal];
                        activeSegment.save();
                        activeSegment.fillColor = activeSegment.highlightColor;
                        chartCreated.showTooltip([activeSegment]);
                        activeSegment.restore();
                    }, true);

                    $scope.size();
                    var chart = new Chart(ctx);
                    var chartCreated;
                }
            };
        };
    }
})();





/**=========================================================
 * Module: classy-loader.js
 * Enable use of classyloader directly from data attributes
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .directive('classyloader', classyloader);

    classyloader.$inject = ['$timeout', 'Utils', '$window'];
    function classyloader ($timeout, Utils, $window) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          var $scroller       = $($window),
              inViewFlagClass = 'js-is-in-view'; // a classname to detect when a chart has been triggered after scroll

          // run after interpolation  
          $timeout(function(){
      
            var $element = $(element),
                options  = $element.data();
            
            // At lease we need a data-percentage attribute
            if(options) {
              if( options.triggerInView ) {

                $scroller.scroll(function() {
                  checkLoaderInVIew($element, options);
                });
                // if the element starts already in view
                checkLoaderInVIew($element, options);
              }
              else
                startLoader($element, options);
            }

          }, 0);

          function checkLoaderInVIew(element, options) {
            var offset = -20;
            if( ! element.hasClass(inViewFlagClass) &&
                Utils.isInView(element, {topoffset: offset}) ) {
              startLoader(element, options);
            }
          }
          function startLoader(element, options) {
            element.ClassyLoader(options).addClass(inViewFlagClass);
          }
        }
    }

})();

(function() {
    'use strict';

    angular
        .module('app.charts')
        .service('ChartData', ChartData);

    ChartData.$inject = ['$resource'];
    function ChartData($resource) {
        this.load = load;

        ////////////////
      
        var opts = {
            get: { method: 'GET', isArray: true }
          };
        function load(source) {
          return $resource(source, {}, opts).get();
        }
    }
})();

/**=========================================================
 * Module: flot-chart.js
 * Setup options and data for flot chart directive
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('FlotChartController', FlotChartController);

    FlotChartController.$inject = ['$scope', 'ChartData', '$timeout'];
    function FlotChartController($scope, ChartData, $timeout) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // BAR
          // -----------------------------------
          vm.barData = ChartData.load('server/chart/bar.json');
          vm.barOptions = {
              series: {
                  bars: {
                      align: 'center',
                      lineWidth: 0,
                      show: true,
                      barWidth: 0.6,
                      fill: 0.9
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickColor: '#eee'
              },
              shadowSize: 0
          };

          // BAR STACKED
          // -----------------------------------
          vm.barStackeData = ChartData.load('server/chart/barstacked.json');
          vm.barStackedOptions = {
              series: {
                  stack: true,
                  bars: {
                      align: 'center',
                      lineWidth: 0,
                      show: true,
                      barWidth: 0.6,
                      fill: 0.9
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 200, // optional: use it for a clear represetation
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickColor: '#eee'
              },
              shadowSize: 0
          };

          // SPLINE
          // -----------------------------------
          vm.splineData = ChartData.load('server/chart/spline.json');
          vm.splineOptions = {
              series: {
                  lines: {
                      show: false
                  },
                  points: {
                      show: true,
                      radius: 4
                  },
                  splines: {
                      show: true,
                      tension: 0.4,
                      lineWidth: 1,
                      fill: 0.5
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 150, // optional: use it for a clear represetation
                  tickColor: '#eee',
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickFormatter: function (v) {
                      return v/* + ' visitors'*/;
                  }
              },
              shadowSize: 0
          };

          // AREA
          // -----------------------------------
          vm.areaData = ChartData.load('server/chart/area.json');
          vm.areaOptions = {
              series: {
                  lines: {
                      show: true,
                      fill: 0.8
                  },
                  points: {
                      show: true,
                      radius: 4
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  tickColor: '#eee',
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickFormatter: function (v) {
                      return v + ' visitors';
                  }
              },
              shadowSize: 0
          };

          // LINE
          // -----------------------------------
          vm.lineData = ChartData.load('server/chart/line.json');
          vm.lineOptions = {
              series: {
                  lines: {
                      show: true,
                      fill: 0.01
                  },
                  points: {
                      show: true,
                      radius: 4
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#eee',
                  mode: 'categories'
              },
              yaxis: {
                  position: ($scope.app.layout.isRTL ? 'right' : 'left'),
                  tickColor: '#eee'
              },
              shadowSize: 0
          };

          // PIE
          // -----------------------------------
          vm.pieData = [{
              "label": "jQuery",
              "color": "#4acab4",
              "data": 30
            }, {
              "label": "CSS",
              "color": "#ffea88",
              "data": 40
            }, {
              "label": "LESS",
              "color": "#ff8153",
              "data": 90
            }, {
              "label": "SASS",
              "color": "#878bb6",
              "data": 75
            }, {
              "label": "Jade",
              "color": "#b2d767",
              "data": 120
            }];
          // Direct data temporarily added until fix: https://github.com/flot/flot/pull/1462
          // ChartData.load('server/chart/pie.json');

          vm.pieOptions = {
              series: {
                  pie: {
                      show: true,
                      innerRadius: 0,
                      label: {
                          show: true,
                          radius: 0.8,
                          formatter: function (label, series) {
                              return '<div class="flot-pie-label">' +
                              //label + ' : ' +
                              Math.round(series.percent) +
                              '%</div>';
                          },
                          background: {
                              opacity: 0.8,
                              color: '#222'
                          }
                      }
                  }
              }
          };

          // DONUT
          // -----------------------------------
          vm.donutData = [ { "color" : "#39C558",
                "data" : 60,
                "label" : "Coffee"
              },
              { "color" : "#00b4ff",
                "data" : 90,
                "label" : "CSS"
              },
              { "color" : "#FFBE41",
                "data" : 50,
                "label" : "LESS"
              },
              { "color" : "#ff3e43",
                "data" : 80,
                "label" : "Jade"
              },
              { "color" : "#937fc7",
                "data" : 116,
                "label" : "AngularJS"
              }
            ];
          // Direct data temporarily added until fix: https://github.com/flot/flot/pull/1462
          // ChartData.load('server/chart/donut.json');

          vm.donutOptions = {
              series: {
                  pie: {
                      show: true,
                      innerRadius: 0.5 // This makes the donut shape
                  }
              }
          };

          // REALTIME
          // -----------------------------------
          vm.realTimeOptions = {
              series: {
                lines: { show: true, fill: true, fillColor:  { colors: ['#a0e0f3', '#285fdb'] } },
                shadowSize: 0 // Drawing is faster without shadows
              },
              grid: {
                  show:false,
                  borderWidth: 0,
                  minBorderMargin: 20,
                  labelMargin: 10
              },
              xaxis: {
                tickFormatter: function() {
                    return '';
                }
              },
              yaxis: {
                  min: 0,
                  max: 110
              },
              legend: {
                  show: true
              },
              colors: ['#285fdb']
          };

          // Generate random data for realtime demo
          var data = [], totalPoints = 300;

          update();

          function getRandomData() {
            if (data.length > 0)
              data = data.slice(1);
            // Do a random walk
            while (data.length < totalPoints) {
              var prev = data.length > 0 ? data[data.length - 1] : 50,
                y = prev + Math.random() * 10 - 5;
              if (y < 0) {
                y = 0;
              } else if (y > 100) {
                y = 100;
              }
              data.push(y);
            }
            // Zip the generated y values with the x values
            var res = [];
            for (var i = 0; i < data.length; ++i) {
              res.push([i, data[i]]);
            }
            return [res];
          }
          function update() {
            vm.realTimeData = getRandomData();
            $timeout(update, 30);
          }
          // end random data generation


          // PANEL REFRESH EVENTS
          // -----------------------------------

          $scope.$on('panel-refresh', function(event, id) {

            console.log('Simulating chart refresh during 3s on #'+id);

            // Instead of timeout you can request a chart data
            $timeout(function(){

              // directive listen for to remove the spinner
              // after we end up to perform own operations
              $scope.$broadcast('removeSpinner', id);

              console.log('Refreshed #' + id);

            }, 3000);

          });


          // PANEL DISMISS EVENTS
          // -----------------------------------

          // Before remove panel
          $scope.$on('panel-remove', function(event, id, deferred){

            console.log('Panel #' + id + ' removing');

            // Here is obligatory to call the resolve() if we pretend to remove the panel finally
            // Not calling resolve() will NOT remove the panel
            // It's up to your app to decide if panel should be removed or not
            deferred.resolve();

          });

          // Panel removed ( only if above was resolved() )
          $scope.$on('panel-removed', function(event, id){

            console.log('Panel #' + id + ' removed');

          });

        }
    }
})();

/**=========================================================
 * Module: flot.js
 * Initializes the Flot chart plugin and handles data refresh
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .directive('flot', flot);

    flot.$inject = ['$http', '$timeout'];
    function flot ($http, $timeout) {

        var directive = {
          restrict: 'EA',
          template: '<div></div>',
          scope: {
            dataset: '=?',
            options: '=',
            series: '=',
            callback: '=',
            src: '='
          },
          link: link
        };
        return directive;

        function link(scope, element, attrs) {
          var height, plot, plotArea, width;
          var heightDefault = 220;

          plot = null;

          width = attrs.width || '100%';
          height = attrs.height || heightDefault;

          plotArea = $(element.children()[0]);
          plotArea.css({
            width: width,
            height: height
          });

          function init() {
            var plotObj;
            if(!scope.dataset || !scope.options) return;
            plotObj = $.plot(plotArea, scope.dataset, scope.options);
            scope.$emit('plotReady', plotObj);
            if (scope.callback) {
              scope.callback(plotObj, scope);
            }

            return plotObj;
          }

          function onDatasetChanged(dataset) {
            if (plot) {
              plot.setData(dataset);
              plot.setupGrid();
              return plot.draw();
            } else {
              plot = init();
              onSerieToggled(scope.series);
              return plot;
            }
          }
          scope.$watchCollection('dataset', onDatasetChanged, true);

          function onSerieToggled (series) {
            if( !plot || !series ) return;
            var someData = plot.getData();
            for(var sName in series) {
              angular.forEach(series[sName], toggleFor(sName));
            }
            
            plot.setData(someData);
            plot.draw();
            
            function toggleFor(sName) {
              return function (s, i){
                if(someData[i] && someData[i][sName])
                  someData[i][sName].show = s;
              };
            }
          }
          scope.$watch('series', onSerieToggled, true);
          
          function onSrcChanged(src) {

            if( src ) {

              $http.get(src)
                .success(function (data) {

                  $timeout(function(){
                    scope.dataset = data;
                  });

              }).error(function(){
                $.error('Flot chart: Bad request.');
              });
              
            }
          }
          scope.$watch('src', onSrcChanged);

        }
    }


})();

/**=========================================================
 * Module: morris.js
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('ChartMorrisController', ChartMorrisController);

    ChartMorrisController.$inject = ['$timeout', 'Colors'];
    function ChartMorrisController($timeout, Colors) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
         vm.chartdata = [
              { y: '2006', a: 100, b: 90 },
              { y: '2007', a: 75,  b: 65 },
              { y: '2008', a: 50,  b: 40 },
              { y: '2009', a: 75,  b: 65 },
              { y: '2010', a: 50,  b: 40 },
              { y: '2011', a: 75,  b: 65 },
              { y: '2012', a: 100, b: 90 }
          ];

          /* test data update
          $timeout(function(){
            vm.chartdata[0].a = 50;
            vm.chartdata[0].b = 50;
          }, 3000); */

          vm.donutdata = [
            {label: 'Download Sales', value: 12},
            {label: 'In-Store Sales',value: 30},
            {label: 'Mail-Order Sales', value: 20}
          ];

          vm.donutOptions = {
            Colors: [ Colors.byName('danger'), Colors.byName('yellow'), Colors.byName('warning') ],
            resize: true
          };

          vm.barOptions = {
            xkey: 'y',
            ykeys: ['a', 'b'],
            labels: ['Series A', 'Series B'],
            xLabelMargin: 2,
            barColors: [ Colors.byName('info'), Colors.byName('danger') ],
            resize: true
          };

          vm.lineOptions = {
            xkey: 'y',
            ykeys: ['a', 'b'],
            labels: ['Serie A', 'Serie B'],
            lineColors: ['#31C0BE', '#7a92a3'],
            resize: true
          };

          vm.areaOptions = {
            xkey: 'y',
            ykeys: ['a', 'b'],
            labels: ['Serie A', 'Serie B'],
            lineColors: [ Colors.byName('purple'), Colors.byName('info') ],
            resize: true
          };

        }
    }
})();

/**=========================================================
 * Module: morris.js
 * AngularJS Directives for Morris Charts
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .directive('morrisBar',   morrisChart('Bar')   )
        .directive('morrisDonut', morrisChart('Donut') )
        .directive('morrisLine',  morrisChart('Line')  )
        .directive('morrisArea',  morrisChart('Area')  );

    function morrisChart(type) {
      return function () {
        return {
          restrict: 'EA',
          scope: {
            morrisData: '=',
            morrisOptions: '='
          },
          link: function($scope, element) {
            // start ready to watch for changes in data
            $scope.$watch('morrisData', function(newVal) {
              if (newVal) {
                $scope.morrisInstance.setData(newVal);
                $scope.morrisInstance.redraw();
              }
            }, true);
            // the element that contains the chart
            $scope.morrisOptions.element = element;
            // If data defined copy to options
            if($scope.morrisData)
              $scope.morrisOptions.data = $scope.morrisData;
            // Init chart
            $scope.morrisInstance = new Morris[type]($scope.morrisOptions);

          }
        };
      };
    }

})();

/**=========================================================
 * Module: PieChartsController.js
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('PieChartsController', PieChartsController);

    /*jshint -W069*/
    PieChartsController.$inject = ['Colors'];

    function PieChartsController(Colors) {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          // KNOB Charts

          vm.knobLoaderData1 = 80;
          vm.knobLoaderOptions1 = {
              width: '50%', // responsive
              displayInput: true,
              fgColor: Colors.byName('info')
            };

          vm.knobLoaderData2 = 45;
          vm.knobLoaderOptions2 = {
              width: '50%', // responsive
              displayInput: true,
              fgColor: Colors.byName('purple'),
              readOnly : true
            };

          vm.knobLoaderData3 = 30;
          vm.knobLoaderOptions3 = {
              width: '50%', // responsive
              displayInput: true,
              fgColor: Colors.byName('pink'),
              displayPrevious : true,
              thickness : 0.1,
              lineCap : 'round'
            };

          vm.knobLoaderData4 = 20;
          vm.knobLoaderOptions4 = {
              width: '50%', // responsive
              displayInput: true,
              fgColor: Colors.byName('info'),
              bgColor: Colors.byName('gray'),
              angleOffset: -125,
              angleArc: 250
            };

          // Easy Pie Charts

          vm.piePercent1 = 85;
          vm.piePercent2 = 45;
          vm.piePercent3 = 25;
          vm.piePercent4 = 60;

          vm.pieOptions1 = {
              animate:{
                  duration: 800,
                  enabled: true
              },
              barColor: Colors.byName('success'),
              trackColor: false,
              scaleColor: false,
              lineWidth: 10,
              lineCap: 'circle'
          };

          vm.pieOptions2= {
              animate:{
                  duration: 800,
                  enabled: true
              },
              barColor: Colors.byName('warning'),
              trackColor: false,
              scaleColor: false,
              lineWidth: 4,
              lineCap: 'circle'
          };

          vm.pieOptions3 = {
              animate:{
                  duration: 800,
                  enabled: true
              },
              barColor: Colors.byName('danger'),
              trackColor: false,
              scaleColor: Colors.byName('gray'),
              lineWidth: 15,
              lineCap: 'circle'
          };

          vm.pieOptions4 = {
              animate:{
                  duration: 800,
                  enabled: true
              },
              barColor: Colors.byName('danger'),
              trackColor: Colors.byName('yellow'),
              scaleColor: Colors.byName('gray-dark'),
              lineWidth: 15,
              lineCap: 'circle'
          };

          vm.randomize = function(type) {
            if ( type === 'easy') {
              vm.piePercent1 = random();
              vm.piePercent2 = random();
              vm.piePercent3 = random();
              vm.piePercent4 = random();
            }
            if ( type === 'knob') {
              vm.knobLoaderData1 = random();
              vm.knobLoaderData2 = random();
              vm.knobLoaderData3 = random();
              vm.knobLoaderData4 = random();
            }
          }

          function random() { return Math.floor((Math.random() * 100) + 1); }

        }
    }
})();

/**=========================================================
 * Module: rickshaw.js
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.charts')
        .controller('ChartRickshawController', ChartRickshawController);

    function ChartRickshawController() {
        var vm = this;

        activate();

        ////////////////

        function activate() {

          vm.renderers = [{
                  id: 'area',
                  name: 'Area'
              }, {
                  id: 'line',
                  name: 'Line'
              }, {
                  id: 'bar',
                  name: 'Bar'
              }, {
                  id: 'scatterplot',
                  name: 'Scatterplot'
              }];

          vm.palettes = [
              'spectrum14',
              'spectrum2000',
              'spectrum2001',
              'colorwheel',
              'cool',
              'classic9',
              'munin'
          ];

          vm.rendererChanged = function(id) {
              vm['options' + id] = {
                  renderer: vm['renderer' + id].id
              };
          };

          vm.paletteChanged = function(id) {
              vm['features' + id] = {
                  palette: vm['palette' + id]
              };
          };

          vm.changeSeriesData = function(id) {
              var seriesList = [];
              for (var i = 0; i < 3; i++) {
                  var series = {
                      name: 'Series ' + (i + 1),
                      data: []
                  };
                  for (var j = 0; j < 10; j++) {
                      series.data.push({x: j, y: Math.random() * 20});
                  }
                  seriesList.push(series);
                  vm['series' + id][i] = series;
              }
              //vm['series' + id] = seriesList;
          };

          vm.series0 = [];

          vm.options0 = {
            renderer: 'area'
          };

          vm.renderer0 = vm.renderers[0];
          vm.palette0 = vm.palettes[0];

          vm.rendererChanged(0);
          vm.paletteChanged(0);
          vm.changeSeriesData(0);  

          // Graph 2

          var seriesData = [ [], [], [] ];
          var random = new Rickshaw.Fixtures.RandomData(150);

          for (var i = 0; i < 150; i++) {
            random.addData(seriesData);
          }

          vm.series2 = [
            {
              color: '#c05020',
              data: seriesData[0],
              name: 'New York'
            }, {
              color: '#30c020',
              data: seriesData[1],
              name: 'London'
            }, {
              color: '#6060c0',
              data: seriesData[2],
              name: 'Tokyo'
            }
          ];

          vm.options2 = {
            renderer: 'area'
          };

        }
    }
})();

/**=========================================================
 * Module: sparkline.js
 * SparkLines Mini Charts
 =========================================================*/
 
(function() {
    'use strict';

    angular
        .module('app.charts')
        .directive('sparkline', sparkline);

    function sparkline () {
        var directive = {
            restrict: 'EA',
            scope: {
              'sparkline': '='
            },
            controller: Controller
        };
        return directive;

    }
    Controller.$inject = ['$scope', '$element', '$timeout', '$window'];
    function Controller($scope, $element, $timeout, $window) {
      var runSL = function(){
        initSparLine();
      };

      $timeout(runSL);
  
      function initSparLine() {
        var options = $scope.sparkline,
            data = $element.data();
        
        if(!options) // if no scope options, try with data attributes
          options = data;
        else
          if(data) // data attributes overrides scope options
            options = angular.extend({}, options, data);

        options.type = options.type || 'bar'; // default chart is bar
        options.disableHiddenCheck = true;

        $element.sparkline('html', options);

        if(options.resize) {
          $($window).resize(function(){
            $element.sparkline('html', options);
          });
        }
      }

    }
    

})();

(function() {
    'use strict';

    angular
        .module('app.colors')
        .constant('APP_COLORS', {
          'primary':                '#285fdb',
          'success':                '#27c24c',
          'info':                   '#285fdb',
          'warning':                '#ff902b',
          'danger':                 '#f05050',
          'inverse':                '#131e26',
          'green':                  '#37bc9b',
          'pink':                   '#f532e5',
          'purple':                 '#7266ba',
          'dark':                   '#3a3f51',
          'yellow':                 '#fad732',
          'gray-darker':            '#232735',
          'gray-dark':              '#555555',
          'gray':                   '#e6e6e6',
          'gray-light':             '#ededed',
          'gray-lighter':           '#edf1f2'
        });
})();

/**=========================================================
 * Module: colors.js
 * Services to retrieve global colors
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.colors')
        .service('Colors', Colors);

    Colors.$inject = ['APP_COLORS'];
    function Colors(APP_COLORS) {
        this.byName = byName;

        ////////////////

        function byName(name) {
          return (APP_COLORS[name] || '#fff');
        }
    }

})();

// (function() {
//     'use strict';

//     angular
//         .module('app.dashboard')
//         .controller('DashboardController', DashboardController);

//     DashboardController.$inject = ['$scope', 'ChartData', '$timeout'];
//     function DashboardController($scope, ChartData, $timeout) {
//         var vm = this;

//         activate();

//         ////////////////

//         function activate() {

//           // SPLINE
//           // ----------------------------------- 
//           vm.splineData = ChartData.load('server/chart/spline.json');
//           vm.splineOptions = {
//               series: {
//                   lines: {
//                       show: false
//                   },
//                   points: {
//                       show: true,
//                       radius: 4
//                   },
//                   splines: {
//                       show: true,
//                       tension: 0.4,
//                       lineWidth: 1,
//                       fill: 0.5
//                   }
//               },
//               grid: {
//                   borderColor: '#eee',
//                   borderWidth: 1,
//                   hoverable: true,
//                   backgroundColor: '#fcfcfc'
//               },
//               tooltip: true,
//               tooltipOpts: {
//                   content: function (label, x, y) { return x + ' : ' + y; }
//               },
//               xaxis: {
//                   tickColor: '#fcfcfc',
//                   mode: 'categories'
//               },
//               yaxis: {
//                   min: 0,
//                   max: 150, // optional: use it for a clear represetation
//                   tickColor: '#eee',
//                   position: ($scope.app.layout.isRTL ? 'right' : 'left'),
//                   tickFormatter: function (v) {
//                       return v/* + ' visitors'*/;
//                   }
//               },
//               shadowSize: 0
//           };


//           // PANEL REFRESH EVENTS
//           // ----------------------------------- 

//           $scope.$on('panel-refresh', function(event, id) {
            
//             console.log('Simulating chart refresh during 3s on #'+id);

//             // Instead of timeout you can request a chart data
//             $timeout(function(){
              
//               // directive listen for to remove the spinner 
//               // after we end up to perform own operations
//               $scope.$broadcast('removeSpinner', id);
              
//               console.log('Refreshed #' + id);

//             }, 3000);

//           });


//           // PANEL DISMISS EVENTS
//           // ----------------------------------- 

//           // Before remove panel
//           $scope.$on('panel-remove', function(event, id, deferred){
            
//             console.log('Panel #' + id + ' removing');
            
//             // Here is obligatory to call the resolve() if we pretend to remove the panel finally
//             // Not calling resolve() will NOT remove the panel
//             // It's up to your app to decide if panel should be removed or not
//             deferred.resolve();
          
//           });

//           // Panel removed ( only if above was resolved() )
//           $scope.$on('panel-removed', function(event, id){

//             console.log('Panel #' + id + ' removed');

//           });

//         }
//     }
// })();
(function() {
    'use strict';

    angular
        .module('app.dashboard')
        .controller('DashboardV2Controller', DashboardV2Controller);

    DashboardV2Controller.$inject = ['$rootScope', '$scope', '$state'];
    function DashboardV2Controller($rootScope, $scope, $state) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          
          // Change layout mode
          if( $state.includes('app-h') ) {
            // Setup layout horizontal for demo
            $rootScope.app.layout.horizontal = true;
            $scope.$on('$destroy', function(){
                $rootScope.app.layout.horizontal = false;
            });            
          }
          else {
            $rootScope.app.layout.isCollapsed = true;
          }

          // BAR STACKED
          // ----------------------------------- 
          vm.barStackedOptions = {
              series: {
                  stack: true,
                  bars: {
                      align: 'center',
                      lineWidth: 0,
                      show: true,
                      barWidth: 0.6,
                      fill: 0.9
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 200, // optional: use it for a clear represetation
                  position: ($rootScope.app.layout.isRTL ? 'right' : 'left'),
                  tickColor: '#eee'
              },
              shadowSize: 0
          };

          // SPLINE
          // ----------------------------------- 

          vm.splineOptions = {
              series: {
                  lines: {
                      show: false
                  },
                  points: {
                      show: true,
                      radius: 4
                  },
                  splines: {
                      show: true,
                      tension: 0.4,
                      lineWidth: 1,
                      fill: 0.5
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 150, // optional: use it for a clear represetation
                  tickColor: '#eee',
                  position: ($rootScope.app.layout.isRTL ? 'right' : 'left'),
                  tickFormatter: function (v) {
                      return v/* + ' visitors'*/;
                  }
              },
              shadowSize: 0
          };
        }
    }
})();
(function() {
    'use strict';

    angular.module('app.dashboard').controller('DashboardV3Controller', DashboardV3Controller);

    DashboardV3Controller.$inject = ['$rootScope', '$localStorage'];

    function DashboardV3Controller($rootScope, $localStorage) {

        var vm = this;

        activate();

        ////////////////

        function activate() {
          // SPLINE
          // -----------------------------------
          delete $localStorage.isWelcome ;
          // angular.element(document.getElementsByClassName('section-wrapper')).css('margin-left', '70px');
          $rootScope.hiddenClass = '';
          vm.splineOptions = {
              series: {
                  lines: {
                      show: false
                  },
                  points: {
                      show: true,
                      radius: 4
                  },
                  splines: {
                      show: true,
                      tension: 0.4,
                      lineWidth: 1,
                      fill: 0.5
                  }
              },
              grid: {
                  borderColor: '#eee',
                  borderWidth: 1,
                  hoverable: true,
                  backgroundColor: '#fcfcfc'
              },
              tooltip: true,
              tooltipOpts: {
                  content: function (label, x, y) { return x + ' : ' + y; }
              },
              xaxis: {
                  tickColor: '#fcfcfc',
                  mode: 'categories'
              },
              yaxis: {
                  min: 0,
                  max: 150, // optional: use it for a clear represetation
                  tickColor: '#eee',
                  position: ($rootScope.app.layout.isRTL ? 'right' : 'left'),
                  tickFormatter: function (v) {
                      return v/* + ' visitors'*/;
                  }
              },
              shadowSize: 0
          };


          vm.seriesData = {
            'CA': 11100,   // Canada
            'DE': 2510,    // Germany
            'FR': 3710,    // France
            'AU': 5710,    // Australia
            'GB': 8310,    // Great Britain
            'RU': 9310,    // Russia
            'BR': 6610,    // Brazil
            'IN': 7810,    // India
            'CN': 4310,    // China
            'US': 839,     // USA
            'SA': 410      // Saudi Arabia
          };

          vm.markersData = [
            { latLng:[41.90, 12.45],  name:'Vatican City'          },
            { latLng:[43.73, 7.41],   name:'Monaco'                },
            { latLng:[-0.52, 166.93], name:'Nauru'                 },
            { latLng:[-8.51, 179.21], name:'Tuvalu'                },
            { latLng:[7.11,171.06],   name:'Marshall Islands'      },
            { latLng:[17.3,-62.73],   name:'Saint Kitts and Nevis' },
            { latLng:[3.2,73.22],     name:'Maldives'              },
            { latLng:[35.88,14.5],    name:'Malta'                 },
            { latLng:[41.0,-71.06],   name:'New England'           },
            { latLng:[12.05,-61.75],  name:'Grenada'               },
            { latLng:[13.16,-59.55],  name:'Barbados'              },
            { latLng:[17.11,-61.85],  name:'Antigua and Barbuda'   },
            { latLng:[-4.61,55.45],   name:'Seychelles'            },
            { latLng:[7.35,134.46],   name:'Palau'                 },
            { latLng:[42.5,1.51],     name:'Andorra'               }
          ];
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.lazyload')
        .config(lazyloadConfig);

    lazyloadConfig.$inject = ['$ocLazyLoadProvider', 'APP_REQUIRES'];
    function lazyloadConfig($ocLazyLoadProvider, APP_REQUIRES){

      // Lazy Load modules configuration
      $ocLazyLoadProvider.config({
        debug: false,
        events: true,
        modules: APP_REQUIRES.modules
      });

    }
})();
(function() {
    'use strict';

    angular
        .module('app.lazyload')
        .constant('APP_REQUIRES', {
          // jQuery based and standalone scripts
          scripts: {
            'whirl':              ['vendor/whirl/dist/whirl.css'],
            'classyloader':       ['vendor/jquery-classyloader/js/jquery.classyloader.min.js'],
            'animo':              ['vendor/animo.js/animo.js'],
            'fastclick':          ['vendor/fastclick/lib/fastclick.js'],
            'modernizr':          ['vendor/modernizr/modernizr.custom.js'],
            'animate':            ['vendor/animate.css/animate.min.css'],
            'skycons':            ['vendor/skycons/skycons.js'],
            'icons':              ['vendor/fontawesome/css/font-awesome.min.css',
                                   'vendor/simple-line-icons/css/simple-line-icons.css'],
            'weather-icons':      ['vendor/weather-icons/css/weather-icons.min.css',
                                   'vendor/weather-icons/css/weather-icons-wind.min.css'],
            'sparklines':         ['vendor/sparkline/index.js'],
            'wysiwyg':            ['vendor/bootstrap-wysiwyg/bootstrap-wysiwyg.js',
                                   'vendor/bootstrap-wysiwyg/external/jquery.hotkeys.js'],
            'slimscroll':         ['vendor/slimScroll/jquery.slimscroll.min.js'],
            'screenfull':         ['vendor/screenfull/dist/screenfull.js'],
            'vector-map':         ['vendor/ika.jvectormap/jquery-jvectormap-1.2.2.min.js',
                                   'vendor/ika.jvectormap/jquery-jvectormap-1.2.2.css'],
            'vector-map-maps':    ['vendor/ika.jvectormap/jquery-jvectormap-world-mill-en.js',
                                   'vendor/ika.jvectormap/jquery-jvectormap-us-mill-en.js'],
            'loadGoogleMapsJS':   ['vendor/load-google-maps/load-google-maps.js'],
            'flot-chart':         ['vendor/Flot/jquery.flot.js'],
            'flot-chart-plugins': ['vendor/flot.tooltip/js/jquery.flot.tooltip.min.js',
                                   'vendor/Flot/jquery.flot.resize.js',
                                   'vendor/Flot/jquery.flot.pie.js',
                                   'vendor/Flot/jquery.flot.time.js',
                                   'vendor/Flot/jquery.flot.categories.js',
                                   'vendor/flot-spline/js/jquery.flot.spline.min.js'],
                                  // jquery core and widgets
            'jquery-ui':          ['vendor/jquery-ui/ui/core.js',
                                   'vendor/jquery-ui/ui/widget.js'],
                                   // loads only jquery required modules and touch support
            'jquery-ui-widgets':  ['vendor/jquery-ui/ui/core.js',
                                   'vendor/jquery-ui/ui/widget.js',
                                   'vendor/jquery-ui/ui/mouse.js',
                                   'vendor/jquery-ui/ui/draggable.js',
                                   'vendor/jquery-ui/ui/droppable.js',
                                   'vendor/jquery-ui/ui/sortable.js',
                                   'vendor/jqueryui-touch-punch/jquery.ui.touch-punch.min.js'],
            'moment' :            ['vendor/moment/min/moment-with-locales.min.js'],
            'inputmask':          ['vendor/jquery.inputmask/dist/jquery.inputmask.bundle.js'],
            'flatdoc':            ['vendor/flatdoc/flatdoc.js'],
            'codemirror':         ['vendor/codemirror/lib/codemirror.js',
                                   'vendor/codemirror/lib/codemirror.css'],
            // modes for common web files
            'codemirror-modes-web': ['vendor/codemirror/mode/javascript/javascript.js',
                                     'vendor/codemirror/mode/xml/xml.js',
                                     'vendor/codemirror/mode/htmlmixed/htmlmixed.js',
                                     'vendor/codemirror/mode/css/css.js'],
            'taginput' :          ['vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.css',
                                   'vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js'],
            'filestyle':          ['vendor/bootstrap-filestyle/src/bootstrap-filestyle.js'],
            'parsley':            ['vendor/parsleyjs/dist/parsley.min.js'],
            'fullcalendar':       ['vendor/fullcalendar/dist/fullcalendar.min.js',
                                   'vendor/fullcalendar/dist/fullcalendar.css'],
            'gcal':               ['vendor/fullcalendar/dist/gcal.js'],
            'chartjs':            ['vendor/Chart.js/Chart.js'],
            'morris':             ['vendor/raphael/raphael.js',
                                   'vendor/morris.js/morris.js',
                                   'vendor/morris.js/morris.css'],
            'loaders.css':          ['vendor/loaders.css/loaders.css'],
            'spinkit':              ['vendor/spinkit/css/spinkit.css']
          },
          // Angular based script (use the right module name)
          modules: [
            {name: 'toaster',                   files: ['vendor/angularjs-toaster/toaster.js',
                                                       'vendor/angularjs-toaster/toaster.css']},
            {name: 'localytics.directives',     files: ['vendor/chosen_v1.2.0/chosen.jquery.min.js',
                                                       'vendor/chosen_v1.2.0/chosen.min.css',
                                                       'vendor/angular-chosen-localytics/chosen.js']},
            {name: 'ngDialog',                  files: ['vendor/ngDialog/js/ngDialog.min.js',
                                                       'vendor/ngDialog/css/ngDialog.min.css',
                                                       'vendor/ngDialog/css/ngDialog-theme-default.min.css'] },
            {name: 'ngWig',                     files: ['vendor/ngWig/dist/ng-wig.min.js'] },
            {name: 'ngTable',                   files: ['vendor/ng-table/dist/ng-table.min.js',
                                                        'vendor/ng-table/dist/ng-table.min.css']},
            {name: 'ngTableExport',             files: ['vendor/ng-table-export/ng-table-export.js']},
            {name: 'angularBootstrapNavTree',   files: ['vendor/angular-bootstrap-nav-tree/dist/abn_tree_directive.js',
                                                        'vendor/angular-bootstrap-nav-tree/dist/abn_tree.css']},
            {name: 'htmlSortable',              files: ['vendor/html.sortable/dist/html.sortable.js',
                                                        'vendor/html.sortable/dist/html.sortable.angular.js']},
            {name: 'xeditable',                 files: ['vendor/angular-xeditable/dist/js/xeditable.js',
                                                        'vendor/angular-xeditable/dist/css/xeditable.css']},
            {name: 'angularFileUpload',         files: ['vendor/angular-file-upload/dist/angular-file-upload.js']},
            {name: 'ngImgCrop',                 files: ['vendor/ng-img-crop/compile/unminified/ng-img-crop.js',
                                                        'vendor/ng-img-crop/compile/unminified/ng-img-crop.css']},
            {name: 'ui.select',                 files: ['vendor/angular-ui-select/dist/select.js',
                                                        'vendor/angular-ui-select/dist/select.css']},
            {name: 'ui.codemirror',             files: ['vendor/angular-ui-codemirror/ui-codemirror.js']},
            {name: 'angular-carousel',          files: ['vendor/angular-carousel/dist/angular-carousel.css',
                                                        'vendor/angular-carousel/dist/angular-carousel.js']},
            {name: 'infinite-scroll',           files: ['vendor/ngInfiniteScroll/build/ng-infinite-scroll.js']},
            {name: 'ui.bootstrap-slider',       files: ['vendor/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js',
                                                        'vendor/seiyria-bootstrap-slider/dist/css/bootstrap-slider.min.css',
                                                        'vendor/angular-bootstrap-slider/slider.js']},
            {name: 'ui.grid',                   files: ['vendor/angular-ui-grid/ui-grid.min.css',
                                                        'vendor/angular-ui-grid/ui-grid.min.js']},
            {name: 'textAngular',               files: ['vendor/textAngular/dist/textAngular.css',
                                                        'vendor/textAngular/dist/textAngular-rangy.min.js',
                                                        'vendor/textAngular/dist/textAngular-sanitize.js',
                                                        'vendor/textAngular/src/globals.js',
                                                        'vendor/textAngular/src/factories.js',
                                                        'vendor/textAngular/src/DOM.js',
                                                        'vendor/textAngular/src/validators.js',
                                                        'vendor/textAngular/src/taBind.js',
                                                        'vendor/textAngular/src/main.js',
                                                        'vendor/textAngular/dist/textAngularSetup.js'
                                                        ], serie: true},
            {name: 'angular-rickshaw',          files: ['vendor/d3/d3.min.js',
                                                        'vendor/rickshaw/rickshaw.js',
                                                        'vendor/rickshaw/rickshaw.min.css',
                                                        'vendor/angular-rickshaw/rickshaw.js'], serie: true},
            {name: 'angular-chartist',          files: ['vendor/chartist/dist/chartist.min.css',
                                                        'vendor/chartist/dist/chartist.js',
                                                        'vendor/angular-chartist.js/dist/angular-chartist.js'], serie: true},
            {name: 'ui.map',                    files: ['vendor/angular-ui-map/ui-map.js']},
            {name: 'datatables',                files: ['vendor/datatables/media/css/jquery.dataTables.css',
                                                        'vendor/datatables/media/js/jquery.dataTables.js',
                                                        'vendor/angular-datatables/dist/angular-datatables.js'], serie: true},
            {name: 'angular-jqcloud',           files: ['vendor/jqcloud2/dist/jqcloud.css',
                                                        'vendor/jqcloud2/dist/jqcloud.js',
                                                        'vendor/angular-jqcloud/angular-jqcloud.js']},
            {name: 'angularGrid',               files: ['vendor/ag-grid/dist/ag-grid.css',
                                                        'vendor/ag-grid/dist/ag-grid.js',
                                                        'vendor/ag-grid/dist/theme-dark.css',
                                                        'vendor/ag-grid/dist/theme-fresh.css']},
            {name: 'ng-nestable',               files: ['vendor/ng-nestable/src/angular-nestable.js',
                                                        'vendor/nestable/jquery.nestable.js']},
            {name: 'akoenig.deckgrid',          files: ['vendor/angular-deckgrid/angular-deckgrid.js']},
            {name: 'oitozero.ngSweetAlert',     files: ['vendor/sweetalert/dist/sweetalert.css',
                                                        'vendor/sweetalert/dist/sweetalert.min.js',
                                                        'vendor/angular-sweetalert/SweetAlert.js']},
            {name: 'bm.bsTour',                 files: ['vendor/bootstrap-tour/build/css/bootstrap-tour.css',
                                                        'vendor/bootstrap-tour/build/js/bootstrap-tour-standalone.js',
                                                        'vendor/angular-bootstrap-tour/dist/angular-bootstrap-tour.js'], serie: true},
            {name: 'ui.knob',                   files: ['vendor/angular-knob/src/angular-knob.js',
                                                        'vendor/jquery-knob/dist/jquery.knob.min.js']},
            {name: 'easypiechart',              files: ['vendor/jquery.easy-pie-chart/dist/angular.easypiechart.min.js']},
            {name: 'colorpicker.module',        files: ['vendor/angular-bootstrap-colorpicker/css/colorpicker.css',
                                                        'vendor/angular-bootstrap-colorpicker/js/bootstrap-colorpicker-module.js']}
          ]
        })
        ;

})();

(function() {
    'use strict';

    angular
        .module('app.loadingbar')
        .config(loadingbarConfig)
        ;
    loadingbarConfig.$inject = ['cfpLoadingBarProvider'];
    function loadingbarConfig(cfpLoadingBarProvider){
      cfpLoadingBarProvider.includeBar = true;
      cfpLoadingBarProvider.includeSpinner = false;
      cfpLoadingBarProvider.latencyThreshold = 500;
      cfpLoadingBarProvider.parentSelector = '.wrapper > section';
    }
})();
(function() {
    'use strict';

    angular
        .module('app.loadingbar')
        .run(loadingbarRun)
        ;
    loadingbarRun.$inject = ['$rootScope', '$timeout', 'cfpLoadingBar'];
    function loadingbarRun($rootScope, $timeout, cfpLoadingBar){

      // Loading bar transition
      // ----------------------------------- 
      var thBar;
      $rootScope.$on('$stateChangeStart', function() {
          if($('.wrapper > section').length) // check if bar container exists
            thBar = $timeout(function() {
              cfpLoadingBar.start();
            }, 0); // sets a latency Threshold
      });
      $rootScope.$on('$stateChangeSuccess', function(event) {
          event.targetScope.$watch('$viewContentLoaded', function () {
            $timeout.cancel(thBar);
            cfpLoadingBar.complete();
          });
      });

    }

})();
/**=========================================================
 * Module: demo-notify.js
 * Provides a simple demo for notify
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.notify')
        .controller('NotifyDemoCtrl', NotifyDemoCtrl);

    NotifyDemoCtrl.$inject = ['Notify', '$timeout'];
    function NotifyDemoCtrl(Notify, $timeout) {
        var vm = this;

        activate();

        ////////////////

        function activate() {
          vm.msgHtml = '<em class="fa fa-check"></em> Message with icon..';

          vm.notifyMsg = 'Some messages here..';
          vm.notifyOpts = {
            status: 'danger',
            pos: 'bottom-center'
          };

          // Service usage example
          $timeout(function(){
            
            Notify.alert( 
                'This is a custom message from notify..', 
                {status: 'success'}
            );
          
          }, 500);
        }
    }
})();

/**=========================================================
 * Module: notify.js
 * Directive for notify plugin
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.notify')
        .directive('notify', notify);

    notify.$inject = ['$window', 'Notify'];
    function notify ($window, Notify) {

        var directive = {
            link: link,
            restrict: 'A',
            scope: {
              options: '=',
              message: '='
            }
        };
        return directive;

        function link(scope, element) {

          element.on('click', function (e) {
            e.preventDefault();
            Notify.alert(scope.message, scope.options);
          });
        }

    }

})();


/**=========================================================
 * Module: notify.js
 * Create a notifications that fade out automatically.
 * Based on Notify addon from UIKit (http://getuikit.com/docs/addons_notify.html)
 =========================================================*/

(function() {
    'use strict';
    angular
        .module('app.notify')
        .service('Notify', Notify);

    Notify.$inject = ['$timeout'];
    function Notify($timeout) {

        this.alert = notifyAlert;

        ////////////////

        function notifyAlert(msg, opts) {
            if ( msg ) {
                $timeout(function(){
                    $('.uk-notify-message ').remove();
                    $.notify(msg, opts || {});
                });
            }
        }
    }

})();

/**
 * Notify Addon definition as jQuery plugin
 * Adapted version to work with Bootstrap classes
 * More information http://getuikit.com/docs/addons_notify.html
 */
(function($){
    'use strict';
    var containers = {},
        messages   = {},
        notify     =  function(options){
            if ($.type(options) === 'string') {
                options = { message: options };
            }
            if (arguments[1]) {
                options = $.extend(options, $.type(arguments[1]) === 'string' ? {status:arguments[1]} : arguments[1]);
            }
            return (new Message(options)).show();
        },
        closeAll  = function(group, instantly){
            var id;
            if(group) {
                for(id in messages) { if(group===messages[id].group) messages[id].close(instantly); }
            } else {
                for(id in messages) { messages[id].close(instantly); }
            }
        };
    var Message = function(options){
        // var $this = this;
        this.options = $.extend({}, Message.defaults, options);
        this.uuid    = 'ID'+(new Date().getTime())+'RAND'+(Math.ceil(Math.random() * 100000));
        this.element = $([
            // @geedmo: alert-dismissable enables bs close icon
            '<div class="uk-notify-message alert-dismissable">',
                '<a class="close">&times;</a>',
                '<div>'+this.options.message+'</div>',
            '</div>'
        ].join('')).data('notifyMessage', this);
        // status
        if (this.options.status) {
            this.element.addClass('alert alert-'+this.options.status);
            this.currentstatus = this.options.status;
        }
        this.group = this.options.group;
        messages[this.uuid] = this;
        if(!containers[this.options.pos]) {
            containers[this.options.pos] = $('<div class="uk-notify uk-notify-'+this.options.pos+'"></div>').appendTo('body').on('click', '.uk-notify-message', function(){
                $(this).data('notifyMessage').close();
            });
        }
    };
    $.extend(Message.prototype, {
        uuid: false,
        element: false,
        timout: false,
        currentstatus: '',
        group: false,
        show: function() {
            if (this.element.is(':visible')) return;
            var $this = this;
            containers[this.options.pos].show().prepend(this.element);
            var marginbottom = parseInt(this.element.css('margin-bottom'), 10);
            this.element.css({'opacity':0, 'margin-top': -1*this.element.outerHeight(), 'margin-bottom':0}).animate({'opacity':1, 'margin-top': 0, 'margin-bottom':marginbottom}, function(){
                if ($this.options.timeout) {
                    var closefn = function(){ $this.close(); };
                    $this.timeout = setTimeout(closefn, $this.options.timeout);
                    $this.element.hover(
                        function() { clearTimeout($this.timeout); },
                        function() { $this.timeout = setTimeout(closefn, $this.options.timeout);  }
                    );
                }
            });
            return this;
        },
        close: function(instantly) {
            var $this    = this,
                finalize = function(){
                    $this.element.remove();
                    if(!containers[$this.options.pos].children().length) {
                        containers[$this.options.pos].hide();
                    }
                    delete messages[$this.uuid];
                };
            if(this.timeout) clearTimeout(this.timeout);
            if(instantly) {
                finalize();
            } else {
                this.element.animate({'opacity':0, 'margin-top': -1* this.element.outerHeight(), 'margin-bottom':0}, function(){
                    finalize();
                });
            }
        },
        content: function(html){
            var container = this.element.find('>div');
            if(!html) {
                return container.html();
            }
            container.html(html);
            return this;
        },
        status: function(status) {
            if(!status) {
                return this.currentstatus;
            }
            this.element.removeClass('alert alert-'+this.currentstatus).addClass('alert alert-'+status);
            this.currentstatus = status;
            return this;
        }
    });
    Message.defaults = {
        message: '',
        status: 'normal',
        timeout: 3000,
        group: null,
        pos: 'top-center'
    };
    
    $.notify          = notify;
    $.notify.message  = Message;
    $.notify.closeAll = closeAll;
    
    return notify;
}(jQuery));

/**=========================================================
 * Module: sidebar-menu.js
 * Handle sidebar collapsible elements
 =========================================================*/
(function() {
    'use strict';
    angular
    .module('app.sidebar')
    .controller('SidebarController', SidebarController);

    SidebarController.$inject = ['$rootScope', '$scope', '$state', 'SidebarLoader', 'Utils', '$uibModal', 'AppService', 'ga_service', '$localStorage', 'loaderFactory','$location', 'wootricFactory'];
    function SidebarController($rootScope, $scope, $state, SidebarLoader,  Utils, $uibModal, AppService, ga_service, $localStorage, loaderFactory, $location, wootricFactory) {
        let user = $localStorage.USER
        if(user){
          activate(user);
        } else {
          var data = $state.params;
          //Bigsmall Issue
          if(data.hasOwnProperty('shop') && data.shop != ''){
            var url = new URL($location.absUrl());
      			var ids = url.searchParams.getAll("ids[]");
            data.ids = ids;
          }
          //Bigsmall Issue
          $state.go('auth.login',{
            'toState': $state.current.name,
            'toParams': data
          })
        }
        ////////////////
        function activate(user) {
          var collapseList = [];
          // demo: when switch from collapse to hover, close all items
          $rootScope.$watch('app.layout.asideHover', function(oldVal, newVal){
            if ( newVal === false && oldVal === true) {
              closeAllBut(-1);
            }
          });

          // Load menu from json file
          // -----------------------------------
          SidebarLoader.getMenu(sidebarReady);
          $scope.menuItems ='';
          function sidebarReady(items) {
            loaderFactory.display('Please Wait!');
            AppService.get('settings/menu', true)
            .success(function(data){
                loaderFactory.hide();
                var menuItems = data.data;
                var itemsArry = [];
                var totalkeys = Object.keys(menuItems);
                var totalLength = totalkeys.length;
                for (var i = 0; i < totalLength; i++){
                    var subKeys = menuItems[totalkeys[i]];
                    if(typeof subKeys === 'object'){
                        var isSubmenu = false;
                        var itemsObj =
                        {
                            "submenu": [],
                            "text": items[totalkeys[i]].text,
                            "icon": items[totalkeys[i]].icon
                        }
                        if(items[totalkeys[i]].sref){
                          itemsObj.sref = items[totalkeys[i]].sref
                        }
                        var subKeysArry = Object.keys(subKeys);
                        var subKeysArryLength = subKeysArry.length;
                        for (var j = 0; j < subKeysArryLength; j++){
                            if(menuItems[totalkeys[i]][subKeysArry[j]]){
                                isSubmenu = true;
                                itemsObj.submenu.push(items[totalkeys[i]].submenu[subKeysArry[j]]);
                            }
                        }
                        if(isSubmenu){
                            itemsArry.push(itemsObj);
                        }
                    }
                    else if(menuItems[totalkeys[i]]){
                        itemsArry.push(items[totalkeys[i]]);
                    }
                }
                $scope.menuItems = itemsArry;
            })
            .error(function(error){
                //$scope.isPreloader = false;
                loaderFactory.hide();
                AppService.isAuth(error, 'danger');
            })

          }

          // Handle sidebar and collapse items
          // ----------------------------------

          $scope.isCollapse = isCollapse;
          $scope.addCollapse = addCollapse;
          $scope.toggleCollapse = toggleCollapse;
          $scope.getMenuItemPropClasses = getMenuItemPropClasses;

          function getMenuItemPropClasses(item){
            if(item != undefined){
              return (item.heading ? 'nav-heading' : '') + (isActive(item) ? ' active' : '');
            }
            else {
              return false;
            }
          };

          function addCollapse($index, item) {
            collapseList[$index] = $rootScope.app.layout.asideHover ? true : !isActive(item);
          };

          function isCollapse($index) {
            return (collapseList[$index]);
          };

          function toggleCollapse($index, isParentItem) {
            //loke start
            // collapsed sidebar doesn't toggle drodopwn
            switch($index) {
                case 0:
                     ga_service.send('Menu','dashboard_click');
                    break;
                case 1:
                     ga_service.send('Menu','orders_click');
                    break;
                case 2:
                     ga_service.send('Menu','tracking_click');
                    break;
                case 3:
                     ga_service.send('Menu','rate_calculator_click');
                    break;
                case 4:
                     ga_service.send('Menu','Products_click');
                    break;
                case 5:
                     ga_service.send('Menu','billing_click');
                    break;
                case 6:
                     ga_service.send('Menu','Settings_click');
                    break;
                default:
                    console.log('default clicked');
                  }

            if( Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover ) {return true;}

            // make sure the item index exists
            if( angular.isDefined( collapseList[$index] ) ) {
              if ( ! $scope.lastEventFromChild ) {
                collapseList[$index] = !collapseList[$index];
                closeAllBut($index);
              }
            }
            else if ( isParentItem ) {
              closeAllBut(-1);
            }

            $scope.lastEventFromChild = isChild($index);
            return true;
          };

          // Controller helpers
          // -----------------------------------
            // Check item and children active state
            function isActive(item) {
              if(!item) return;
              if( !item.sref || item.sref === '#') {
                var foundActive = false;
                angular.forEach(item.submenu, function(value) {
                  if(isActive(value)) foundActive = true;
                });
                return foundActive;
              }
              else {
                if($state.current.name === 'app.unprocessible' || $state.current.name === 'app.manifested' ||$state.current.name === 'app.viewallorders' || $state.current.name === 'app.returns' || $state.current.name === 'app.manifests'|| $state.current.name === 'app.processing_international' || $state.current.name === 'app.manifest') {
                  if(item.sref ==='app.processing') {
                    return true;
                  }
                  else {
                    return false;
                  }
                }
                else if($state.current.name === 'app.ndrPending' || $state.current.name === 'app.ndrClosed' || $state.current.name === 'app.rtoInitiated' || $state.current.name === 'app.rtoDelivered' || $state.current.name === 'app.rtoAcknowledged'){
                   if(item.sref ==='app.tracking'){
                      return true;
                    }
                    else {
                      return false;
                    }
                }
                else if($state.current.name === 'app.user_chargedetail' || $state.current.name === 'app.transaction_logs' || $state.current.name === 'app.rtoInitiated' || $state.current.name === 'app.user_creditdetails' || $state.current.name === 'app.user_invoicing'  || $state.current.name === 'app.user_plandetails'){
                    if(item.sref ==='app.user_statement') {
                      return true;
                    }
                    else {
                      return false;
                    }
                }
                else if($state.current.name === 'app.rateCalculator-international') {
                    if(item.sref ==='app.rateCalculator') {
                      return true;
                    }
                    else {
                      return false;
                    }
                }
                else if($state.current.name === 'app.dashboard-orders' || $state.current.name === 'app.dashboard-shipment') {
                    if(item.sref ==='app.dashboard') {
                      return true;
                    }
                    else {
                      return false;
                    }
                }
                else {
                  return $state.is(item.sref) || $state.includes(item.sref);
                }
              }
            }

            function closeAllBut(index) {
              index += '';
              for(var i in collapseList) {
                if(index < 0 || index.indexOf(i) < 0)
                  collapseList[i] = true;
              }
            }

            function isChild($index) {
              /*jshint -W018*/
              $('.sidebar').find('.nav').find('li').removeClass('active');
              return (typeof $index === 'string') && !($index.indexOf('-') < 0);
            }

            if(user.is_seller){
              wootricFactory.run(); //NPS widget
            }
        }
    }
})();

/**=========================================================
 * Module: sidebar.js
 * Wraps the sidebar and handles collapsed state
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.sidebar')
        .directive('sidebar', sidebar);

    sidebar.$inject = ['$rootScope', '$timeout', '$window', 'Utils'];
    function sidebar ($rootScope, $timeout, $window, Utils) {
        var $win = angular.element($window);
        var directive = {
            // bindToController: true,
            // controller: Controller,
            // controllerAs: 'vm',
            link: link,
            restrict: 'EA',
            template: '<nav class="sidebar" ng-transclude></nav>',
            transclude: true,
            replace: true
            // scope: {}
        };
        return directive;

        function link(scope, element, attrs) {

          var currentState = $rootScope.$state.current.name;
          var $sidebar = element;

          var eventName = Utils.isTouch() ? 'click' : 'mouseenter' ;
          var subNav = $();

          $sidebar.on( eventName, '.nav > li', function() {

            if( Utils.isSidebarCollapsed() || $rootScope.app.layout.asideHover ) {

              subNav.trigger('mouseleave');
              subNav = toggleMenuItem( $(this), $sidebar);

              // Used to detect click and touch events outside the sidebar
              sidebarAddBackdrop();

            }

          });

          scope.$on('closeSidebarMenu', function() {
            removeFloatingNav();
          });

          // Normalize state when resize to mobile
          $win.on('resize', function() {
            if( ! Utils.isMobile() )
          	asideToggleOff();
          });

          // Adjustment on route changes
          $rootScope.$on('$stateChangeStart', function(event, toState) {
            currentState = toState.name;
            // Hide sidebar automatically on mobile
            asideToggleOff();

            $rootScope.$broadcast('closeSidebarMenu');
          });

      	  // Autoclose when click outside the sidebar
          if ( angular.isDefined(attrs.sidebarAnyclickClose) ) {

            var wrapper = $('.wrapper');
            var sbclickEvent = 'click.sidebar';

            $rootScope.$watch('app.asideToggled', watchExternalClicks);

          }

          //////

          function watchExternalClicks(newVal) {
            // if sidebar becomes visible
            if ( newVal === true ) {
              $timeout(function(){ // render after current digest cycle
                wrapper.on(sbclickEvent, function(e){
                  // if not child of sidebar
                  if( ! $(e.target).parents('.aside').length ) {
                    asideToggleOff();
                  }
                });
              });
            }
            else {
              // dettach event
              wrapper.off(sbclickEvent);
            }
          }

          function asideToggleOff() {
            $rootScope.app.asideToggled = false;
            if(!scope.$$phase) scope.$apply(); // anti-pattern but sometimes necessary
      	  }
        }

        ///////

        function sidebarAddBackdrop() {
          var $backdrop = $('<div/>', { 'class': 'dropdown-backdrop'} );
          $backdrop.insertAfter('.aside-inner').on('click mouseenter', function () {
            removeFloatingNav();
          });
        }

        // Open the collapse sidebar submenu items when on touch devices
        // - desktop only opens on hover
        function toggleTouchItem($element){
          $element
            .siblings('li')
            .removeClass('open')
            .end()
            .toggleClass('open');
        }

        // Handles hover to open items under collapsed menu
        // -----------------------------------
        function toggleMenuItem($listItem, $sidebar) {

          removeFloatingNav();

          var ul = $listItem.children('ul');

          if( !ul.length ) return $();
          if( $listItem.hasClass('open') ) {
            toggleTouchItem($listItem);
            return $();
          }

          var $aside = $('.aside');
          var $asideInner = $('.aside-inner'); // for top offset calculation
          var topbarHeight = $('.topnavbar').outerHeight();
          // float aside uses extra padding on aside
          var mar = parseInt( $asideInner.css('padding-top'), 0) + parseInt( $aside.css('padding-top'), 0);
          var subNav = ul.clone().appendTo( $aside );

          toggleTouchItem($listItem);

          var itemTop = ($listItem.position().top + mar) - $(window).scrollTop() + topbarHeight;
          var vwHeight = $win.height();

          subNav
            .addClass('nav-floating')
            .css({
              position: $rootScope.app.layout.isFixed ? 'fixed' : 'absolute',
              top:      itemTop,
              bottom:   (subNav.outerHeight(true) + itemTop > vwHeight) ? 0 : 'auto'
            });

          subNav.on('mouseleave', function() {
            toggleTouchItem($listItem);
            subNav.remove();
          });

          return subNav;
        }

        function removeFloatingNav() {
          $('.dropdown-backdrop').remove();
          $('.sidebar-subnav.nav-floating').remove();
          $('.sidebar li.open').removeClass('open');
        }
    }


})();

(function() {
    'use strict';
    angular
        .module('app.sidebar')
        .service('SidebarLoader', SidebarLoader);

    SidebarLoader.$inject = ['$http'];
    function SidebarLoader($http) {
        this.getMenu = getMenu;

        ////////////////

        function getMenu(onReady, onError) {


            var menuJson = 'server/sidebar-menu.json',
            menuURL  = menuJson + '?v=' + (new Date().getTime()); // jumps cache

            onError = onError || function() { alert('Failure loading menu'); };

          $http
            .get(menuURL)
            .success(onReady)
            .error(onError);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.sidebar')
        .controller('UserBlockController', UserBlockController);

    UserBlockController.$inject = ['$rootScope', '$scope'];
    function UserBlockController($rootScope, $scope) {

        activate();

        ////////////////

        function activate() {
          $rootScope.user = {
            name:     'John',
            job:      'ng-developer',
            picture:  'app/img/user/02.jpg'
          };

          // Hides/show user avatar on sidebar
          $rootScope.toggleUserBlock = function(){
            $rootScope.$broadcast('toggleUserBlock');
          };

          $rootScope.userBlockVisible = true;

          var detach = $rootScope.$on('toggleUserBlock', function(/*event, args*/) {

            $rootScope.userBlockVisible = ! $rootScope.userBlockVisible;

          });

          $scope.$on('$destroy', detach);
        }
    }
})();

(function() {
    'use strict';

    angular
        .module('app.translate')
        .config(translateConfig)
        ;
    translateConfig.$inject = ['$translateProvider'];
    function translateConfig($translateProvider){

      $translateProvider.useStaticFilesLoader({
          prefix : 'app/i18n/',
          suffix : '.json'
      });

      $translateProvider.preferredLanguage('en');
      $translateProvider.useLocalStorage();
      $translateProvider.usePostCompiling(true);
      $translateProvider.useSanitizeValueStrategy('sanitizeParameters');

    }
})();
(function() {
    'use strict';

    angular
        .module('app.translate')
        .run(translateRun)
        ;
    translateRun.$inject = ['$rootScope', '$translate'];
    
    function translateRun($rootScope, $translate){

      // Internationalization
      // ----------------------

      $rootScope.language = {
        // Handles language dropdown
        listIsOpen: false,
        // list of available languages
        available: {
          'en':       'English',
          'es_AR':    'Español'
        },
        // display always the current ui language
        init: function () {
          var proposedLanguage = $translate.proposedLanguage() || $translate.use();
          var preferredLanguage = $translate.preferredLanguage(); // we know we have set a preferred one in app.config
          $rootScope.language.selected = $rootScope.language.available[ (proposedLanguage || preferredLanguage) ];
        },
        set: function (localeId) {
          // Set the new idiom
          $translate.use(localeId);
          // save a reference for the current language
          $rootScope.language.selected = $rootScope.language.available[localeId];
          // finally toggle dropdown
          $rootScope.language.listIsOpen = ! $rootScope.language.listIsOpen;
        }
      };

      $rootScope.language.init();

    }
})();
/**=========================================================
 * Module: animate-enabled.js
 * Enable or disables ngAnimate for element with directive
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('animateEnabled', animateEnabled);

    animateEnabled.$inject = ['$animate'];
    function animateEnabled ($animate) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs) {
          scope.$watch(function () {
            return scope.$eval(attrs.animateEnabled, scope);
          }, function (newValue) {
            $animate.enabled(!!newValue, element);
          });
        }
    }

})();

/**=========================================================
 * Module: browser.js
 * Browser detection
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .service('Browser', Browser);

    Browser.$inject = ['$window'];
    function Browser($window) {
      return $window.jQBrowser;
    }

})();

/**=========================================================
 * Module: clear-storage.js
 * Removes a key from the browser storage via element click
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('resetKey', resetKey);

    resetKey.$inject = ['$state', '$localStorage'];
    function resetKey ($state, $localStorage) {
        var directive = {
            link: link,
            restrict: 'A',
            scope: {
              resetKey: '@'
            }
        };
        return directive;

        function link(scope, element) {
          element.on('click', function (e) {
              e.preventDefault();

              if(scope.resetKey) {
                delete $localStorage[scope.resetKey];
                $state.go($state.current, {}, {reload: true});
              }
              else {
                $.error('No storage key specified for reset.');
              }
          });
        }
    }

})();

/**=========================================================
 * Module: fullscreen.js
 * Toggle the fullscreen mode on/off
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('toggleFullscreen', toggleFullscreen);

    toggleFullscreen.$inject = ['Browser'];
    function toggleFullscreen (Browser) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          // Not supported under IE
          if( Browser.msie ) {
            element.addClass('hide');
          }
          else {
            element.on('click', function (e) {
                e.preventDefault();

                if (screenfull.enabled) {
                  
                  screenfull.toggle();
                  
                  // Switch icon indicator
                  if(screenfull.isFullscreen)
                    $(this).children('em').removeClass('fa-expand').addClass('fa-compress');
                  else
                    $(this).children('em').removeClass('fa-compress').addClass('fa-expand');

                } else {
                  $.error('Fullscreen not enabled');
                }

            });
          }
        }
    }


})();

/**=========================================================
 * Module: load-css.js
 * Request and load into the current page a css file
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('loadCss', loadCss);

    function loadCss () {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs) {
          element.on('click', function (e) {
              if(element.is('a')) e.preventDefault();
              var uri = attrs.loadCss,
                  link;

              if(uri) {
                link = createLink(uri);
                if ( !link ) {
                  $.error('Error creating stylesheet link element.');
                }
              }
              else {
                $.error('No stylesheet location defined.');
              }

          });
        }
        
        function createLink(uri) {
          var linkId = 'autoloaded-stylesheet',
              oldLink = $('#'+linkId).attr('id', linkId + '-old');

          $('head').append($('<link/>').attr({
            'id':   linkId,
            'rel':  'stylesheet',
            'href': uri
          }));

          if( oldLink.length ) {
            oldLink.remove();
          }

          return $('#'+linkId);
        }
    }

})();

/**=========================================================
 * Module: now.js
 * Provides a simple way to display the current time formatted
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('now', now);

    now.$inject = ['dateFilter', '$interval'];
    function now (dateFilter, $interval) {
        var directive = {
            link: link,
            restrict: 'EA'
        };
        return directive;

        function link(scope, element, attrs) {
          var format = attrs.format;

          function updateTime() {
            var dt = dateFilter(new Date(), format);
            element.text(dt);
          }

          updateTime();
          var intervalPromise = $interval(updateTime, 1000);

          scope.$on('$destroy', function(){
            $interval.cancel(intervalPromise);
          });

        }
    }

})();

/**=========================================================
 * Module: table-checkall.js
 * Tables check all checkbox
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('checkAll', checkAll);

    function checkAll () {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element, attrs) {
          element.on('change', function() {
            // if()
            var $this = $(this),
                index= $this.index() + 1,
                checkbox = $this.find('input[type="checkbox"]'),
                table = $this.parents('table'),
                allCheckboxes = table.find('tbody > tr > td:nth-child('+index+') input[type="checkbox"]');

            // console.log(checkbox.value);
            // Make sure to affect only the correct checkbox column
            allCheckboxes.prop('checked', checkbox[0].checked);

          });
        }
    }

})();

/**=========================================================
 * Module: trigger-resize.js
 * Triggers a window resize event from any element
 =========================================================*/
(function() {
    'use strict';

    angular
        .module('app.utils')
        .directive('triggerResize', triggerResize);

    triggerResize.$inject = ['$window', '$timeout'];
    function triggerResize ($window, $timeout) {
        var directive = {
            link: link,
            restrict: 'A'
        };
        return directive;

        function link(scope, element) {
          element.on('click', function(){
            $timeout(function(){
              // all IE friendly dispatchEvent
              var evt = document.createEvent('UIEvents');
              evt.initUIEvent('resize', true, false, $window, 0);
              $window.dispatchEvent(evt);
              // modern dispatchEvent way
              // $window.dispatchEvent(new Event('resize'));
            });
          });
        }
    }

})();

/**=========================================================
 * Module: utils.js
 * Utility library to use across the theme
 =========================================================*/

(function() {
    'use strict';

    angular
        .module('app.utils')
        .service('Utils', Utils);

    Utils.$inject = ['$window', 'APP_MEDIAQUERY'];
    function Utils($window, APP_MEDIAQUERY) {

        var $html = angular.element('html'),
            $win  = angular.element($window),
            $body = angular.element('body');

        return {
          // DETECTION
          support: {
            transition: (function() {
                    var transitionEnd = (function() {

                        var element = document.body || document.documentElement,
                            transEndEventNames = {
                                WebkitTransition: 'webkitTransitionEnd',
                                MozTransition: 'transitionend',
                                OTransition: 'oTransitionEnd otransitionend',
                                transition: 'transitionend'
                            }, name;

                        for (name in transEndEventNames) {
                            if (element.style[name] !== undefined) return transEndEventNames[name];
                        }
                    }());

                    return transitionEnd && { end: transitionEnd };
                })(),
            animation: (function() {

                var animationEnd = (function() {

                    var element = document.body || document.documentElement,
                        animEndEventNames = {
                            WebkitAnimation: 'webkitAnimationEnd',
                            MozAnimation: 'animationend',
                            OAnimation: 'oAnimationEnd oanimationend',
                            animation: 'animationend'
                        }, name;

                    for (name in animEndEventNames) {
                        if (element.style[name] !== undefined) return animEndEventNames[name];
                    }
                }());

                return animationEnd && { end: animationEnd };
            })(),
            requestAnimationFrame: window.requestAnimationFrame ||
                                   window.webkitRequestAnimationFrame ||
                                   window.mozRequestAnimationFrame ||
                                   window.msRequestAnimationFrame ||
                                   window.oRequestAnimationFrame ||
                                   function(callback){ window.setTimeout(callback, 1000/60); },
            /*jshint -W069*/
            touch: (
                ('ontouchstart' in window && navigator.userAgent.toLowerCase().match(/mobile|tablet/)) ||
                (window.DocumentTouch && document instanceof window.DocumentTouch)  ||
                (window.navigator['msPointerEnabled'] && window.navigator['msMaxTouchPoints'] > 0) || //IE 10
                (window.navigator['pointerEnabled'] && window.navigator['maxTouchPoints'] > 0) || //IE >=11
                false
            ),
            mutationobserver: (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || null)
          },
          // UTILITIES
          isInView: function(element, options) {
              /*jshint -W106*/
              var $element = $(element);

              if (!$element.is(':visible')) {
                  return false;
              }

              var window_left = $win.scrollLeft(),
                  window_top  = $win.scrollTop(),
                  offset      = $element.offset(),
                  left        = offset.left,
                  top         = offset.top;

              options = $.extend({topoffset:0, leftoffset:0}, options);

              if (top + $element.height() >= window_top && top - options.topoffset <= window_top + $win.height() &&
                  left + $element.width() >= window_left && left - options.leftoffset <= window_left + $win.width()) {
                return true;
              } else {
                return false;
              }
          },
          
          langdirection: $html.attr('dir') === 'rtl' ? 'right' : 'left',

          isTouch: function () {
            return $html.hasClass('touch');
          },

          isSidebarCollapsed: function () {
            return $body.hasClass('aside-collapsed');
          },

          isSidebarToggled: function () {
            return $body.hasClass('aside-toggled');
          },

          isMobile: function () {
            return $win.width() < APP_MEDIAQUERY.tablet;
          }

        };
    }
})();

(function () {
    'use strict';
    angular.module('multiChannel', []);

	
})();
(function() {
    'use strict';

    angular.module('app.orders', []);
})();
(function() {
    'use strict';
    angular.module('app.products', []);
})();
(function() {
    'use strict';
    angular.module('app.upload', []);
})();
(function() {
  'use strict';

  angular
  .module('app.services', [])
  .config(['$httpProvider', function($httpProvider) {
    $httpProvider.defaults.withCredentials = true;
  }])
  .filter('removeUnderscore', function (){
    return function (text){
      var str = text.replace(/_/g, ' ');
      return str;
    };
  })
  .filter('secondsToTime', function(){
    function padTime(t) {
      return t < 10 ? "0"+t : t;
    }

    return function(_seconds) {
      if (typeof _seconds !== "number" || _seconds < 0){
        return "00:00:00";
      }

      var hours = Math.floor(_seconds / 3600),
        minutes = Math.floor((_seconds % 3600) / 60),
        seconds = Math.floor(_seconds % 60);

      return padTime(hours) + "h " + padTime(minutes) + "m";
    };
  });
})();

(function() {
    'use strict';

    angular.module('app.setting', []);
    
})();
(function() {
    'use strict';

    angular.module('app.help', []);
    
})();
(function() {
    'use strict';
    angular.module('app.report' , []);
})();
(function() {
    'use strict';

    angular.module('app.shiprocket', []);
    
})();
/**=========================================================
 * Module: DashboardController
  =========================================================*/

(function() {
    'use strict';
    angular.module('multichannel').controller('DashboardController', DashboardController );
    DashboardController .$inject = ['$log', '$rootScope', 'AppService', '$scope', '$localStorage', 'Notify'];
    function DashboardController ($log, $rootScope, AppService, $scope, $localStorage, Notify) {     
        activate();
        ////////////////
        function activate() 
        {   
            $scope.DateFilter =
            {
                'from': '',
                'to': ''
            }
            var seriesArry = []
            var orderDataArry = [];
            var inventoryDataArry = [];
            var dateArry = [];
            $scope.channelWithId = [];
            $scope.isOrderChecked = true;
            $scope.isRevenueChecked = false;
            $scope.channelList = [];

            //new date picker JS
            var start = moment().subtract(3, 'months');
            var end = moment();
            var user = $localStorage.USER;

            var sortTable =
            {
                dataType: 'Orders'
            }
            $scope.getAllChannel = function(argument)
            {   
                $scope.channelList = [];
                $scope.channelWithId = [];
                $scope.seletedChannel = [];
                

                AppService.get('channels', true)
                .success(function(data)
                {   
                    channelListLength = data.data.length;
                    var channels = data.data;
                    for (var i = 0; i < channelListLength; i++) 
                    {
                        $scope.channelList.push(channels[i].name);
                        var channelObj = 
                        {
                            name: channels[i].name,
                            id: channels[i].id
                        }
                        $scope.channelWithId.push(channelObj);

                    }
                    var defaultChannelOption  = 
                    {
                        name: "All Channels",
                        id: ''
                    } 
                    $scope.channelWithId.unshift(defaultChannelOption);
                    $scope.seletedChannel = $scope.channelWithId[0];
                    getDashboardDetail();
                    loaderFactory.hide();
                })
                .error(function(error)
                {
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }


            $scope.getFilteredData = function()
            {   
                getDashboardDetail();
            }



            var channelListLength = $scope.channelList.length;

            function getDashboardDetail()
            {   
                seriesArry = [];
                loaderFactory.display("Please Wait!");
                //$scope.isPreloader = true;
                var data =
                {
                    start_date: $scope.DateFilter.from,
                    end_date: $scope.DateFilter.to,
                    duration: 'year'
                } 
                if($scope.seletedChannel.id)
                {
                    data.channels =[$scope.seletedChannel.id];
                }

                AppService.post('dashboard', true, data)
                .success(function(data)
                {   
                    var keys = Object.keys(data.data);
                    if(keys.length)
                    {
                        formatData(data.data);
                    }
                    else
                    {
                        $('.graph-wrapper').html('');
                        Notify.alert('No Data For Selected Criteria');
                    }
                    loaderFactory.hide();
                    //$scope.isPreloader = false;

                })
                .error(function(error)
                {
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    AppService.isAuth(error);
                })

            }

            function formatData(data)
            {   
                dateArry = [];
                for (var i = 0; i < channelListLength; i++) 
                {
                    orderDataArry[$scope.channelList[i]] = []; 
                    inventoryDataArry[$scope.channelList[i]] = []; 
                }

                dateArry = Object.keys(data);
                var dateLength = dateArry.length;
                for (var i = 0; i < dateLength; i++) 
                {   
                    for (var j = 0; j < channelListLength; j++) 
                    {   
                        if(data[dateArry[i]].hasOwnProperty($scope.channelList[j]))
                        {
                            orderDataArry[$scope.channelList[j]].push(data[dateArry[i]][$scope.channelList[j]][0].total_orders);
                            inventoryDataArry[$scope.channelList[j]].push(data[dateArry[i]][$scope.channelList[j]][0].total_revenue);
                        }
                        else
                        {
                            orderDataArry[$scope.channelList[j]].push(0);
                            inventoryDataArry[$scope.channelList[j]].push(0);
                        }
                    }
                }
                
                setGraphData();
                
            }


            $scope.changeGraphData = function(type)
            {   
               
                sortTable.dataType = '';
                loaderFactory.display('Please Wait');
                //$scope.isPreloader = true;
                seriesArry =[];
                if(type == 'revenue')
                {   
                    $scope.isOrderChecked = false;
                    $scope.isRevenueChecked = true;
                    sortTable.dataType = 'Revenue';
                    for (var i = 0; i < channelListLength; i++) 
                    {   
                        var seriesObject = 
                        {
                            name: $scope.channelList[i],
                            data: inventoryDataArry[$scope.channelList[i]]
                        }
                        seriesArry.push(seriesObject);
                    }
                    contructGraph();
                }
                else
                {   
                    sortTable.dataType = 'Orders';
                    setGraphData();
                }
                // contructGraph();
                loaderFactory.hide();
                //$scope.isPreloader = false;
            }

            function setGraphData()
            {   
                for (var i = 0; i < channelListLength; i++) 
                {   
                    var seriesObject = 
                    {
                        name: $scope.channelList[i],
                        data: orderDataArry[$scope.channelList[i]]
                    }
                    seriesArry.push(seriesObject);   
                }
                contructGraph();
                $scope.isOrderChecked = true;
                $scope.isRevenueChecked = false;
                loaderFactory.hide();
            }

            function contructGraph()
            {   
                var graphWrapper = '<div id="container" style="min-width: 310px; height: 400px; margin: 0 auto"></div>'
                $('.graph-wrapper').html('');
                $('.graph-wrapper').html(graphWrapper);

                $('#container').highcharts({
                    chart: {
                        type : 'column'
                    },
                    title: {
                        text: ''
                    },
                    xAxis: {
                        categories: dateArry
                    },
                    yAxis: {
                        min: 0,
                        title: {
                            text: sortTable.dataType
                        }
                    },
                    tooltip: {
                        pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',
                        shared: true
                    },
                    plotOptions: {
                        column: {
                            stacking: 'normal'
                        }
                    },
                    series: seriesArry
                    // series: [{
                    //     maxPointWidth: 30,
                    //     data: seriesArry
                    // }]
                });
            }

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment().subtract(46, 'years'), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);

            function cb(start, end) 
            {   

                $scope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
                $scope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
                if($scope.channelWithId.length)
                {
                    getDashboardDetail();
                }
            }
        }
    }
})();

/**=========================================================
 * Module: DashboardController
  =========================================================*/
(function() {
    'use strict';
    angular
    .module('multichannel')
    .controller('dashboardNewController', ['$log', '$rootScope', '$state', '$stateParams', 'AppService', 'ga_service', '$scope', 'Colors' , 'Notify', 'SR_CONSTANTS', '$localStorage', 'loaderFactory', '$uibModal',
        function ($log ,$rootScope, $state, $stateParams, AppService, ga_service, $scope, Colors, Notify, SR_CONSTANTS, $localStorage, loaderFactory, $uibModal){

            var user = $localStorage.USER;
            if(user){
              activate(user);
            }
            ////////////////
            function activate(user){
                $scope.tab1_active = false;
                $scope.tab0_active = false;
                $scope.tab2_active = false;
                loaderFactory.display("Please Wait!");
                //$scope.isPreloader = true;
                if(user) {
                    $scope.is_autorecharge_upgradable = user.is_autorecharge_upgradable || false;
                    $rootScope.isBasicPlan = user.is_basic_plan;
                    $rootScope.toggleOff = !user.inventory_sync_status;
                    if($state.current.name == 'app.dashboard'){
                      if($stateParams.paramData.activate_charge == 1){
                        console.log('open sesame');
                        var modalInstance = $uibModal.open({
                          animation: true,
                          templateUrl: 'shopifyBillingConf.html',
                          controller: 'shopifyBillingConf',
                          size: 'md',
                          backdrop  : 'static',
                          keyboard: false,
                          resolve: {
                            items: function() {
                              return $stateParams.paramData;
                            }
                          }
                        })
                        .closed.then(function(){
                          if (user.is_weight_dispute) {
                            AppService.showDisputePopup();
                          }
                        })
                      } else {
                        if (user.is_weight_dispute) {
                          AppService.showDisputePopup();
                        }
                      }
                    }
                }
                $scope.courierPerformanceData = [];
                $scope.getShipmentDashboardData = getShipmentDashboardData;
                $scope.changeLocation = changeLocation;

                var startDate ='';
                var endDate = '';

                function getAllData(){
                    loaderFactory.display("Please Wait!");
                    //$scope.isPreloader = true;
                    getDataWith(SR_CONSTANTS.api_urls.get_dashboard_overview, 'count');
                    // getDataWith(SR_CONSTANTS.api_urls.get_dashboard_top_products, 'product');
                    // getDataWith(SR_CONSTANTS.api_urls.get_dashboard_top_categories, 'category');

                    getDataWith( SR_CONSTANTS.api_urls.get_shipments_pending + '?per_page=5', 'ndr');
                    if($scope.is_autorecharge_upgradable){
                      getDataWith(SR_CONSTANTS.api_urls.remittance_summary, 'remittance_summary');
                    }
                    var data =
                    {
                        rto_acknowledged: [0],
                        rto_delivered: [0],
                        rto_initiated: [1]
                    }
                    getDataWithPost(SR_CONSTANTS.api_urls.get_shipments_rto_details + '?per_page=5', data, 'rto');
                }

                $scope.ndrSelected = function(){
                    ga_service.send('NDR', 'dashboard_ndr_click');
                }
                $scope.rtoSelected = function(){
                    ga_service.send('RTO', 'dashboard_rto_click');
                }

                //Postpaid START

                //Postpaid END

                function getOrderDetailData(){
                    loaderFactory.display("Please Wait!");
                    //$scope.isPreloader = true;
                    ga_service.send('Dashboard', 'dashboard_orders_click');
                    AppService.get( SR_CONSTANTS.api_urls.get_dashboard_orders+'?from='+startDate +'&to='+ endDate , true)
                    .success(function(data){
                        loaderFactory.hide();
                        //$scope.isPreloader = false;
                        $scope.orderDetail = data;
                        createOrderGraph(data.orders);
                        OrderPieGraph(data.order_types)
                    })
                    .error(function(error){
                        loaderFactory.hide();
                        //$scope.isPreloader = false;
                        AppService.isAuth(error, 'danger');
                    })
                }

                function getDataWith(url, dataName){
                    AppService.get(url, true)
                    .success(function(data){
                      switch (dataName) {
                        case 'count':
                          $scope.overview = data.data;
                          break;
                        case 'order':
                          $scope.orderSammary = data;
                          break;
                        case 'revenue':
                          $scope.revenue = data.data;
                          break;
                        case 'product':
                          $scope.products = data.data;
                          break;
                        case 'ndr':
                          $scope.ndrPending = data.data;
                          break;
                        case 'category':
                          $scope.categories = data.data;
                          break;
                        case 'rto':
                          $scope.rto = data.data;
                          break;
                        case 'remittance_summary':
                          $scope.remittance_summary = data.cod_payble;
                          break;
                      }
                      loaderFactory.hide();
                    })
                    .error(function(error){
                        loaderFactory.hide();
                        //$scope.isPreloader = false;
                        AppService.isAuth(error, 'danger');
                    })
                }

                function getDataWithPost(url, data){
                    AppService.post(url, true, data)
                    .success(function(data){
                        $scope.rtoInitiated = data.data;
                    })
                    .error(function(error){
                        loaderFactory.hide();
                        //$scope.isPreloader = false;
                        AppService.isAuth(error, 'danger');
                    })
                }

                function createOrderGraph(data){
                    var dataLength = data.length;
                    var category = [];
                    var order = [];
                    var revenue = [];
                    for (var i = 0; i < dataLength; i++){
                        category.push(data[i].date);
                        order.push(data[i].total);
                        revenue.push(parseInt(data[i].revenue));
                    }

                    Highcharts.chart('order-container', {
                        chart: {
                            zoomType: 'xy',
                        },
                        colors:['#285fdb', '#555'],
                        title: {
                            text: 'Orders & Revenue'
                        },
                        exporting: { enabled: false },
                        credits: {
                            enabled: false
                        },
                        // subtitle: {
                        //     text: 'Source: WorldClimate.com'
                        // },
                        xAxis: [{
                            categories: category,
                            crosshair: true
                        }],
                        yAxis: [ { // Secondary yAxis
                            title: {
                                text: 'revenue',
                                style: {
                                    color: '#285fdb'
                                }
                            },
                            labels: {
                                // format: '{value} mm',
                                style: {
                                    color: '#285fdb'
                                }
                            },
                            opposite: true
                        },{ // Primary yAxis
                            labels: {
                                // format: '{value}°C',
                                style: {
                                    color: Highcharts.getOptions().colors[1]
                                }
                            },
                            title: {
                                text: 'orders',
                                style: {
                                    color: Highcharts.getOptions().colors[1]
                                }
                            }
                        }],
                        tooltip: {
                            shared: true
                        },
                        legend: {
                            layout: 'vertical',
                            align: 'left',
                            x: 120,
                            verticalAlign: 'top',
                            y: 100,
                            floating: true,
                            backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'
                        },
                        series: [{
                            name: 'orders',
                            type: 'column',
                            yAxis: 1,
                            data: order,
                            // tooltip: {
                            //     valueSuffix: ' mm'
                            // }

                        }, {
                            name: 'Revenue',
                            type: 'spline',
                            data: revenue,
                            // tooltip: {
                            //     valueSuffix: '°C'
                            // }
                        }]
                    });

                }

                function OrderPieGraph(data){
                    var keys = Object.keys(data);
                    var length = keys.length;
                    var chartData =[];
                    for (var i = 0; i < length; i++)
                    {
                        var formatedData =
                        {
                            name: data[keys[i]].payment_method,
                            y: data[keys[i]].percent
                        };
                       chartData.push(formatedData);
                    }
                    // Create the chart
                    Highcharts.chart('order-highChart-wrapper', {
                        chart: {
                            type: 'pie'
                        },
                        colors:['#285fdb', '#555'],
                        title: {
                            text: 'Prepaid Vs COD'
                        },

                        exporting: { enabled: false },
                        credits: {
                            enabled: false
                        },
                        plotOptions: {
                            series: {
                                dataLabels: {
                                    enabled: true,
                                    format: '{point.name}: {point.y:.2f}%'
                                }
                            }
                        },

                        tooltip: {
                            headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                            pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y:.2f}%</b> of total<br/>'
                        },
                        series: [{
                            name: 'Payment Method',
                            colorByPoint: true,
                            data: chartData
                        }],
                    });
                }

                function getShipmentDashboardData(){
                    openDatePicker('shipment');
                    ga_service.send('Dashboard', 'dashboard_shipment_click');
                }

                function getShipmentDashboardDataDetail(){
                    loaderFactory.display('Please Wait')
                    //$scope.isPreloader = true;
                    AppService.get( SR_CONSTANTS.api_urls.get_dashboard_shipment+'?from='+startDate +'&to='+ endDate , true)
                    .success(function(data){
                        loaderFactory.hide();
                        //$scope.isPreloader = false;
                        columnChart(data.data.manifest_pending_since, 'manifest-pending','Manifest Pending Since' );
                        columnChart(data.data.pickup_pending_since, 'pickup-pending', 'Pickup Pending Since');
                        var courierPerformance = data.data.courier_stats.shipment_breakup_data;
                        performanceLineChart( data.data.avg_processing_time );
                        performanceBarChart(data.data.avg_pickup_time, data.data.avg_delivery_time);
                        performanceRTOBarChart(data.data.avg_rto_percentage);
                        // donutChart()
                        for (var i = 0; i <  courierPerformance.length; i++)
                        {
                            var Obj =
                            {
                                label: courierPerformance[i].courier_name,
                                value: courierPerformance[i].courier_revenue
                            }

                        }
                    })
                    .error(function(error){
                        loaderFactory.hide();
                        //$scope.isPreloader = false;
                        AppService.isAuth(error, 'danger');
                    })
                }
                //SHIPMENT CHARTS

                function columnChart(data, idName, heading){

                    var category = Object.keys(data);
                    var length = category.length;
                    var objectData = [];
                    for (var i = 0; i < length; i++)
                    {
                        objectData.push(data[category[i]]);
                    }
                    // var category = Object.keys(data);
                    Highcharts.chart(idName, {
                    chart: {
                        type: 'column'
                    },
                    colors:['#285fdb', '#555'],
                    title: {
                        text: heading
                    },
                    // subtitle: {
                    //     text: 'Source: WorldClimate.com'
                    // },
                    exporting: { enabled: false },
                    credits: {
                        enabled: false
                    },
                    xAxis: {
                        categories: category ,
                        title: {
                            text: 'Days'
                        },
                        crosshair: true
                    },
                    yAxis: {
                        min: 0,
                        title: {
                            text: 'Orders'
                        }
                    },
                    // tooltip: {
                    //     headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    //     pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    //         '<td style="padding:0"><b>{point.y:.1f} mm</b></td></tr>',
                    //     footerFormat: '</table>',
                    //     shared: true,
                    //     useHTML: true
                    // },
                    // plotOptions: {
                    //     column: {
                    //         pointPadding: 0.2,
                    //         borderWidth: 0
                    //     }
                    // },
                    series: [{
                        "name": 'Order',
                         data: objectData
                   }]
                });
                };

                function courierStat(data){
                    // Build the chart
                    Highcharts.chart('courier-stat-wrapper', {
                        chart: {
                            plotBackgroundColor: null,
                            plotBorderWidth: null,
                            plotShadow: false,
                            type: 'pie'
                        },
                        colors:['#285fdb', '#555'],
                        title: {
                            text: ''
                        },
                        exporting: { enabled: false },
                        tooltip: {
                            pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                        },
                        plotOptions: {
                            pie: {
                                allowPointSelect: true,
                                cursor: 'pointer',
                                dataLabels: {
                                    enabled: false
                                },
                                showInLegend: true
                            }
                        },
                        series: [{
                            name: 'Brands',
                            colorByPoint: true,
                            data: [{
                                name: 'Microsoft Internet Explorer',
                                y: 56.33
                            }, {
                                name: 'Proprietary or Undetectable',
                                y: 0.2
                            }]
                        }]
                    });
                }

                function performanceLineChart(data){
                    var platformData = [];
                    var sellerData = [];
                    var category =  Object.keys( data.platform );
                    var categories =  [];
                    var length = category.length;
                    categories.push(category[0]);
                    platformData.push(data.platform[category[0]]);
                    sellerData.push(data.seller[category[0]]);

                    for (var i = 1; i < length; i+=2) {
                        platformData.push(data.platform[category[i]]);
                        sellerData.push(data.seller[category[i]]);
                        categories.push(category[i]);
                    }

                    Highcharts.chart('performance-graph', {
                        title: {
                            text: 'Average Procesing Time(Platform VS Seller Performance)',
                            x: -20 //center
                        },
                        colors:['#285fdb', '#555'],
                        // subtitle: {
                        //     text: 'Source: WorldClimate.com',
                        //     x: -20
                        // },
                        xAxis: {
                            categories: categories
                        },
                        exporting: { enabled: false },
                        credits: {
                            enabled: false
                        },
                        yAxis: {
                            title: {
                                text: 'days'
                            },
                            plotLines: [{
                                value: 0,
                                width: 1,
                                color: '#808080'
                            }]
                        },
                        tooltip: {
                            valueSuffix: '',
                            useHTML: true,
                            formatter: function() {
                                var days = Math.floor(this.point.y);
                                var hours = ((this.point.y % 1) * 24).toFixed(2);
                                var point_time = days == 0? '' + hours + ' hrs': '' + days + ' days, ' + hours + ' hrs';
                                return '<tr><td style="color:"'+this.series.color+'";padding:0">'+this.series.name+': </td>' +
                                '<td style="padding:0"><b>'+ point_time +'</b></td></tr>'
                            }
                        },
                        legend: {
                            layout: 'vertical',
                            align: 'right',
                            verticalAlign: 'middle',
                            borderWidth: 0
                        },
                        series: [{
                            name: 'Platform',
                            data: platformData
                        }, {
                            name: 'Seller',
                            data: sellerData
                        }]
                    });
                }

                function performanceBarChart(pickup, delivery){
                    Highcharts.chart('performance-bar-chart', {
                    chart: {
                        type: 'column'
                    },
                    colors:['#285fdb', '#555'],
                    title: {
                        text: ''
                    },
                    subtitle: {
                        text: ''
                    },
                    exporting: { enabled: false },
                    xAxis: {
                        categories: [
                            'Average Pickup Time',
                            'Average Delivery Time',
                        ],
                        crosshair: true
                    },
                    yAxis: {
                        min: 0,
                        title: {
                            text: 'Hours'
                        }
                    },
                    tooltip: {
                        headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                        pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                            '<td style="padding:0"><b>{point.y:.1f}</b></td></tr>',
                        footerFormat: '</table>',
                        shared: true,
                        useHTML: true
                    },
                    plotOptions: {
                        column: {
                            pointPadding: 0.2,
                            borderWidth: 0
                        }
                    },
                    series: [{
                        name: 'Platform',
                        data: [parseInt(pickup.platform.avg_pickup_time), parseInt(delivery.platform.avg_delivery_time)]
                        },

                        {
                        name: 'Seller',
                        data: [parseInt(pickup.seller.avg_pickup_time), parseInt(delivery.seller.avg_delivery_time)]

                        }]
                    });
                }

                function performanceRTOBarChart(rto){
                    Highcharts.chart('performance-rto-bar-chart', {
                    chart: {
                        type: 'column'
                    },
                    colors:['#285fdb', '#555'],
                    title: {
                        text: 'Average % of RTO orders'
                    },
                    exporting: { enabled: false },
                    subtitle: {
                        text: ''
                    },
                    xAxis: {
                        crosshair: true
                    },
                    yAxis: {
                        min: 0,
                        title: {
                            text: 'Percentage'
                        }
                    },
                    tooltip: {
                        headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                        pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                            '<td style="padding:0"><b>{point.y:.1f}</b></td></tr>',
                        footerFormat: '</table>',
                        shared: true,
                        useHTML: true
                    },
                    plotOptions: {
                        column: {
                            pointPadding: 0.2,
                            borderWidth: 0
                        }
                    },
                    series: [{
                        name: 'Platform',
                        data: [parseInt(rto.platform.rto_average)]
                        },
                        {
                        name: 'Seller',
                        data: [parseInt(rto.seller.rto_average)]
                        }]
                    });
                }


                function openDatePicker(type){
                    //new date picker JS
                    var start = moment().subtract(1, 'month');
                    var end = moment();

                    $('.reportrange').daterangepicker({
                        startDate: start,
                        endDate: end,
                        ranges: {
                           'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                           'This Week': [moment().startOf('week'), moment().endOf('week')],
                           'Last Week': [moment().subtract(1, 'week').startOf('week'), moment().subtract(1, 'week').endOf('week')],
                           'This Month': [moment().startOf('month'), moment().endOf('month')],
                           'Last 1 Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                           'Last 3 Month': [moment().subtract(3, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')],
                           // 'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                        }
                    }, cb);
                    cb(start, end);
                    function cb(start, end){
                        startDate = start.format('YYYY-MMM-DD').toString();
                        endDate = end.format('YYYY-MMM-DD').toString();

                        switch ($state.current.name) {
                          case 'app.dashboard-orders':
                            getOrderDetailData();
                            break;
                          case 'app.dashboard-shipment':
                            getShipmentDashboardDataDetail();
                            break;
                        }

                        $('.reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
                    }
                }

                function changeLocation(state, index){
                    switch (index) {
                      case 0:
                        ga_service.send('Dashboard', 'dashboard_overview_click');
                        break;

                      case 1:
                        ga_service.send('Dashboard', 'dashboard_order_click');
                        break;

                      case 2:
                        ga_service.send('Dashboard', 'dashboard_shipment_click');
                        break;
                    }
                    $state.go(state, {}, {notify: true})
                };

                switch ($state.current.name) {
                  case 'app.dashboard-orders':
                    $scope.active = 1;
                    break;
                  case 'app.dashboard-shipment':
                    $scope.active = 2;
                    break;
                  case 'app.dashboard':
                    getAllData();
                    $scope.active = 0;
                    break;
                }

                // Get Date
                var startDate = moment().subtract(1, 'year');
                var endDate = moment();
                $scope.startDate = startDate.format('YYYY-MMM-DD');
                $scope.endDate = endDate.format('YYYY-MMM-DD');

            }

        }
    ])
})();


// To run this code, edit file index.html or index.jade and change
// html data-ng-app attribute from angle to myAppName
// ----------------------------------------------------------------------

(function() {
    'use strict';
    angular.module('multichannel').controller('rootController', rootController );
    rootController .$inject = ['$log', '$rootScope'];
    function rootController ($log, $rootScope) {     
        activate();
        ////////////////
        function activate() {

          $log.log('I\'m a line from custom.js');
        }
    }
})();
/**=========================================================
 * Module: tour.js
 =========================================================*/

(function() {
    'use strict';
    angular
        .module('multichannel')
        .controller('TourCtrl', TourCtrl);

    TourCtrl.$inject = ['$scope'];
    function TourCtrl($scope) {

        activate();

        ////////////////

        function activate() {
          // BootstrapTour is not compatible with z-index based layout
          // so adding position:static for this case makes the browser
          // to ignore the property
          var section = angular.element('.wrapper > section');
          section.css({'position': 'static'});
          // finally restore on destroy and reuse the value declared in stylesheet
          $scope.$on('$destroy', function(){
            section.css({'position': ''});
          });
        }
    }
})();

(function() {
    'use strict';

    angular.module('app.auth',[]).controller('authController',['$rootScope','$timeout', '$scope', '$state','$auth', 'authentication','Notify','$localStorage', '$sessionStorage' ,'AppService', '$stateParams', 'appConstant', 'SR_CONSTANTS', '$location', '$uibModal', 'ga_service', '$window', '$interval', 'loaderFactory', 'OneSignalFactory', '$cookies',
        function($rootScope, $timeout, $scope, $state, $auth, authentication, Notify, $localStorage, $sessionStorage, AppService, $stateParams, appConstant, SR_CONSTANTS, $location, $uibModal, ga_service, $window, $interval, loaderFactory, OneSignalFactory,$cookies)
        {

            $scope.showLogin = false;
            $scope.showShopifyConnect = true;
            $scope.under_maintenance = true;
            $scope.hasCouponCode=false;

            $scope.showRegistration = true;
            $scope.showEnterMobile = true;
            $scope.showotpVerify = true;
            $scope.isTokenExpired = false;
            $scope.verifyPhone = false;
            $scope.disableSignUp = false;
            $scope.ifOtpVerify = false;

            $rootScope.isLogged;

            $scope.registration =
            {
                'first_name': '',
                'last_name': '',
                'company_name': '',
                'email': '',
                'password': '',
                'otp':'',
                'mobile': '',
                'user_id': '',
                'referralCode' : $stateParams.rcode,
            }

            if($scope.registration.referralCode !== undefined && $scope.registration.referralCode !== 'true')
            {
                checkreferral($scope.registration.referralCode);
            }

            if($state.current.name  === 'auth.login' && $stateParams.under_maintenance == "true"){

                $scope.showLogin = true;
                $scope.showShopifyConnect = true;
                $scope.showRegistration = true;
                $scope.showEnterMobile = true;
                $scope.showotpVerify = true;
                $scope.under_maintenance = false;
                return;
            }

            function after_login(data){
                if(data.token){
                    $auth.setToken(data.token);
                    sendUserInfoToIntercom(data);
                    $localStorage.USER = data;
                    if($stateParams.connected == 1){
                        $localStorage.USER.from_shopify = true;
                        $localStorage.USER.order_fetched = false;
                    }

                    if(angular.isDefined(data.is_auto_accept_notification_seen) && data.is_auto_accept_notification_seen == 0 && !data.is_weight_dispute) {
                        AppService.get(SR_CONSTANTS.api_urls.billing_discrepancy, true)
                        .success(function(data) {
                            if(data.data.length) {
                                var modalInstance = $uibModal.open({
                                    animation: true,
                                    templateUrl: 'app/views/modals/accept_terms.html',
                                    controller: 'billingAutoPopupController',
                                    backdrop  : 'static',
                                    size: 'recharge'
                                })
                            }
                        })
                        .error(function(error) {
                            AppService.isAuth(error);
                        });
                    }

                    $rootScope.isBasicPlan = data.is_basic_plan;
                    $rootScope.toggleOff = !data.inventory_sync_status;
                    $rootScope.loginUser = data;

                    setUserContextForSentry($localStorage, SR_CONSTANTS);
                    redirectAfterLogin(data);
                }
            }


            if($state.current.name  === 'auth.login' && $stateParams.token !== undefined){
                loaderFactory.display("Please Wait!");
                //$scope.isPreloader = true;
                if($auth.isAuthenticated()){
                    $auth.logout();
                }

                if(angular.isDefined($stateParams.connected) && $stateParams.connected == 1){
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    $scope.showLogin = true;
                    $scope.showShopifyConnect = false;
                    $scope.showRegistration = true;
                    $scope.showEnterMobile = true;
                    $scope.showotpVerify = true;
                }

                AppService.post('auth/login/user', false, {token:$stateParams.token})
                    .success(function(data) {
                        after_login(data);
                    })
                    .error(function(data){
                        loaderFactory.hide();
                        //$scope.isPreloader = false;
                        Notify.alert(data.message);
                        if (data.email) {
                            $scope.registration.mobile = data.mobile;
                            $scope.registration.email = data.email;
                            $scope.registration.first_name = data.first_name;
                            $scope.registration.last_name = data.last_name;
                            $scope.registration.user_id = data.user_id;
                            if(!data.mobile){
                                $scope.showotpVerify = true;
                                $scope.showLogin = true;
                                $scope.showEnterMobile = false;
                            }else{
                                $scope.showEnterMobile = true;
                                $scope.showotpVerify = false;
                                $scope.showLogin = true;
                                $scope.resendOTP(data.user_id);
                            }
                        }
                        $scope.error = data;
                    });
            }

            if($state.current.name  == 'auth.login' && $auth.isAuthenticated())
            {
                $state.go('app.dashboard');
            }

            if($state.current.name  == 'auth.register')
            {
                if ($stateParams.log_id != undefined) {
                    if ($stateParams.log_id) {
                        AppService.get('external/open/log/' + $stateParams.log_id)
                            .success(function(data) {
                                $scope.error_data = data;
                                if (data.status != 0) {
                                    var data = "";
                                    var modalInstance = $uibModal.open({
                                        animation: true,
                                        templateUrl: 'app/views/modals/errorsMessage.html',
                                        size: 'recharge',
                                        scope: $scope,
                                        controller: 'genericModalController'
                                    })
                                }
                            })
                            .error(function(data) {

                            });
                    }
                }
            }

            if($state.current.url === '/logout')
            {
                window.Intercom("shutdown");
                $auth.logout();
                delete $localStorage.USER;
                delete $localStorage.channelErrorShown;
                delete window.localStorage.satellizer_token;
                setUserContextForSentry($localStorage, SR_CONSTANTS);
                $state.go('auth.login');
            }

            if($state.current.url === '/login' || $state.current.url === '/register'){
                window.Intercom("shutdown");
            }

            if($state.current.name  == 'auth.confirm')
            {
                var url =  SR_CONSTANTS.APIBaseUrl + 'users/' + $state.params.id +'/confirm/'+ $state.params.token;
                authentication.confirmRagistration(url)
                .success(function(data)
                {
                    $localStorage.USER = data;
                    $auth.setToken(data.token);
                    sendUserInfoToIntercom(data);

                    if(angular.isDefined(data.is_auto_accept_notification_seen) && data.is_auto_accept_notification_seen == 0 && !data.is_weight_dispute) {
                        AppService.get(SR_CONSTANTS.api_urls.billing_discrepancy, true)
                        .success(function(data) {
                            if(data.data.length) {
                                var modalInstance = $uibModal.open({
                                    animation: true,
                                    templateUrl: 'app/views/modals/accept_terms.html',
                                    controller: 'billingAutoPopupController',
                                    backdrop  : 'static',
                                    size: 'recharge'
                                })
                            }
                        })
                        .error(function(error) {
                            AppService.isAuth(error);
                        });
                    }

                    redirectAfterLogin(data.data);

                    if( typeof data.message != 'undefined' && data.message.length > 0 )
                    {
                        Notify.alert(data.message)
                        // window.Intercom("shutdown");
                        $auth.logout();
                        delete $localStorage.USER;
                        delete $localStorage.channelErrorShown;
                        delete window.localStorage.satellizer_token;
                        setUserContextForSentry($localStorage, SR_CONSTANTS);
                        $state.go('auth.login')
                    }

                })
                .error(function(error)
                {
                    $scope.isTokenExpired = true;

                    if( typeof error.message != 'undefined' && error.message.length > 0 )
                    {
                        Notify.alert(error.message)
                        window.Intercom("shutdown");
                        $auth.logout();
                        delete $localStorage.USER ;
                        delete window.localStorage.satellizer_token;
                        setUserContextForSentry($localStorage, SR_CONSTANTS);
                        $state.go('auth.login')
                    }
                })
            }

            var resetUrl = '';
            if($state.current.name  == 'auth.reset')
            {
               // $state.go('auth.login');
               resetUrl =  'users/' + $state.params.id +'/reset/'+ $state.params.token;
            }
            if($state.current.name  == 'app.userPage')
            {
               // $state.go('auth.login');
               resetUrl =  'users/' + $localStorage.USER.id +'/reset/'+ $localStorage.USER.token;
            }



            $scope.credential =
            {
                'email':'',
                'password': '',
            }
            var registeredData = '';

            $scope.checkCouponValidity = function (couponCode) {
                var data = {
                    'code' : couponCode
                }

                 AppService.post('coupons/check', true, data)
                .success(function(data)
                {
                    if (data.valid == true) {
                        $scope.couponValidity ='fa-check-circle text-success';
                        $scope.invalidCouponCode = false;
                    }
                    else{
                        $scope.couponValidity = 'fa-times-circle text-danger';
                    }
                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                })
            }

            $scope.isValid = true;

            function redirectAfterLogin(data){
              var toState = $stateParams.toState;
              var toParams = $stateParams.toParams;
              if(toState){
                  $state.go(toState,toParams);
              } else if (data.is_onboarding_complete) {
                if($stateParams.activate_charge == 1){
                  $state.go('app.dashboard', {paramData: $stateParams});
                } else {
                  $state.go('app.dashboard');
                }
              } else{
                  $state.go('app.welcome');
              }
            }

            $scope.login = function()
            {
                loaderFactory.display('Please Wait!')
                //$scope.isPreloader = true;
                if( $scope.credential.email == '' || $scope.credential.password == '')
                {
                    $scope.isValid = false;
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    return false;
                }

                var credentials = {
                    email:  $scope.credential.email,
                    password:  $scope.credential.password,
                    company_id: $stateParams.company_id
                };

                if ($stateParams.hasOwnProperty('shop') && $stateParams.shop != '') {
                    credentials.shopify = {
                        ids: $stateParams.ids,
                        shop: $stateParams.shop
                    };
                }

                $auth.login(credentials)
                .then(function(data)
                {
                    sendUserInfoToIntercom(data.data);
                    $localStorage.USER = data.data;

                    if(angular.isDefined(data.data.is_auto_accept_notification_seen) && data.data.is_auto_accept_notification_seen == 0 && !$localStorage.USER.is_weight_dispute) {
                        loaderFactory.display('Please Wait!');
                        AppService.get(SR_CONSTANTS.api_urls.billing_discrepancy, true)
                        .success(function(data) {
                            loaderFactory.hide();
                            if(data.data.length) {
                                var modalInstance = $uibModal.open({
                                    animation: true,
                                    templateUrl: 'app/views/modals/accept_terms.html',
                                    controller: 'billingAutoPopupController',
                                    backdrop  : 'static',
                                    size: 'recharge'
                                })
                            }
                        })
                        .error(function(error) {
                            AppService.isAuth(error);
                            loaderFactory.hide();
                        });
                    }

                    OneSignalFactory.set_login_tags(data.data.plan_id);

                    var date_diff = Math.round(moment.duration(moment().diff($localStorage.USER.created_at.date)).asDays()); //date diff between current date and user's signup date
                    
                    //window variables for whatfix personalization
                    window.seller_var = {
                        first_name : $localStorage.USER.first_name,
                        plan_id : $localStorage.USER.plan_id,
                        company_id : $localStorage.USER.company_id,
                        signup_date : date_diff
                    };
                    
                    $rootScope.isBasicPlan = data.data.is_basic_plan;
                    $rootScope.toggleOff = !data.data.inventory_sync_status;
                    $rootScope.loginUser = data.data;
                    setUserContextForSentry($localStorage, SR_CONSTANTS);
                    redirectAfterLogin(data.data);
                    loaderFactory.hide();
                })
                .catch(function(response)
                {
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    if (response.data && response.data.email) {
                        $scope.registration.mobile = response.data.mobile;
                        $scope.registration.email = response.data.email;
                        $scope.registration.first_name = response.data.first_name;
                        $scope.registration.last_name = response.data.last_name;
                        $scope.registration.user_id = response.data.user_id;
                        if(!response.data.mobile){
                            $scope.showotpVerify = true;
                            $scope.showLogin = true;
                            $scope.showEnterMobile = false;
                        }else{
                            $scope.showEnterMobile = true;
                            $scope.showotpVerify = false;
                            $scope.showLogin = true;
                            $scope.resendOTP(response.data.user_id);
                        }
                    }
                    $scope.error = response.data;
                });
            }

            $scope.backLogin = function()
            {
                $scope.credential =
                    {
                        'email':'',
                        'password': '',
                    }
                $scope.showotpVerify = true;
                $scope.showEnterMobile = true;
                $scope.showLogin = false;
                $scope.error = false;
                $('.validation-alert').remove();
            }

            $scope.register = function()
            {
                // ga('send', 'event', 'signup', 'signup');

                delete $localStorage.USER ;

                loaderFactory.display('Please Wait')
                //$scope.isPreloader = true;
                $('.validation-alert').remove();
                $('.disble-create').prop('disabled',true);

                var user =
                {
                    'first_name': $scope.registration.first_name,
                    'last_name': $scope.registration.last_name,
                    'company_name': $scope.registration.company_name,
                    'email': $scope.registration.email,
                    'password': $scope.registration.password,
                    'coupon_code' : $scope.couponCode,
                    'gclid' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').gclid : '',
                    'utm_source' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').utm_source : '',
                    'utm_campaign' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').utm_campaign : '',
                    'utm_content' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').utm_content : '',
                    'utm_medium' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').utm_medium : '',
                    'utm_term' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').utm_term : '',
                    'rcode': $scope.registration.referralCode !== undefined ? $scope.registration.referralCode : ''
                }
                $auth.signup(user)
                .then(function(response)
                {
                    //GA EVENT On SIGNUP
                    //ga('send', 'event', 'filledform', 'signupsuccess', $scope.registration.email);
                    //goog_report_conversion('https://app.shiprocket.in/register');
                    fbq('track', 'Lead');
                    // ga_service.send_with_newEmail('filledform', 'signupsuccess', $scope.registration.email);
                    ga_service.send('Lead', 'Sign up Success', $scope.registration.email)

                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    registeredData = response.data;
                    $('.disble-create').prop('disabled',false);
                    $scope.showRegistration = false;
                    $scope.showEnterMobile = false;
                    $scope.showotpVerify = true;

                    OneSignalFactory.set_otp_not_verified_tags();
                })
                .catch(function(response)
                {
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    $('.disble-create').prop('disabled',false);
                    if(response.status == 422)
                    {

                        $scope.invalidCouponCode = response.data.errors.coupon_code? response.data.errors.coupon_code[0]: false;
                        var errorObj = response.data.errors;
                        AppService.alertValidation(errorObj);
                    }
                    else
                    {
                        Notify.alert(response.data.message);
                    }
                });
            };

            $scope.validateMobile = function()
            {
                var phoneno = /^\d{10}$/;
                if(phoneno.test($scope.registration.mobile)){
                    $('.disable-send-otp').prop('disabled',false);
                } else {
                    $('.disable-send-otp').prop('disabled',true);
                    return false;
                }
            }

            $scope.preventKeypress = function(evt){
                if (evt.which < 48 || evt.which > 57){
                    evt.preventDefault();
                    return false;
                }
            }

            var isChangeMobile = false;
            //SEND OTP
            $scope.sendOTP = function(userId){
                if (userId == undefined) {
                    userId = registeredData.id;
                }
                loaderFactory.display('Please Wait');
                //$scope.isPreloader = true;
                $('.validation-alert').remove();
                var url = '/otp/send';
                $('.disable-send-otp').prop('disabled',true);
                var data =
                {
                    mobile: $scope.registration.mobile
                }

                if(isChangeMobile)
                {
                    url = '/mobile/change';
                }

                AppService.post('auth/' +userId+ url, true, data)
                .success(function(data)
                {
                    loaderFactory.hide();
                    ga_service.send('OTP', 'Clicked on Send Verification')
                    //$scope.isPreloader = false;
                    $('.disable-send-otp').prop('disabled',false);
                    $scope.showEnterMobile = true;
                    $scope.showotpVerify = false;
                })
                .error(function(error)
                {
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    $('.disable-send-otp').prop('disabled',false);
                    if(error.status_code == 422)
                    {
                        AppService.alertValidation(error.errors);
                    }
                    else
                    {
                        AppService.isAuth(error);
                    }
                });
            }

            // OTP Verify
            $scope.otpverify = function(userId)
            {
                if (userId == undefined) {
                    userId = registeredData.id;
                }
                loaderFactory.display('Please Wait')
                //$scope.isPreloader = true;
                $( "input").addClass('ng-valid').removeClass('ng-invalid');
                $('.validation-alert').remove();
                $('.disble-verify-otp').prop('disabled',true);
                if(!$scope.registration.otp)
                {
                    $('.disble-verify-otp').prop('disabled',false);
                    Notify.alert('Please Enter OTP');
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    return false;
                }

                var data =
                {
                    otp: $scope.registration.otp
                }
                AppService.post('users/' +userId+ '/confirm/otp', true, data)
                .success(function(data){
                    //google adword code call
                    //AppService.goog_report_conversion("964219477", "nB3ZCLLqxmwQ1aTjywM")

                    //GA EVENT FOR OTPVERIFIED
                    //ga('send', 'event', 'verifiedotp', 'accountcreated', $scope.registration.email);
                    fbq('track', 'CompleteRegistration');
                    // ga_service.send_with_newEmail('verifiedotp', 'accountcreated', $scope.registration.email);
                    ga_service.send('OTP', 'Clicked on OTP verified')

                    OneSignalFactory.set_lite_seller_tags();

                    $scope.ifOtpVerify = true;
                    sendUserInfoToIntercom(data);
                    delete $localStorage.USER;
                    delete $localStorage.channelErrorShown;

                    $rootScope.loginUser = data;
                    $localStorage.USER = data;

                    angular.element(document).ready(function () { //

                        if(angular.isDefined(data.is_auto_accept_notification_seen) && data.is_auto_accept_notification_seen == 0 && !$localStorage.USER.is_weight_dispute) {
                            loaderFactory.display('Please Wait')
                            AppService.get(SR_CONSTANTS.api_urls.billing_discrepancy, true)
                                .success(function(data) {
                                    loaderFactory.hide();
                                    //$scope.isPreloader = false;
                                    if(data.data.length) {
                                        var modalInstance = $uibModal.open({
                                            animation: true,
                                            templateUrl: 'app/views/modals/accept_terms.html',
                                            controller: 'billingAutoPopupController',
                                            backdrop  : 'static',
                                            size: 'recharge'
                                        })
                                    }
                                })
                                .error(function(error) {
                                    AppService.isAuth(error);
                                });
                        }

                    });

                    $rootScope.isBasicPlan = data.is_basic_plan;
                    $rootScope.toggleOff = !data.inventory_sync_status;
                    setUserContextForSentry($localStorage, SR_CONSTANTS);
                    $auth.setToken(data.token);
                    $('.disble-verify-otp').prop('disabled',false);
                    var toState = $stateParams.toState;
                    var toParams = $stateParams.redirect_params;
                    if(toState){
                        $state.go(toState,toParams);
                    } else {
                        ga_service.send('Sign up succesful', 'Store Created')
                        $state.go('app.welcome');
                    }
                })
                .error(function(error)
                {
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    $('.disble-verify-otp').prop('disabled',false);
                    if(error.status_code == 422)
                    {
                         AppService.alertValidation(error.errors);
                    }
                    else
                    {
                        AppService.isAuth(error);
                    }
                });
            }

            // Mobile No. Update
            $scope.changeMobile = function()
            {
                ga_service.send('OTP','Clicked on Change phone number')
                $scope.showEnterMobile = false;
                $scope.showotpVerify = true;
                isChangeMobile = true;
                $scope.registration.mobile = '';
                $scope.registration.otp = '';
                $('.disable-send-otp').prop('disabled',true);
                $( "input").addClass('ng-valid').removeClass('ng-invalid');
            }

            // Resent OTP Message
            $scope.resendOTP = function (userId)
            {
                if (userId == undefined) {
                    userId = registeredData.id;
                }
                loaderFactory.display('Please Wait');
                //$scope.isPreloader = true;
                $('.validation-alert').remove();
                $('.disable-resend-otp').prop('disabled',true);
                AppService.get('auth/' +userId+ '/otp/resend', true)
                .success(function(data)
                {
                    ga_service.send('OTP', 'Clicked on Resend phone number')
                    Notify.alert('OTP resent successfully');
                    $('.disable-resend-otp').prop('disabled',false);
                    $scope.showEnterMobile = true;
                    $scope.showotpVerify = false;
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                })
                .error(function(error)
                {
                    $('.disable-resend-otp').prop('disabled',false);
                    if(error.status_code == 422)
                    {
                        Notify.alert(error.errors.mobile[0]);
                    }
                    else
                    {
                        AppService.isAuth(error);
                    }
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                });
            }

            $scope.recover =
            {
                email:''
            }

            $scope.recoveryData =
            {
                email : '',
                mobile : '',
                user_id : '',
                data : ''
            };

            $scope.displayData = $stateParams.recoveryData;

            // Forget password
            $scope.forgotPassword = function()
            {
                let data = {
                    data: $scope.recover.data
                };

                loaderFactory.display('Please wait');

                AppService.post('auth/forgot/password', true, data)
                .success(function(data) {
                    $scope.recoveryData.email = data.email;
                    $scope.recoveryData.mobile = data.mobile;
                    $scope.recoveryData.user_id = data.id;
                    $scope.recoveryData.data = $scope.recover.data;

                    loaderFactory.hide();

                    $state.go('auth.recoveryotp', {recoveryData : $scope.recoveryData});
                })
                .error(function(error) {
                    loaderFactory.hide();
                    if (error.status_code == 400) {
                        Notify.alert('Given email/phone number is not registered.');
                    } else {
                        AppService.isAuth(error);
                    }
                });
            };

            //Resend OTP | forget Password
            $scope.forgotPasswordResendOtp = function()
            {
                let data = {
                    data: $scope.displayData.mobile
                };

                loaderFactory.display('Please wait');

                AppService.post('auth/forgot/password', true, data)
                .success(function(data) {
                    $scope.recoveryData.email = data.email;
                    $scope.recoveryData.mobile = data.mobile;
                    $scope.recoveryData.user_id = data.id;
                    $scope.recoveryData.data = $scope.recover.data;

                    loaderFactory.hide();

                    Notify.alert('OTP sent to '+ data.email+'and '+data.mobile);

                   // $state.go('auth.recoveryotp', {recoveryData : $scope.recoveryData});
                })
                .error(function(error) {
                    loaderFactory.hide();
                    if (error.status_code == 400) {
                        Notify.alert('Given email/phone number is not registered.');
                    } else {
                        AppService.isAuth(error);
                    }
                });
            };


            $scope.forgotPasswordOtp = function () {

                if (!$scope.hasOwnProperty('recovery')) {
                    Notify.alert('Invalid OTP');
                    return;
                }

                let postData = {
                    data: $scope.displayData.data,
                    otp: $scope.recovery.otp
                };

                loaderFactory.display("Please wait!");

                AppService.post('users/reset/otp/confirm', true, postData)
                .success(function(data) {
                    loaderFactory.hide();
                    $state.go('auth.reset', {paramData : postData});
                })
                .error(function(error) {
                    loaderFactory.hide();
                    Notify.alert('Invalid OTP');
                });
            };

            $scope.resetPassword = function()
            {
                AppService.post('/users/3/reset/', true, data)
                .success(function(data)
                {
                    Notify.alert("Please check you email to recover password");
                    $state.go('auth.login');
                })
                .error(function(error)
                {
                    if(error.status_code == 400)
                    {
                        Notify.alert('Email not registered');
                    }
                    else
                    {
                        AppService.isAuth(error);
                    }
                });

            }

            $scope.password ={
                newPassword: '',
                repeatPassword: ''
            }
            $scope.changePassword = function()
            {
                $('.validation-alert').remove();
                var data = {
                    password: $scope.password.newPassword,
                    password_confirm: $scope.password.repeatPassword,
                    data: $stateParams.paramData.data,
                    otp: $stateParams.paramData.otp
                };

                loaderFactory.display('Please wait');

                AppService.post('users/password/reset', true, data)
                .success(function(data)
                {
                    loaderFactory.hide();
                    Notify.alert("Password reset successfully");
                    $state.go('auth.login');
                })
                .error(function(error)
                {
                    loaderFactory.hide();
                    if(error.status_code == 422)
                    {
                        AppService.alertValidation(error.errors);
                    }
                    else
                    {
                        AppService.isAuth(error);
                    }
                });
            }

            function sendUserInfoToIntercom(data)
            {
                var intercomData = {};
                if( window.location.origin == 'https://app.shiprocket.in' )
                {
                    intercomData.app_id = appConstant.intercomProductionID;
                }
                else
                {
                    intercomData.app_id = appConstant.intercomDevelopmentID;
                }
                intercomData.first_name = data.first_name;
                intercomData.last_name = data.last_name;
                intercomData.email = data.email;
                intercomData.created_at = data.created_at;
                window.Intercom("boot", intercomData);
                //intercom code to send user info end
            }

            $scope.signUpClick = function(){
              var utm = {
                'gclid' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').gclid : '',
                'utm_source' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').utm_source : '',
                'utm_campaign' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').utm_campaign : '',
                'utm_content' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').utm_content : '',
                'utm_medium' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').utm_medium : '',
                'utm_term' : angular.isDefined($cookies.getObject('UTM')) ? $cookies.getObject('UTM').utm_term : '',
              }
              ga_service.send('Lead','Clicked on Sign up for free')
            }

            $scope.socialLogin = function(provider) {
                loaderFactory.display('Please Wait');
                //$scope.isPreloader = true;
                $auth.authenticate(provider)
                    .then(function(data) {
                        data = data.data;

                        if(provider === 'facebook')
                        {
                            google_conversion('5vOBCIeKg3wQ1aTjywM');
                        }
                        else if(provider === 'google')
                        {
                            google_conversion('WOGJCKjeh3wQ1aTjywM');
                        }

                        if(angular.isDefined(data.otp_confirmed) && !data.otp_confirmed){
                            $scope.registration.first_name = data.first_name;
                            $scope.registration.last_name = data.last_name;
                            $scope.registration.company_name = data.company_name;
                            $scope.registration.email = data.email;
                            $scope.registration.mobile = data.mobile;
                            $scope.registration.user_id = data.user_id;
                            loaderFactory.hide();
                            //$scope.isPreloader = false;
                            registeredData = data;
                            registeredData.id = data.user_id;
                            $('.disble-create').prop('disabled',false);
                            if(!data.mobile || data.mobile == ""){
                                $scope.showotpVerify = true;
                                $scope.showLogin = true;
                                $scope.showRegistration = false;
                                $scope.showEnterMobile = false;
                            }else{
                                $scope.showRegistration = false;
                                $scope.showEnterMobile = true;
                                $scope.showotpVerify = false;
                                $scope.showLogin = true;
                                $scope.resendOTP(data.user_id);
                            }
                        }else if(angular.isDefined(data.token)){
                            after_login(data);
                            OneSignalFactory.set_login_tags(data.data.plan_id);
                        }
                    },
                    function(data){
                        if(data.data)
                        {
                         AppService.isAuth(data.data);
                        }
                        loaderFactory.hide();
                        //$scope.isPreloader = false;
                    })
            };

            function google_conversion (trackCode)
            {
                var w = window;
                w.google_conversion_id = 964219477;
                w.google_conversion_language = "en";
                w.google_conversion_format = "3";
                w.google_conversion_color = "ffffff";
                w.google_conversion_label = trackCode;
                w.google_remarketing_only = false;
                var opt = new Object();
                opt.onload_callback = function() {

                };
                var conv_handler = window['google_trackConversion'];
                if (typeof(conv_handler) == 'function') {
                    conv_handler(opt);
                }
            }

            function checkreferral(referralCode)
            {
                AppService.get(SR_CONSTANTS.api_urls.checkReferralCode+'?rcode='+referralCode, true)
                .success(function(data){

                })
                .error(function(error){
                    Notify.alert(error.message, {status: 'danger'});
                })
            }

            $scope.$watch(function() { return $scope.registration.referralCode }, function (newVal) {
                if(newVal !== undefined && newVal !== 'true')
                {
                    $location.search("rcode", newVal);
                    checkreferral(newVal);
                }
            });
        }
    ])
})();

(function() {
    'use strict';
    angular.module('app.auth').factory('authentication', ['$http', 
    	function ( $http )
	    {
		    var confirmRagistration  = function(url)
		    {
		    	return $http.get(url ,{
		    	});
		    }

		    return {
		    	confirmRagistration: confirmRagistration
		    }
	    }
	])
})();
(function () {
    'use strict';
    angular.module('app.report').controller('calculatorController', calculatorController);
    calculatorController.$inject = ['$rootScope', '$scope', 'AppService', '$state', '$stateParams', 'Notify', 'loaderFactory', '$localStorage'];
    function calculatorController($rootScope, $scope, AppService, $state, $stateParams, Notify, loaderFactory, $localStorage) {
        activate();
        ////////////////
        function activate()
        {
            if($state.current.url === '/calulator'){
                window.Intercom("shutdown");
            }

            $scope.rateCal =
            {
                pickupCode : '',
                deliveryCode : '',
                weight : '0.5',
                declaredValue : '',
                plan_id: undefined
            };
            $scope.dimension={
                l:undefined,
                b:undefined,
                h:undefined
            };
            $scope.volumetric_weight = null;

            $scope.codOption = [
                {   'Name':'No', 'Value': 0 }, {   'Name':'Yes', 'Value': 1 }
            ];

            $scope.isCod={
                selected: $scope.codOption[0]
            };

            $scope.message = undefined;
            $scope.PlansWiseRate='';
            $scope.rateCalCopy = '';
            $scope.isCodCopy = '';
            $scope.zone = '';

            var directPath;
            var marker;
            var directCoords;
            var position;
            var gmarkers = [];

            var directionsDisplay;
            var directionsService = new google.maps.DirectionsService();
            var map;
            var geocoder;
            var geocoder2;
            var map2;
            var directionsDisplay2;
            $scope.initMapDomestic = function() {


                geocoder = new google.maps.Geocoder();
                directionsDisplay = new google.maps.DirectionsRenderer();
                var delhi = new google.maps.LatLng(28.6315, 77.2167);
                var mapOptions = {
                    zoom: 10,
                    center: delhi
                };
                map = new google.maps.Map(document.getElementById('map-domestic'), mapOptions);
                directionsDisplay.setMap(map);
                setTimeout(function(){
                    google.maps.event.trigger(map, 'resize');
                }, 50);
            };

            $scope.calculateRate = function(){
               $('.validation-alert').remove();
                $('.message').remove();
               if ($scope.rateCal.weight == undefined) {
                    Notify.alert("Weight should be positive and maximum till 3 decimal places");
                    return false;
                }
                var no_of_ones = 0;
                if ($scope.dimension.l < 0.5) {
                    no_of_ones++;
                }
                if ($scope.dimension.b < 0.5) {
                    no_of_ones++;
                }
                if ($scope.dimension.h < 0.5) {
                    no_of_ones++;
                }
                if (no_of_ones >= 1) {
                    Notify.alert("Dimension should be greater than 0.5 x 0.5 x 0.5.");
                    return false;
                }
                else{no_of_ones = 0;}
                loaderFactory.display("Processing Your Request. Please Wait!");
                $scope.rateCalCopy = angular.copy($scope.rateCal);
                $scope.isCodCopy = angular.copy($scope.isCod);
               AppService.get( 'open/courier/serviceability?pickup_postcode='+$scope.rateCal.pickupCode+'&delivery_postcode='+$scope.rateCal.deliveryCode+'&length='+$scope.dimension.l+'&breadth='+$scope.dimension.b+'&height='+$scope.dimension.h+'&weight='
                +$scope.rateCal.weight+'&cod='+$scope.isCod.selected.Value+'&declared_value='+$scope.rateCal.declaredValue)
                .success(function (data)
                {
                    function removeMarkers()
                    {
                        for(var i=0; i<gmarkers.length; i++)
                        {
                            gmarkers[i].setMap(null);
                        }
                    }

                    if (typeof(directPath) != 'undefined')
                    {
                        directPath.setMap(null);
                        directCoords = [];
                        position = null;
                        removeMarkers();
                        gmarkers = [];
                    }
                    var start = $scope.rateCal.pickupCode + ', India';
                    var end = $scope.rateCal.deliveryCode + ', India';
                    var request = {
                        origin: start,
                        destination: end,
                        travelMode: 'DRIVING'
                    };
                    if(data.status == 200)
                    {
                        $scope.PlansWiseRate = data.data.rates;
                        $scope.zone = data.data.available_courier_companies.zone;
                        directionsService.route(request, function(response, status) {
                            if (status == google.maps.DirectionsStatus.OK) {
                                var startPoint = response.routes[0].legs[0].start_location;
                                var endPoint = response.routes[0].legs[0].end_location;
                                directCoords = [
                                    {lat: startPoint.lat(), lng: startPoint.lng()},
                                    {lat: endPoint.lat(), lng: endPoint.lng()}
                                ];
                                directPath = new google.maps.Polyline({
                                    path: directCoords,
                                    geodesic: true,
                                    strokeColor: '#FF0000',
                                    strokeOpacity: 0.5,
                                    strokeWeight: 2
                                });

                                var latlngbounds = new google.maps.LatLngBounds();
                                for (var i = 0; i < directCoords.length; i++) {
                                    latlngbounds.extend(directCoords[i]);
                                    position = new google.maps.LatLng(directCoords[i].lat, directCoords[i].lng);
                                    marker = new google.maps.Marker({
                                        position: position,
                                        map: map,
                                        animation: google.maps.Animation.DROP
                                    });
                                    gmarkers.push(marker);
                                }

                                directPath.setMap(map);
                                map.fitBounds(latlngbounds);
                            } else {
                                console.log("Directions Request failed: " + status);
                            }
                        });
                    }

                    loaderFactory.hide();
                    if(data.status == 404)
                    {
                        $scope.PlansWiseRate = ''
                        $scope.message = data.message;
                        Notify.alert(data.message, {status: 'danger'});
                    }
                })
                .error(function(error)
                {   $scope.PlansWiseRate = ''
                    $scope.rateCalCopy = '';
                    loaderFactory.hide();
                    if(error.status_code == 422)
                    {
                        AppService.alertValidation(error.errors);
                    }
                    else
                    {
                        AppService.isAuth(error);
                    }
                })
            }


            $scope.calculated_volumetric_weight = function(){
                var tot = Number($scope.dimension.l) * Number($scope.dimension.b) * Number($scope.dimension.h);
                $scope.volumetric_weight = tot/5000;
            };

        }
    }
})();

(function () {
    'use strict';
    angular.module('app.report').controller('ndrReasonController', ndrReasonController);

    ndrReasonController.$inject = ['$scope','$rootScope','AppService', '$state', '$stateParams', 'Notify'];

    function ndrReasonController($scope, $rootScope, AppService, $state, $stateParams, Notify) {


        activate($stateParams.token);
      
        function activate(token) {

            $scope.all_status = ["SRNDR1","SRNDR2","SRNDR3","SRNDR4","SRNDR5","SRNDR6","SRNDR7","SRNDR8","SRNDR9"];
            $scope.data = {};
            //$scope.status_page = {"SRNDR1":}

            //console.log($stateParams);

            if(token != undefined && token != '' && $stateParams.awb_id != undefined && $stateParams.awb_id != '') {
                console.log($state.current.name);
                
                /*if($state.current.name == 'auth.ndrReasons') {
                    $rootScope.status = 'srndr2';
                } else {
                    $rootScope.status = 'srndr1';
                }
                console.log($state.current.name);
                console.log($state);
                console.log($rootScope.status);

                if($rootScope.status == 'srndr2') {
                    console.log('condition...');
                    console.log($rootScope.status);
                    //$state.params.token = token;
                   // $state.go("auth.ndrReasons1",{'token':token});
                }*/

                //auth.ndrReasons4

                $scope.validateRequest = validateRequest;
                if($rootScope.ndr_map_code == undefined) {
                    console.log($rootScope.ndr_map_code);
                    $scope.validateRequest($stateParams.awb_id,token,processRequest);
                }
               
            } else {
                console.log($state.current.name);
                console.log('NO TOKEN');
            }
        }


        function processRequest(data,awb_id,token) {

            if(!!data) {
                if(data.is_valid  && !data.redirect) { 
                    
                   // console.log(data.data.ndr_map_code);
                   //var ndr_reason_code = data.data.ndr_map_code;
                   var ndr_reason_code = 'SRNDR2';
                    if(data.data.ndr_map_code != null && $scope.all_status.indexOf(ndr_reason_code) != -1) {

                        var index = $scope.all_status.indexOf(ndr_reason_code);
                        $scope.data = data;

                        $rootScope.ndr_map_code = ndr_reason_code;
                        if(index != 0) {
                            //$state.go("auth.ndrReasons"+index,{'token':token});
                            $state.go("auth.ndrReasons",{'token':token,'index':index});
                        }
                       
                    }
                }
            }
        }


        function validateRequest(awb_id,token,response) {

            var  api_url = 'tracking/ndr-action/'+awb_id+'?token='+token;
            $scope.isPreloader = true;

            AppService.get( api_url , true)
            .success(function(data){
                $scope.isPreloader = false;
                response(data,awb_id,token);
            })
            .error(function(error){
                AppService.isAuth(error);
            });
        }
    }
})();


(function () {
    'use strict';
    angular.module('app.report').controller('trackingMailerController', trackingMailerController);

    trackingMailerController.$inject = ['$scope', 'AppService', '$state', '$stateParams', 'Notify'];

    function trackingMailerController($scope, AppService, $state, $stateParams, Notify) {
        activate();
        function activate(){
            olark('api.box.hide');
            $scope.showTrack = 0;
            let requestUrl = 'tracking/'+$stateParams.id;
            if($stateParams.coid){
                requestUrl = requestUrl+'?coid='+$stateParams.coid;
            }
            AppService.get(requestUrl)
            .success(function (data)
            {
                var data = data.tracking_data;
                $scope.shippingDetails = data.shipment_track;
                $scope.track_status = data.track_status;
                $scope.companyInfo =
                {
                  company_logo : data.company_logo,
                  company_name : data.company_name
                }
                $scope.message = data.error;
                $scope.shipped = false;
                $scope.inTrisit = false;
                $scope.outForDelivery = false;
                $scope.delivered = false;
                $scope.rto_Initiated = false;
                $scope.rto_Delivered = false;
                if( data.track_status == 0)
                {
                    //Notify.alert(data.error);
                    return false;
                }
               $scope.activity = data.shipment_track_activities;
               $scope.status= data.shipment_status;
               switch ($scope.status) {
                 case 6:
                  $scope.shipped = true;
                  $scope.inTrisit = false;
                  $scope.delivered = false;
                  $scope.outForDelivery = false;
                  break;

                 case 7:
                  $scope.inTrisit = true;
                  $scope.shipped = true;
                  $scope.outForDelivery = true;
                  $scope.delivered = true;
                  break;

                 case 9:
                  $scope.shipped = true;
                  $scope.rto_Initiated = true;
                  $scope.rto_Delivered = false;
                  break;

                 case 10:
                  $scope.shipped = true;
                  $scope.rto_Initiated = true;
                  $scope.rto_Delivered = true;
                  break;

                 case 17:
                  $scope.inTrisit = true;
                  $scope.shipped = true;
                  $scope.outForDelivery = true;
                  $scope.delivered = false;
                  break;

                 case 18:
                  $scope.inTrisit = true;
                  $scope.shipped = true;
                  $scope.outForDelivery = false;
                  $scope.delivered = false;
                  break;

                 case 21:
                  $scope.shipped = true;
                  $scope.inTrisit = true;
                  $scope.outForDelivery = true;
                  $scope.delivered = false;
                  break;

                 default:
                  $scope.shipped = false;
                  $scope.inTrisit = false;
                  $scope.delivered = false;
                  $scope.outForDelivery = false;

               }
               $scope.showTrack = $scope.rto_Initiated==true?2:1;
               animate_start();

            })
            .error(function(error){
                $scope.isPreloader = false;
                loaderFactory.hide();
                AppService.isAuth(error);
            })



        }


        function animate_start(){
            if($scope.showTrack == 2){
                if(window.performance.navigation.type != 1){  //new window instance
                    setTimeout(function(){
                        $(".shipped.active").addClass("rotY");
                    }, 800);
                    setTimeout(function(){
                        $('.strip.active').addClass('anim');
                    },1800);
                    setTimeout(function(){
                        $(".rto-initiated.active").addClass("rotY");
                    }, 3000);
                    setTimeout(function(){
                        $('.strip2.active0').addClass('anim');
                    }, 4800);
                    setTimeout(function(){
                        $(".rto-delivered.active").addClass("rotY");
                    }, 5400);
                }
                else{   //page reloaded!
                    setTimeout(function(){
                        $(".shipped.active").addClass("gbg");
                        $('.strip.active').addClass('gbg');
                        $(".rto-initiated.active").addClass("gbg");
                        $('.strip2.active0').addClass('gbg');
                        $(".rto-delivered.active").addClass("gbg");
                    }, 2400);
                }
            }else if($scope.showTrack == 1) {
                if (window.performance.navigation.type != 1) {  //new window instance
                    setTimeout(function () {
                        $(".shipped.active").addClass("rotY");
                    }, 800);
                    setTimeout(function () {
                        $('.strip.active').addClass('anim');
                    }, 1800);
                    setTimeout(function () {
                        $(".transit.active").addClass("rotY");
                    }, 3000);
                    setTimeout(function () {
                        $('.strip2.active0').addClass('anim');
                    }, 3600);
                    setTimeout(function () {
                        $(".ofd.active").addClass("rotY");
                    }, 4800);
                    setTimeout(function () {
                        $(".strip3.active0").addClass("anim");
                    }, 5400);
                    setTimeout(function () {
                        $(".delivered.active").addClass("rotY");
                    }, 6600);
                }
                else {   //page reloaded!
                    setTimeout(function () {
                        $(".shipped.active").addClass("gbg");
                        $('.strip.active').addClass('gbg');
                        $(".transit.active").addClass("gbg");
                        $('.strip2.active0').addClass('gbg');
                        if($scope.status != 21){
                          $(".ofd.active").addClass("gbg");
                        } else {
                          $(".ofd.active").addClass("red");                          
                        }
                        $('.strip3.active0').addClass('gbg');
                        $(".delivered.active").addClass("gbg");
                    }, 2400);
                }
            }
        }
    }
})();

/**=========================================================
 * Module: messageController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('messageController', messageController);
    messageController.$inject = ['$rootScope','items',  '$scope', 'AppService',  '$state', 'Notify', '$uibModalInstance'];
    function messageController($rootScope, items, $scope, AppService, $state, Notify, $uibModalInstance)
    {
        activate();
        function activate()
        {   
            setTimeout(function() {
                $('.message').html("<div> order have been sucessfully manifested and pickup have been scheduled for today </br></div>");
            }, 1000);
            
            // $scope.isPreloader = true;
            // AppService.post('manifests/generate', true, items.data)
            // .success(function(data)
            // {   
            //     $state.go($state.current, {}, {reload: true});
            //     // $scope.isPreloader = false;
            //     if(data.manifested.total === items.count && items.count >1)
            //     {   
            //         $('.message').html('<div>All '+ items.count + ' orders have been sucessfully manifested and pickup have been scheduled for today </br></div>');
            //     }
            //     else if(data.manifested.total === items.count && items.count <2)
            //     {   
            //         $('.message').html('<div> order have been sucessfully manifested and pickup have been scheduled for today </br></div>');
            //     }
            //     else if(data.manifested.total)
            //     {   
            //         $('.message').html('<div>'+ data.manifested.total+'orders have been sucessfully manifested and pickup have been scheduled for today Unable to create manifest for ' +data.not_manifested.total +' orders due to error. </div>') ;
            //         // Notify.alert( data.manifested.total+'orders have been sucessfully manifested and pickup have been scheduled for <today.> Unable to crete manifest for ' +data.not_manifested.total +' orders due to error. ANNotify.alert("All <5>otify.alert("All <5>ll <5>')
            //         // $state.go('app.manifests', {'type': 'open'});
            //     }
            //     else if(!data.manifested.total)
            //     {
            //         $('.message').html('<div>Unable to create manifest for '+ items.count +' orders due to error.</div>');
            //     }


            // })
            // .error(function(error) 
            // {   
            //     $uibModalInstance.dismiss('cancel');
            //     $scope.isPreloader = false;
            //     AppService.isAuth(error);
            // })
        }

        $scope.closeModal = function()
        {
            $uibModalInstance.dismiss('cancel');
            $("input[type='checkbox']").attr('checked', false);
        }
    }
})();
/**=========================================================
 * Module: addOrderController
   ===================================================*/
;(function(angular){
    'use strict';

    angular
    .module('app.orders')
    .controller('addOrderController', addOrderController);

    addOrderController.$inject = ['$rootScope', '$stateParams' , '$scope', 'AppService', 'ga_service',  '$state', 'Notify', '$uibModal', '$compile', '$localStorage', 'loaderFactory', 'SR_CONSTANTS'];

    function addOrderController($rootScope, $stateParams ,$scope,AppService,ga_service, $state, Notify, $uibModal, $compile, $localStorage, loaderFactory, SR_CONSTANTS){
        if($localStorage.USER){
          activate();
        }

        function activate(){
            var index = 1;
            var rowIndexArry = [0];
            $scope.grand_total = 0;
            $scope.addOrder = addOrder;
            $scope.resetValue = resetValue;
            $scope.getProduct = getProduct;
            $scope.backHistory = backHistory;
            $scope.updateTotals = updateTotals;
            $scope.getStateList = getStateList;
            $scope.updateGrandTotal = updateGrandTotal;
            $scope.removeProductRow = removeProductRow;
            $scope.addNewProductRow = addNewProductRow;
            $scope.addPickupLocation = addPickupLocation;
            $scope.getPincodeDetails = getPincodeDetails;
            $scope.calculated_volumetric_weight = calculated_volumetric_weight;

            function getPincodeDetails(pincode, type){
              if(pincode == null || (type == 'billing' && $scope.orderDetail.billing_country.id != 99)){
                return;
              }

              if(pincode == null || (type == 'shipping' && $scope.orderDetail.shipping_country.id != 99)){
                return;
              }

              if (pincode.toString().length != 6) {
                $scope.orderDetail.billing_city = '';
                $scope.orderDetail.shipping_city = '';
                $scope.orderDetail.billing_state = $scope.billingStateList[0]
                $scope.orderDetail.shipping_state = $scope.shippingStateList[0]
                $scope.billing_freeze = false;
                $scope.shipping_freeze = false;
                return;
              }

              loaderFactory.display('Fetching Location Details.')
              AppService.get('external/open/postcode/details?postcode='+pincode, false)
              .success(function(data){
                var city = data.postcode_details.city;
                switch (type) {
                  case 'billing':
                    $scope.orderDetail.billing_city = city;
                    $scope.orderDetail.billing_state = $scope.billingStateList.filter(function(state){
                      return state.code == data.postcode_details.state_code;
                    })[0];
                    $scope.billing_freeze = true;
                    break;
                  case 'shipping':
                    $scope.orderDetail.shipping_city = city;
                    $scope.orderDetail.shipping_state = $scope.shippingStateList.filter(function(state){
                      return state.code === data.postcode_details.state_code;
                    })[0];
                    $scope.shipping_freeze = true;
                    break;
                }
                loaderFactory.hide()
              })
              .error(function(err){
                Notify.alert(err.message, { timeout: 4000, status: 'danger' })
                switch (type) {
                  case 'billing':
                    $scope.orderDetail.billing_city = '';
                    $scope.orderDetail.billing_state = $scope.billingStateList[0]
                    $scope.billing_freeze = true;
                    break;
                  case 'shipping':
                    $scope.orderDetail.shipping_city = '';
                    $scope.orderDetail.shipping_state = $scope.shippingStateList[0]
                    $scope.shipping_freeze = true;
                    break;
                }
                $scope.billing_freeze = false;
                $scope.shipping_freeze = false;
                loaderFactory.hide();
              })
            }

            function backHistory(){
              window.history.back();
            }

            $scope.purpose_of_shipment_options = [
                {id: 0, name: 'Gift'},
                {id: 1, name: 'Sample'},
                {id: 2, name: 'Commercial'}
            ];

            $scope.form = {
                currency: 'INR'
            };

            var user = $localStorage.USER;

            // intercom event
            AppService.intercomEventAndPing('Clicked Add Order Page');
            $scope.newDate = new Date();
            $scope.sub_total = 0.00;
            $scope.grand_total = 0.00;
            $scope.billing_freeze = false;
            $scope.shipping_freeze = false;
            $scope.orderDetail =
            {
                order_id: '',
                order_date: $scope.newDate,
                channel_name:'',
                billing_first_name: '',
                billing_last_name:'',
                billing_email: '',
                billing_mobile: '',
                isd_code: '+91',
                shipping_mobile_country_code: '+91',
                billing_mobile_country_code: '+91',
                billing_address_1: '',
                billing_address_2: '',
                billing_city:'',
                billing_state:
                {
                    id : '0',
                    name: "Please Select State"
                },
                billing_country:
                {
                    id: '99',
                    name: 'India'
                },
                billing_pincode: '',
                shipping_is_billing: true,

                shipping_first_name: '',
                shipping_last_name:'',
                shipping_email: '',
                shipping_mobile: '',
                shipping_address_1: '',
                shipping_address_2: '',
                shipping_city:'',
                shipping_state:
                {
                    id : '0',
                    name: "Please Select State"
                },
                shipping_country:
                {
                    id: '99',
                    name: 'India'
                },
                shipping_pincode: '',
                pickup_location: '',
                reseller_name: ''
            }

            $scope.giftwrap_charges = 0;
            $scope.shipping_charges = 0;
            $scope.transaction_charges = 0;
            $scope.total_discount = 0;
            $scope.options =
            {
                showWeeks: false
            };

            function getProduct($event, index){
                $('.options').html('');
                var target = angular.element($event.currentTarget);
                if(target.attr('data-sku')){
                    if($event.keyCode == 8){
                        //remove product
                        target.attr('data-sku', '');
                        target.val('');
                        target.closest('.product-row').find('.price' + index).val('');
                        target.closest('.product-row').find('.sku' + index).val('');
                        target.closest('.product-row').find('.quantity' + index).val('');
                        target.closest('.product-row').find('.discount' + index).val('');
                        target.closest('.product-row').find('.tax' + index).val('');
                        target.closest('.product-row').find('.in-stock ').html('');
                        target.closest('.product-row').find('.hsn'+ index).val('');
                        var row_total = target.closest('.product-row').find('.row-total').html();
                        target.closest('.product-row').find('.row-total').html('0.00');
                        row_total = parseFloat(row_total);
                        $scope.sub_total = $scope.sub_total - row_total;
                        $scope.grand_total = $scope.grand_total - row_total;
                    } else {
                        return;
                    }
                }

                var value = target.val();

                if(value.length < 3){
                    return;
                }

                $('.validation-alert').remove();

                var data =
                {
                    query: value
                };

                AppService.post(SR_CONSTANTS.api_urls.search_listings, true, data )
                .success(function(data){
                    var html =  '';
                    var products = data;
                    for(var i=0; i<products.length; i++)
                    {
                       html +=  '<div data-p-weight="'+products[i].weight+'" data-p-breadth="'+products[i].dimensions.width+'" data-p-height="'+products[i].dimensions.height+'" data-p-length="'+products[i].dimensions.length+'" data-sku="'+ products[i].sku + '" data-hsn="'+ products[i].hsn + '" data-units='+ products[i].quantity + ' data-selling-price='+ products[i].selling_price  + ' class="product-wrapper " '+ 'data-name="' +products[i].name  +'" >'+ products[i].search  +'</div>'
                    }
                    target.closest('.products-wrapper').find('.options').html(html);

                    $(".product-wrapper").bind("click",function(){
                        $scope.disableSKU = true;
                        $scope.disableTax = true;
                        var currentObject = $(this);
                        var currentInput = $(this).closest('.products-wrapper').find('input');
                        // currentInput.val(currentObject.data('name'));
                        $(this).closest('.products-wrapper').find('input').attr("data-sku", currentObject.data('sku'));
                        $(this).closest('.product-row').find('input[name="order_items.'+ index +'.name"]').val(currentObject.data('name'));
                        $(this).closest('.product-row').find('input[name="order_items.'+ index +'.sku"]').val(currentObject.data('sku'));
                        $(this).closest('.product-row').find('input[name="order_items.'+ index +'.selling_price"]').val(currentObject.data('selling-price')== null ? '' :currentObject.data('selling-price'));
                        $(this).closest('.product-row').find('input[name="order_items.'+ index +'.hsn"]').val(currentObject.data('hsn')==null? '': currentObject.data('hsn'));
                        // $(this).closest('.product-row').find('.in-stock').html(currentObject.data('units'));
                        if($('.product-table.active-table').children().length == 1){
                          $scope.orderDetail.weight = currentObject.data('p-weight') - 0;
                          $scope.orderDetail.length = currentObject.data('p-length') - 0;
                          $scope.orderDetail.breadth = currentObject.data('p-breadth') - 0;
                          $scope.orderDetail.height = currentObject.data('p-height') - 0;
                          calculated_volumetric_weight()
                        } else {
                          $scope.orderDetail.weight = 0;
                          $scope.orderDetail.length = 0;
                          $scope.orderDetail.breadth = 0;
                          $scope.orderDetail.height = 0;
                          calculated_volumetric_weight()
                        }
                        $(this).closest('.products-wrapper').find('.options').html('');
                        $scope.$digest();
                    });

                    $(".products-wrapper").mouseleave(function(){
                       $(this).find('.product-dorpdown').hide();
                    });

                    $(".products-wrapper").bind('mouseenter', function(){
                       $(this).find('.product-dorpdown').show();
                    });

                    $(".products-wrapper .productId").keypress(function(){
                       $('.product-dorpdown').show();
                    });

                })
                .error(function(error, status){
                    AppService.isAuth(error);
                })
                .finally(function(){
                    AppService.isAuth(error);
                });
            }

            AppService.get('channels', true)
            .success(function(data){
                var defaultChannel = {
                    name: 'Select Channel',
                    channel_id: ''
                }

                loaderFactory.hide();
                var channelList = data.data;
                $scope.customChannelList = [];
                for (var i = 0; i < channelList.length; i++)
                {
                    if( channelList[i].base_channel_code == 'CS' )
                    {
                        var channelObj =
                        {
                            name: channelList[i].name,
                            channel_id: channelList[i].id
                        }
                        $scope.customChannelList.push(channelObj);
                    }
                }
                if($scope.customChannelList.length != 1)
                {
                    $scope.customChannelList.unshift(defaultChannel);
                }
                $scope.orderDetail.channel_name =  $scope.customChannelList[0]
            })
            .error(function(error)
            {
                AppService.isAuth(error);
                loaderFactory.hide();
                //$scope.isPreloader = false;
            })

            //get country list
            AppService.get('countries', true)
            .success(function(data){
                loaderFactory.hide();
                //$scope.isPreloader = false;
                $scope.shippingCountryList = data.data;
                $scope.billingCountryList = data.data;
            })
            .error(function(error){
                AppService.isAuth(error);
                loaderFactory.hide();
                //$scope.isPreloader = false;
            })

            stateListData();

            function getStateList(whichCountry){
                stateListData(whichCountry);
            }

            function addPickupLocation(){
              if($scope.addMoreAddress == 'true'){
                  var modalInstance = $uibModal.open({
                      animation: true,
                      templateUrl: 'app/views/modals/addPickupLocation.html',
                      controller:'addPickupLocationController',
                      size: 'lg'
                  })
                  .closed.then(getPickupLocation());
              } else {
                  Notify.alert("You have added maximum Numbers of Pickup Address", { timeout: 3000, status: 'danger' });
              }
            };

            function stateListData(whichCountry){
                var countryId = '';
                if(whichCountry == 'shipping'){
                    countryId  = $scope.orderDetail.shipping_country.id;
                    $scope.orderDetail.shipping_mobile_country_code =  $scope.orderDetail.shipping_country.isd_code;

                }
                else if(whichCountry == 'billing'){
                    countryId = $scope.orderDetail.billing_country.id;
                    $scope.orderDetail.billing_mobile_country_code =  $scope.orderDetail.billing_country.isd_code;
                }
                else{
                    countryId = '99';
                }

                loaderFactory.display('Please Wait');

                if(countryId == 99){
                  $scope.orderDetail.billing_mobile = '';
                  $scope.orderDetail.shipping_mobile = '';
                }
                //$scope.isPreloader = true;
                AppService.get('countries/show/'+  countryId, true)
                .success(function(data){
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    if(whichCountry == 'shipping'){
                        $scope.shippingStateList = angular.copy(data.data);
                        $scope.orderDetail.shipping_state =
                        {
                            id : '0',
                            name: "Please Select State"
                        }
                        $scope.shippingStateList.unshift($scope.orderDetail.shipping_state);
                        if(countryId == '99' && $scope.orderDetail.shipping_pincode != null && $scope.orderDetail.shipping_pincode.toString().length ==6){
                          getPincodeDetails($scope.orderDetail.shipping_pincode, 'shipping')
                        }
                    }
                    else if(whichCountry == 'billing'){
                        $scope.billingStateList = angular.copy(data.data);
                        $scope.orderDetail.billing_state =
                        {
                            id : '0',
                            name: "Please Select State"
                        }
                        $scope.billingStateList.unshift($scope.orderDetail.billing_state);
                        if(countryId == '99' && $scope.orderDetail.billing_pincode != null && $scope.orderDetail.billing_pincode.toString().length ==6){
                          getPincodeDetails($scope.orderDetail.billing_pincode, 'billing')
                        }
                    }else{
                        $scope.shippingStateList = angular.copy(data.data);
                        $scope.billingStateList = angular.copy(data.data);
                        $scope.orderDetail.shipping_state =
                        {
                            id : '0',
                            name: "Please Select State"
                        }
                        $scope.orderDetail.billing_state =
                        {
                            id : '0',
                            name: "Please Select State"
                        }
                        $scope.billingStateList.unshift($scope.orderDetail.billing_state);
                        $scope.shippingStateList.unshift($scope.orderDetail.shipping_state);
                    }
                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                })
            }

            function addNewProductRow(){
                var validationIndex = '';
                for (var i = rowIndexArry.length-1; i >= 0; i--){
                    if(rowIndexArry[i] != 'null'){
                        validationIndex = i;
                        break;
                    }
                }

                if( !$('.quantity' +validationIndex ).val() )
                {
                    Notify.alert('Please Input Product Quantity');
                    return false;
                }
                $('.row-remove').prop('disabled', false);

                var $tableRow =  $('<tr class="product-row">'+

                                    '<td>'+
                                      '<div class="col-lg-12 col-mg-12 products-wrapper p0">'+
                                          '<input type="text" autocomplete="off" name="order_items.'+ index +'.name"  class="input-sm form-control error-append name'+ index +'" data-sku ="" ng-keyup="getProduct($event, '+ index +')" class="form-control input-sm"  placeholder="Search Product by Name">'+
                                          '<div class="options product-dorpdown" style="z-index:1000; position: absolute; width:100%;" >'+
                                          '</div>'+
                                      '</div>'+
                                    '</td>'+
                                    '<td>' +
                                        '<input type="text" name="order_items.'+ index +'.sku" class="form-control col-xs input-sm error-append sku'+ index +'" placeholder="Enter SKU">'+
                                    '</td>'+
                                    '<td>' +
                                        '<input type="number" name="order_items.'+ index +'.hsn" class="form-control col-xs input-sm error-append hsn'+ index +'" placeholder="Enter HSN">'+
                                    '</td>'+
                                    '<td>' +
                                        '<input type="number" name="order_items.'+ index +'.units" class="form-control col-xs input-sm error-append quantity'+ index+'" placeholder="Enter Qty" ng-blur="updateTotals($event, '+index +')" ng-keyup="updateTotals($event, '+index +')">'+
                                    '</td>'+
                                    '<td>'+
                                        '<input type="number" name="order_items.'+ index +'.tax" class="form-control col-xs input-sm error-append tax'+ index +'" placeholder="Enter Tax">'+
                                    '</td>'+
                                    '<td>'+
                                        '<input type="number" name="order_items.'+ index +'.selling_price" class="form-control col-xs w-100i input-sm error-append price'+ index +'" placeholder="Enter Price" ng-blur="updateTotals($event, '+index +')" ng-keyup="updateTotals($event, '+index+')">'+
                                    '</td>'+
                                '<td>'+
                                    '<input type="text" class="form-control input-sm col-xs  discount'+ index +'" placeholder="Enter Discount" ng-blur="updateTotals($event, '+index +')" ng-keyup="updateTotals($event, '+index +')">'+
                                '</td>'+
                               '<td class="row-total"> 0.00</td>'+
                               '<td class="pt-lg">' +
                                    '<button class="btn p-sm ml-sm btn-blue row-remove" ng-click="removeProductRow($event, '+index+')">'+
                                        '<i class="fa fa-minus"></i>'+
                                    '</button>'+
                                '</td>'+
                            '</tr>').appendTo('.product-table');
                            $compile($tableRow)($scope);
                            index++;
                            rowIndexArry.push(index);
            }

            function removeProductRow($event, index){
                var target = angular.element($event.currentTarget);
                var subTractRowTotalValue = parseFloat(target.closest('.product-row').find('.row-total').html())
                $scope.grand_total = $scope.grand_total - subTractRowTotalValue;
                $scope.sub_total = $scope.sub_total - subTractRowTotalValue;
                target.closest('.product-row').remove();
                rowIndexArry[index] = 'null';
                var notNullValue = 0;
                var notNullArry = [];
                for (var i =0; i < rowIndexArry.length ; i++)
                {
                    if( rowIndexArry[i] != 'null' )
                    {
                        notNullValue++;
                        notNullArry.push(i);
                    }
                    if(notNullValue == 2)
                    {
                        break;
                    }
                }

                if(notNullValue == 1 )
                {
                    $('.row-remove').prop('disabled', true);
                }

            }

            function updateGrandTotal($event){
                var target = angular.element($event.currentTarget);
                var targetValue = parseFloat(target.val());

                // if (($event.keyCode >= 48 && $event.keyCode <= 57) || ($event.keyCode >= 96 && $event.keyCode <= 105) || $event.keyCode == 8)
                // { } else {
                //     target.val('');
                //     return;
                // }

                if( target.hasClass('shipping-charge') && $scope.shipping123)
                {
                    $scope.grand_total -= $scope.shipping_charges;
                    if( targetValue >0)
                    {
                        $scope.grand_total += targetValue;
                        $scope.shipping_charges = targetValue;
                    }
                    else
                    {
                        $scope.shipping_charges = 0;
                    }
                }
                else if( target.hasClass('gift-wrap-charge') && $scope.gifting123)
                {
                    $scope.grand_total -= $scope.giftwrap_charges;
                    if( targetValue >0)
                    {
                        $scope.grand_total += targetValue;
                        $scope.giftwrap_charges = targetValue;
                    }
                    else
                    {
                        $scope.giftwrap_charges = 0;
                    }
                }
                else if( target.hasClass('transaction-charge') && $scope.transaction123)
                {
                    $scope.grand_total -= $scope.transaction_charges;
                    if( targetValue >0)
                    {
                        $scope.transaction_charges = targetValue;
                        $scope.grand_total += targetValue;
                    }
                    else
                    {
                        $scope.transaction_charges = 0;
                    }
                }
                else if( target.hasClass('discount') && $scope.discount123)
                {
                    $scope.grand_total += $scope.total_discount;
                    if( targetValue >0)
                    {
                        $scope.total_discount = targetValue;
                        $scope.grand_total -= targetValue;
                    }
                    else
                    {
                        $scope.total_discount = 0;
                    }
                }
                else
                {
                    Notify.alert("Please Select charge type");
                    target.val('');
                }

            }

            function resetValue(chargeType, status){
              if(!status){
                switch (chargeType) {
                  case 'shipping':
                    $scope.grand_total -= $scope.shipping_charges;
                    $scope.shipping_charges = 0;
                    break;

                  case 'gifting':
                    $scope.grand_total -= $scope.giftwrap_charges;
                    $scope.giftwrap_charges = 0;
                    break;

                  case 'transaction':
                    $scope.grand_total -= $scope.transaction_charges;
                    $scope.transaction_charges = 0;
                    break;

                  case 'discount':
                    $scope.grand_total += $scope.total_discount;
                    $scope.total_discount = 0;
                    break;

                }
              }
            }

            function updateTotals($event, rowNo){
                var target = angular.element($event.currentTarget);
                //get data
                var price = parseFloat(target.closest('.product-row').find('.price' + rowNo).val());
                if(isNaN(price)){
                    target.closest('.product-row').find('.price' + rowNo).val('');
                    price = 0;
                }

                var quantity = parseFloat(target.closest('.product-row').find('.quantity' + rowNo).val());
                if(!numberValidation(quantity)){
                    target.closest('.product-row').find('.quantity' + rowNo).val('');
                    quantity = 0;
                }

                var discount = parseFloat(target.closest('.product-row').find('.discount' + rowNo).val());
                if(isNaN(discount)){
                    target.closest('.product-row').find('.discount' + rowNo).val('');
                    discount = 0;
                }

                var row_total = target.closest('.product-row').find('.row-total').html();
                    row_total = parseFloat(row_total);

                //update data
                var updatedTotal = price*quantity - discount*quantity;
                target.closest('.product-row').find('.row-total').html(updatedTotal);
                $scope.sub_total = $scope.sub_total - row_total + updatedTotal;
                $scope.grand_total = $scope.grand_total - row_total + updatedTotal;
            }

           function numberValidation(s){
              if (/^[0-9]{1,6}$/.test(s)){
                 return true
              } else {
                  return false
              }
            }

            var order_items = [];

            function addOrder(){
                loaderFactory.display('Please Wait!');
                var eventName = 'Clicked Add Order';
                var event_category = 'Add_Order_Clicked';
                ga_service.send('Orders', event_category);
                //intercom event
                AppService.intercomEventAndPing(eventName);
                order_items = [];
                $('.validation-alert').remove();

                for (var i = 0; i < index; i++) {
                  if($('.sku'+i).attr('data-sku') || $('.sku'+i).val()){
                    var obj = {};
                    obj['name'] = $('.name'+i).val();
                    obj['sku'] = $('.sku'+i).val();
                    obj['tax'] = $('.tax'+i).val();
                    obj['hsn'] = $('.hsn'+i).val().replace(/\s/g,'');
                    obj['units'] = $('.quantity'+i).val();
                    obj['selling_price'] = $('.price'+i).val();
                    obj['discount'] = $('.discount'+i).val();
                    order_items.push(obj);
                  }
                }

                if( $scope.sub_total < 0 ){
                    Notify.alert("For order amount can not be less than zero");
                    loaderFactory.hide();
                    return;
                }
                if( $scope.sub_total <= 0 && ( $scope.orderDetail.payment_method == "COD" )){
                    Notify.alert("For order amount equal to zero, COD is not available");
                    loaderFactory.hide();
                    return;
                }

                if($scope.grand_total == 0 && ( $scope.orderDetail.payment_method == "COD" )){
                    Notify.alert("For total amount equal to zero, COD is not available");
                    loaderFactory.hide();
                    return;
                }
                if($scope.grand_total < 0){
                    Notify.alert("Total amount can not be less than zero.");
                    loaderFactory.hide();
                    return;
                }

                var data  = {
                    "order_id": $scope.orderDetail.order_id,
                    "isd_code": $scope.orderDetail.shipping_mobile_country_code,
                    "billing_isd_code": $scope.orderDetail.billing_mobile_country_code,
                    "order_date": $scope.orderDetail.order_date,
                    "channel_id": $scope.orderDetail.channel_name.channel_id,
                    "billing_customer_name": $scope.orderDetail.billing_first_name,
                    "billing_last_name": $scope.orderDetail.billing_last_name,
                    "billing_address": $scope.orderDetail.billing_address_1,
                    "billing_address_2": $scope.orderDetail.billing_address_2,
                    "billing_city": $scope.orderDetail.billing_city,
                    "billing_state": $scope.orderDetail.billing_state.name != 'Please Select State' ? $scope.orderDetail.billing_state.name: '',
                    "billing_country": $scope.orderDetail.billing_country.name,
                    "billing_pincode": $scope.orderDetail.billing_pincode,
                    "billing_email": $scope.orderDetail.billing_email,
                    "billing_phone": $scope.orderDetail.billing_mobile,
                    "shipping_is_billing": $scope.orderDetail.shipping_is_billing === true ? 1: 0,
                    "shipping_customer_name": $scope.orderDetail.shipping_first_name,
                    "shipping_last_name": $scope.orderDetail.shipping_last_name,
                    "shipping_address": $scope.orderDetail.shipping_address_1,
                    "shipping_address_2": $scope.orderDetail.shipping_address_2,
                    "shipping_city": $scope.orderDetail.shipping_city,
                    "shipping_country": $scope.orderDetail.shipping_country.name,
                    "shipping_pincode": $scope.orderDetail.shipping_pincode,
                    "shipping_state": $scope.orderDetail.shipping_state.name != 'Please Select State' ? $scope.orderDetail.shipping_state.name: '',
                    "shipping_email": $scope.orderDetail.shipping_email,
                    "shipping_phone": $scope.orderDetail.shipping_mobile,
                    'order_items': order_items,
                    "payment_method": $scope.orderDetail.payment_method,
                    "shipping_charges": $scope.shipping_charges,
                    "giftwrap_charges": $scope.giftwrap_charges,
                    "transaction_charges": $scope.transaction_charges,
                    "total_discount": $scope.total_discount,
                    "sub_total": $scope.sub_total,
                    "weight": $scope.orderDetail.weight,
                    "length": $scope.orderDetail.length,
                    "breadth": $scope.orderDetail.breadth,
                    "height": $scope.orderDetail.height,
                    "pickup_location_id": $scope.orderDetail.pickup_location.id,
                    "reseller_name" : $scope.orderDetail.reseller_name
                }

                if($scope.orderDetail.billing_country.id != 99){
                    data.purpose_of_shipment = $scope.orderDetail.purpose_of_shipment.id;
                    data.currency = $scope.form.currency;
                }

                var url = 'orders/create/adhoc';
                AppService.post(url , true, data)
                .success(function(data)
                {
                    loaderFactory.hide();
                    //$scope.isPreloader = false;

                    if (data.onboarding_completed_now)
                    {
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: 'thankyoumessage2.html',
                            controller:'bulkReassignController',
                            size: 'md',
                            backdrop  : 'static',
                            keyboard  : false,
                            resolve: {
                                items: function ()
                                {
                                 return '';
                                }
                            }
                        });

                        if($scope.orderDetail.billing_country.id != 99){
                            $state.go('app.processing_international');
                        }else{
                            $state.go('app.processing');
                        }
                    }

                    if ($stateParams.redirect_url == 'welcome' && !data.onboarding_completed_now)
                    {
                        $state.go('app.welcome');
                    }
                    else if(!data.onboarding_completed_now)
                    {
                        if(data.status_code == '11')
                        {
                            $state.go('app.unprocessible');
                        }
                        else
                        {
                            if($scope.orderDetail.billing_country.id != 99){
                                $state.go('app.processing_international');
                            }else{
                                $state.go('app.processing');
                            }
                        }
                    }
                })
                .error(function(error)
                {
                    if(error.status_code === 422)
                    {
                        AppService.alertValidation(error.errors, true);
                        Notify.alert("Please correct below given errors !");
                        if(error.errors.hasOwnProperty('order_items'))
                        {
                            if(!$('[name="order_items.0.sku"]').val()) {
                                setErrorToProduct( "The item sku field is required" , 'order_items.0.sku');
                            }
                            if(!$('[name="order_items.0.selling_price"]').val())
                            {
                                setErrorToProduct( "The item selling price field is required",  'order_items.0.selling_price' );
                            }
                            if(!$('[name="order_items.0.units"]').val() )
                            {
                                setErrorToProduct( "The item unit field is required", 'order_items.0.units');
                            }
                            if(!$('[name="order_items.0.name"]').val() )
                            {
                                setErrorToProduct( "The item name field is required", 'order_items.0.name');
                            }

                        }

                    }
                    else
                    {
                        AppService.isAuth(error);
                    }
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                })
            }

            function setErrorToProduct( message, key )
            {
                var errorHtml = '<div class="help-block validation-alert">' + message + '</div>';
                $( "input[name='"+ key +"']" ).closest('.error-append').after(errorHtml);
            }

            function calculated_volumetric_weight(){
                $scope.volumetric_weight =  Number($scope.orderDetail.length) * Number($scope.orderDetail.breadth) * Number($scope.orderDetail.height)/5000;
            };

            function getPickupLocation(){
                loaderFactory.display("Please Wait!");
                var data = {
                  'is_order_creation': true
                }
                AppService.get_with_params('settings/company/pickup', data, true)
                .success(function(res){
                    $scope.addMoreAddress = res.data.allow_more;
                    $scope.pickupLocationList = res.data.shipping_address.filter(function(value){
                      return value.status != 0;
                    });
                    $scope.orderDetail.pickup_location = $scope.pickupLocationList[0]
                    $scope.orderDetail.pickup_sender_name = $scope.orderDetail.pickup_location.name;
                    loaderFactory.hide();
                })
                .error(function(error){
                    AppService.isAuth(error);
                    loaderFactory.hide();
                })
            }
            getPickupLocation();
        }
    }
})(angular);

/**=========================================================
 * Module: AllOrderController

 'order' => [
        1 => 'New',
        2 => 'Invoiced',
        3 => 'Ready to Ship',
        4 => 'Pickup Scheduled',
        5 => 'Canceled',
        6 => 'Shipped',
        7 => 'Delivered',
        8 => 'ePayment Failed',
        9 => 'Returned',
       10 => 'Unmapped',
       11 => 'Unfulfillable',
       12 => 'Pickup Initiated',
       13 => 'Pickup Rescheduled',

   ],
    'activities' => [
       "CUSTOM"                   => '', //Add custom message in message fields of activities
       "ORDER_FETCHED"            => 'Order is fetched in the system', //Order is fetched in the system
       "ORDER_CONFIRMED"          => 'Order confirmed',        //User Confirms the Order
       "INVENTORY_ALLOCATED"      => 'Inventory allocated to ordered product', //Inventory is allocated to the order items
       "PRODUCT_MAPPED"           => 'Order mapped',  //User maps the unmanpped order
       "INVOICED"                 => 'Invoice created',       //User creates the invoice
       "DIRECT_INVOICED"          => 'Invoice created', //In case user directly created label and invoice number is system generated
       "DIMENSIONS_EDITED"        => 'Shipment details edited',  //Shipment weight or dimension edited by the user
       "ADDED_SHIPPING_PROVIDER"  => 'Shipment details edited',  //When the user saves a shipping provider and edit shipping details
       "LABEL_GENERATED"          => 'Label generated',  //Label generated by user
       "MANIFEST_QUEUED"          => 'Manifest generated and Pickup queued',  //User selects the order and create manifest
       "MANIFEST_SCHEDULED"       => 'Manifest generated and Pickup scheduled',  //User selects the order and create manifest
       "PICKUP_RESCHEDULED"       => 'Pickup rescheduled',  //User selects the manifest and clicks Reschedule Pickup
       "ORDER_SHIPPED"            => 'Order shipped',  //System marks the order as shipped via API
       "ORDER_SHIPPED_MANUALLY"   => 'Order manually marked as shipped.',           //User manually close the manifest
       "ORDER_DELIVERED"          => 'Order delivered',          //Order marked as delivered via API
       "ORDER_DELIVERED_MANUALLY" => 'Order manually marked as delivered'          //Order marked as delivered via User
   ],
   ===================================================*/
(function()
{
    'use strict';
    angular
    .module('app.orders')
    .controller('AllOrderController', AllOrderController);

    AllOrderController.$inject = ['$document','$rootScope', '$scope', 'AppService',  '$state', 'Notify', '$uibModal', '$window', '$stateParams', '$localStorage', 'loaderFactory', '$timeout'];
    function AllOrderController($document, $rootScope, $scope, AppService, $state, Notify, $uibModal, $window, $stateParams, $localStorage, loaderFactory, $timeout){
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }

        function activate(user){
            $rootScope.isRestrictFreePlan = false;
            if(typeof user !== 'undefined' && user.is_free_plan){
                $rootScope.isRestrictFreePlan = true;
            }

            $rootScope.isInernationalActivated = user.international_status == 1;
            $rootScope.isBasicPlan = user.is_basic_plan;

            $scope.shipment_options = [
                {id: '0', name: 'All Shipments'},
                {id: '1', name: 'Domestic Shipments'},
                {id: '2', name: 'International Shipments'}
            ];
            $scope.shipment_type = $scope.shipment_options[$stateParams.shipment_type] ;

            var action = {
                className : 'ordershippingdetails',
                width: $('.ordershippingdetails').outerWidth(),
                tableClass: 'viewallorders-wrapper'
            }
            var sla = {
                className : 'ordersla',
                width: $('.ordersla').outerWidth(),
            }
            var dimension = {
                className : 'dimension',
                width: $('.dimension').outerWidth(),
            }
            var allstatus = {
                className : 'allstatus',
                width: $('.status').outerWidth(),
            }
            var orderid = {
                className : 'orderid',
                width: $('.orderid').outerWidth(),
            }
            var orderdate = {
                className : 'orderdate',
                width: $('.orderdate').outerWidth(),
                tableClass: 'tracking-wrapper'
            }
            var status = {
                className : 'status',
                width: $('.status').outerWidth()
            }

            if($state.current.name == 'app.viewallorders' && !$localStorage.channelErrorShown){
              AppService.get('channels', true)
              .then(function(res){
                var allChannelList = res.data.data;
                var disconnectedChannels = allChannelList.filter(function(value){
                  return value.connection == 0;
                })
                if(disconnectedChannels.length > 0){
                  Notify.alert("We are receiving an error from one of you channel Kindly check the same at <a class='link' href='/channels'>Channel Configuration Page</a>", {status: 'warning', timeout: 0});
                  $localStorage.channelErrorShown = true;
                }
              })
            }

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.searchBy = searchBy;
            $scope.sortTable = sortTable;
            $scope.updateState = updateState;
            $scope.changeStatus = changeStatus;
            $scope.filterSubStatus = filterSubStatus;
            $scope.hideMoreProduct = hideMoreProduct;
            $scope.hideProductPopup = hideProductPopup;
            $scope.showProductPopup = showProductPopup;

            var date = new Date();

            $scope.currentDate = date;
            if(!$rootScope.DateFilter){
                $rootScope.DateFilter =
                {
                    'from': '',
                    'to': ''
                }
            }

            $scope.itemsPerPage =
                [{value:'15', id:0},
                {value:'30', id:1},
                {value:'60', id:2},
                {value:'100', id:3}
            ];

            $scope.paymentTypes_filter_data = [
                {value: "cod", display_value: "Cash on Delivery"},
                {value: "prepaid", display_value: "Prepaid"}
            ]

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }
            else if($stateParams.perPage == 60){
                $scope.selectedItems = 2;
            }
            else if($stateParams.perPage == 100){
                $scope.selectedItems = 3;
            }
            else{
                $scope.selectedItems = 0;
            }

            $scope.searchText = $stateParams.search;

            $scope.sortType = 'base_channel_code';
            $scope.sortReverse  = false;

            $scope.filter = $stateParams.filter ? $stateParams.filter : '';
            if($scope.filter == 20 || $scope.filter == 36){
              $scope.subFilter = $stateParams.sub_status ? $stateParams.sub_status : '';
            }
            $scope.channel_id = $stateParams.channel_id ? $stateParams.channel_id : '';
            $scope.payment_method = $stateParams.payment_method ? $stateParams.payment_method : '';
            $scope.date_from = $stateParams.date_from ? $stateParams.date_from : '';
            $scope.date_to = $stateParams.date_to ? $stateParams.date_to : '';
            $scope.courier_id = $stateParams.courier_id ? $stateParams.courier_id : '';

            $scope.startDate =
            {
                from: ''
            };
            $scope.filter_by = 'status';

            $scope.inTransitSubStatus = [
              {value:1,display_value:'At Source Hub'},
              {value:2,display_value:'En-Route'},
              {value:3,display_value:'At Destination Hub'},
            ]

            $scope.undeliveredSubStatus = [
              {value:1,display_value:'1st Attempt'},
              {value:2,display_value:'2nd Attempt'},
              {value:3,display_value:'3rd Attempt'},
            ]

            function filterSubStatus (sub_status) {
              $scope.subFilter = sub_status;
              updateState()
            }

            function changeStatus (status) {
              $scope.filter = status;
              $scope.subFilter = '';
              updateState()
            }

            function sortTable(type){
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                allOrderData();
            }

            function hideMoreProduct($event, product){
                if( product.length <2 ){
                    var target = angular.element($event.currentTarget);
                    target.find('.popover').css('display', 'none');
                }
            }

            function searchBy ($event) {
              if($event){
                if($event.keyCode == 13){
                  updateState($stateParams.shipment_type)
                }
              } else {
                updateState($stateParams.shipment_type)
              }
            }

            function getFiltersData(){
                AppService.get('orders/manifestfilters', true)
                .success(function(data) {
                    $scope.channel_filter_data = data.channels;
                })
                .error(function(error) {
                    AppService.isAuth(error, 'danger');
                });
            }
            getFiltersData();

            function allOrderData(){
                loaderFactory.display('Please Wait');
                $scope.isPreloader = true;

                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                var start = $stateParams.date_from ? moment($stateParams.date_from , 'YYYY-MMM-DD'): moment().subtract(3, 'month');
                var end = $stateParams.date_to ? moment($stateParams.date_to , 'YYYY-MMM-DD'): moment();

                if($scope.startDate.from){
                    var fromdate = $scope.startDate.from,
                    from = fromdate.getFullYear() + '-' + ('0' + (fromdate.getMonth() + 1)).slice(-2) + '-' + ('0' + fromdate.getDate()).slice(-2);
                }

                if($scope.filter === 'null'){
                    loaderFactory.hide();
                    $scope.isPreloader = false;
                    return false;
                }

                if($state.current.name == 'app.viewallorders'){
                    var start = $stateParams.date_from ? moment($stateParams.date_from , 'YYYY-MMM-DD'): moment().subtract(3, 'month');
                    var end = $stateParams.date_to ? moment($stateParams.date_to , 'YYYY-MMM-DD'): moment();

                    var data = {
                      page: $scope.page,
                      per_page: perPage,
                      filter: $scope.filter,
                      filter_by: $scope.filter_by,
                      search: $scope.searchText,
                      payment_method: $scope.payment_method,
                      from: start.format('YYYY-MMM-DD'),
                      to: end.format('YYYY-MMM-DD')
                    }

                    if($stateParams.shipment_type && ($stateParams.shipment_type==1 || $stateParams.shipment_type==2)){
                      data.is_international = $stateParams.shipment_type-0
                    }

                    if($scope.filter == 20 || $scope.filter == 36){
                      data.sub_status = $scope.subFilter ? $scope.subFilter : '';
                    }

                    AppService.get_with_params('orders', data, true)
                    .success(function(data){
                        if(!data.data.length){
                            loaderFactory.hide();
                            $scope.isPreloader = false;
                        }
                        $scope.orders = data.data;
                        var length = $scope.orders.length;
                        for (var i = 0; i < length; i++){
                            var activityLength = $scope.orders[i].activities.length;
                            var activities = $scope.orders[i].activities;
                            var activeStatusObj = {};
                            for (var j = 0; j < activityLength; j++){
                                activeStatusObj[activities[j]] = true;
                            }
                            $scope.orders[i].activeStatus = activeStatusObj;
                        }
                        $scope.metaData = data.meta.pagination;
                        $scope.totalItems = $scope.metaData.total;
                        $scope.showingOrderNo =
                        {
                            from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                            to: Math.min($scope.totalItems, $scope.page*perPage)
                        }
                        AppService.setHeight();
                        $scope.$on('viewallorders', function(ngRepeatFinishedEvent){
                            AppService.setWidth(action, orderdate, dimension, orderid, allstatus );
                            loaderFactory.hide();
                            $scope.isPreloader = false;
                        });
                    })
                    .error(function(error){
                        AppService.isAuth(error, 'danger');
                        loaderFactory.hide();
                        $scope.isPreloader = false;
                    })
                }
                else if($state.current.name == 'app.tracking'){
                    // getFiltersData();
                    // getCourierFilters();
                    var data = {
                      page: $scope.page,
                      per_page: perPage,
                      filter: $scope.filter,
                      filter_by: $scope.filter_by,
                      search: $scope.searchText,
                      payment_method: $scope.payment_method,
                      from: start.format('YYYY-MMM-DD'),
                      to: end.format('YYYY-MMM-DD')
                    }

                    if($scope.filter == 20 || $scope.filter == 36){
                      data.sub_status = $scope.subFilter ? $scope.subFilter : '';
                    }
                    AppService.get_with_params('orders/track', data, true)
                    .success(function(data){
                        if(!data.data.length){
                            loaderFactory.hide();
                            $scope.isPreloader = false;
                        }
                        $scope.orders = data.data;
                        $scope.metaData = data.meta.pagination;
                        $scope.totalItems = $scope.metaData.total;
                        $scope.showingOrderNo =
                        {
                            from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                            to: Math.min($scope.totalItems, $scope.page*perPage)
                        }
                        AppService.setHeight();
                        $scope.$on('viewallorders', function(ngRepeatFinishedEvent){
                            AppService.setWidth(orderdate, status, dimension, orderid);
                            loaderFactory.hide();
                            $scope.isPreloader = false;
                        });
                    })
                    .error(function(error){
                        AppService.isAuth(error, 'danger');
                        loaderFactory.hide();
                        $scope.isPreloader = false;
                    })
                }
            }

            $document.on("click", function(){
                $('.popover').hide();
            });

            function showProductPopup($event, listId, products){
               $event.stopPropagation();
               var targetdiv = angular.element($event.currentTarget);
               var divposition = targetdiv.parents('tr').position();
                if(Math.round(divposition.top) >= '320'){
                        targetdiv.parent().next(".popover").show().removeClass('bottom').addClass('top').css({'top':'auto','bottom':'29px'});
                }
                else{
                    targetdiv.parent().next(".popover").show().removeClass('top').addClass('bottom').css({'top':'78px','bottom':'auto'});
                }
            }

            function hideProductPopup($event, listId){
                var targetdiv = angular.element($event.currentTarget);
                targetdiv.parent().next(".popover").hide()
            }

            var start = $stateParams.date_from ? moment($stateParams.date_from , 'YYYY-MMM-DD'): moment().subtract(1, 'month');
            var end = $stateParams.date_to ? moment($stateParams.date_to , 'YYYY-MMM-DD'): moment();

            var lock = 0;
            var counter = 0;

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);

            cb(start, end);
            function cb(start, end){
                if(!counter && start){
                    $rootScope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
                    $rootScope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
                }

                if($rootScope.DateFilter.from){
                    $('#reportrange span').html($rootScope.DateFilter.from + ' - ' + $rootScope.DateFilter.to);
                }
                else{
                    $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
                }

                 if(counter){
                     var s1=start;
                     var e1=end;
                     supx(s1, e1);
                 } else {
                   $timeout(function(){
                     allOrderData();
                   }, 200)
                 }
                counter++;
                if($scope.finala && lock){
                    start = $scope.finala;
                    end = $scope.finalb;
                }
            }

            function supx(a, b){
                a = a.format('YYYY-MMM-DD');
                b = b.format('YYYY-MMM-DD');
                var data = {
                  page: $scope.page,
                  perPage: $scope.itemsPerPage[$scope.selectedItems].value,
                  filter:$scope.filter,
                  search:$scope.searchText,
                  date_from: a,
                  date_to: b,
                  shipment_type: 0,
                  payment_method: $scope.payment_method,
                  filter_by: $scope.filter_by
                }


                if($scope.filter == 20 || $scope.filter == 36){
                  data.sub_status = $scope.subFilter ? $scope.subFilter : '';
                }

                $state.go('.', data);
                $('#reportrange span').html($stateParams.date_from + ' - ' + $stateParams.date_to);
                $timeout(function(){
                  allOrderData();
                }, 200)

                start = a;
                end = b;
                $scope.finala = a;
                $scope.finalb = b;
                lock = 1;
            }

            function getCourierFilters(){
                AppService.get('manifests/manifestopenclosefilters', true)
                .success(function(data) {
                    $scope.courier_filter_data = data.shipping_providers;
                })
                .error(function(error) {
                    AppService.isAuth(error, 'danger');
                });
            }

            function updateState(shipment_type){
                if(!shipment_type){
                    shipment_type = {
                        id: 0
                    };
                }
                var data = {
                  page: $scope.page,
                  perPage: $scope.itemsPerPage[$scope.selectedItems].value,
                  filter:$scope.filter,
                  search:$scope.searchText,
                  date_from: $stateParams.date_from,
                  date_to: $stateParams.date_to,
                  shipment_type: shipment_type.id,
                  payment_method: $scope.payment_method,
                  filter_by: $scope.filter_by
                }

                if($scope.filter == 20 || $scope.filter == 36){
                  data.sub_status = $scope.subFilter ? $scope.subFilter : '';
                }

                $state.go('.', data, {
                  notify: false,
                  reload: false
                });
                $timeout(function(){
                  allOrderData();
                }, 200)
            }
        }
    }
})();

/**=========================================================
 * Module: asssignedLabelController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('asssignedLabelController', asssignedLabelController);
    asssignedLabelController.$inject = ['loaderFactory', '$scope', 'items', 'AppService', '$uibModalInstance', '$state', 'Notify'];
    function asssignedLabelController(loaderFactory, $scope, items, AppService, $uibModalInstance, $state, Notify)
    {
        activate();
        function activate(){
            loaderFactory.hide();
            $scope.items = items;
            $scope.pickupNow = pickupNow;
            $scope.pickupLater = pickupLater;

            function pickupNow(){
                loaderFactory.display("We are processing your pickup request with the Courier Company.");
                // $scope.isPreloader = true;
                var shipment_data = {
                    shipment_id: [$scope.items.shipment_id]
                };

                var d = new Date();
                var time = d.getHours();
                if(time >= 13){
                    Notify.alert('Courier pick-up generated after 1 pm may not get picked up on same day',{ timeout: '3000'});
                }
                AppService.post('courier/generate/pickup', true, shipment_data)
                .success(function(data){
                    if(angular.isDefined(data.response.data.dhl_handover_id)){
                        Notify.alert("The Pickup Label and Handover Note for DHL would be sent to your registered email id after 15 minutes.")
                    }
                    if(items.is_return){
                      Notify.alert(data.response.data)
                      $uibModalInstance.dismiss('cancel');
                      loaderFactory.hide();
                      $state.reload();
                    } else {
                      AppService.post('manifests/generate', true, shipment_data)
                      .success(function(data){
                        $uibModalInstance.dismiss('cancel');
                        loaderFactory.hide();
                        $state.reload();
                      })
                      .error(function(error){
                        loaderFactory.hide();
                        AppService.isAuth(error);
                      });
                    }
                })
                .error(function(error){
                    loaderFactory.hide();
                    AppService.isAuth(error);
                })
            };

            function pickupLater(){
              $state.reload();
              $uibModalInstance.dismiss('cancel');
            }

        }
    }
})();

/**=========================================================
 * Module: bulkReassignController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('bulkReassignController', bulkReassignController);
    bulkReassignController.$inject = [ '$stateParams','$rootScope', '$window', '$scope', 'AppService' , '$state', 'Notify', '$uibModalInstance', 'items', 'loaderFactory' ];
    function bulkReassignController( $stateParams, $rootScope, $window, $scope, AppService ,$state, Notify, $uibModalInstance, items, loaderFactory)
    {   
        activate();
        function activate()
        {       
            $scope.canReassign = true;
            $scope.checkCourierServiceabiality = function()
            {   

                $scope.count = items.count;
                $scope.serviceAvilabilityMessage = items.message;
                $scope.canReassign = true;
                
            }
            $scope.cancel_thankyoumessage = function(){
                $uibModalInstance.dismiss('cancel');
                $window.location.reload();
            };

            $scope.bulkReassign = function()
            {   
                loaderFactory.display('Please Wait!');
                //$scope.isPreloader = true;
                var data = 
                {
                    manifest_id: items.ids[0],
                    status: 'reassign'
                }

                AppService.post('courier/bulk_reassign_manifest' , true, data)
                .success(function(data)
                {   

                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    $scope.canReassign = false;
                    $scope.serviceAvilabilityMessage = data.message;
                    $state.go($state.current, {}, {reload: true});

                })
                .error(function(error) 
                {   
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

            $scope.cancel = function()
            {
                // $("input:checkbox").prop( "checked", false );
                $uibModalInstance.dismiss('cancel');
                $state.go($state.current, {}, {reload: true});
                /*$state.go($state.current, {}, {reload: true});*/
            }


      }
    }
})();
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('cancelOrderController', cancelOrderController);
    cancelOrderController.$inject = ['$rootScope', '$scope', 'AppService',  '$state', 'Notify', '$stateParams', 'items','$uibModal', '$uibModalInstance', 'SR_CONSTANTS', 'loaderFactory'];
    function cancelOrderController($rootScope, $scope, AppService, $state, Notify, $stateParams, items, $uibModal, $uibModalInstance, SR_CONSTANTS, loaderFactory)
    {
        activate();
        function activate()
        {
            var productId = items.id;
            var productStatus = items.status_code;
            $scope.isNonChannelCancelOrder = (items.base_channel_code === "EB" || items.base_channel_code === "SH"); // checking if the order is from ebay or shopify channel
            $scope.isManualOrder = items.base_channel_code === "CS"; // checking if the order is from manual channel
            $scope.channel_name = items.channel_name;
            $scope.cancel_on_channel = true;
            $scope.order_status = items.status_code;
            $scope.cancelOrder = function()
            {
                loaderFactory.display('Please Wait!');
                //$scope.isPreloader = true;
                var data = {
                    cancel_on_channel: $scope.cancel_on_channel? 1: 0,
                    order_ids: [productId],
                    is_return: !!items.is_return ? 1 : 0
                };
                var url = '';
                if(productStatus == '3'){
                   url ='orders/cancel/labeled';
                }
                else if(productStatus == '1'||productStatus == '2'){
                   url ='orders/cancel';
                   data.ids = [productId];
                }
                else if(productStatus == '12' || productStatus =='13' || productStatus =='14'){
                    url ='orders/cancel/labeled';
                    data.status = 'queue_error';
                }
                else{
                    url = 'orders/cancel/manifested';
                }

                if(!!items.is_return){
                  url = SR_CONSTANTS.api_urls.cancel_orders;
                  data.ids = [productId];
                }

                AppService.post(url, true, data)
                .success(function(data){
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    $uibModalInstance.dismiss('cancel');
                    var heading = undefined;

                    if(items.status_code==1 || items.status_code ==2){
                        heading = SR_CONSTANTS.alert_messages.order_cancel_success
                    }

                    var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/Orders/message.html',
                    controller: 'sucessMessageController',
                    size: (items.status_code==1 || items.status_code ==2)? 'sm':'recharge',
                    resolve: {
                        items: function ()
                        {
                            return {
                                message: data.message,
                                heading: heading
                            }
                        }
                    }
                });
                    //Notify.alert(data.message,  {status: 'success' });
                    $state.reload();
                })
                .error(function(error)
                {
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

            $scope.closeCancelOrderModal = function()
            {
                $uibModalInstance.dismiss('cancel');
            }
        }
    }
})();

/**=========================================================
 * Module: codReconController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('codReconController', codReconController);
    codReconController.$inject = ['$rootScope', '$scope', 'items', 'AppService','$uibModal',  '$uibModalInstance', '$state', '$localStorage', 'loaderFactory'];
    function codReconController($rootScope, $scope, items, AppService, $uibModal,$uibModalInstance, $state, $localStorage, loaderFactory)
    {
        activate();
        function activate()
        {
            $scope.deduct = items;
            var is_free_plan = $localStorage.USER.is_free_plan;
            $scope.close_available = is_free_plan?($scope.descrepancy.data.length < 5 && chargedWeight-applied_weight < 2):($scope.descrepancy.data.length < 5 && chargedWeight-applied_weight < 5);

            $scope.cancelDiscrepancyModal = function()
            {
                $uibModalInstance.dismiss('cancel');
            };

            $scope.deductCOD = function()
            {
                loaderFactory.display('Please Wait!');
                //$scope.isPreloader = true;
                AppService.get('cod/recon/deduct', true)
                .success(function(data)
                {
                    $uibModalInstance.dismiss('cancel');
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                })
                .error(function(error)
                {
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                    AppService.isAuth(error);
                    $uibModalInstance.dismiss('cancel');

                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: 'app/views/Settings/topnavrecharge.html',
                        controller: 'rechargeController',
                        size: 'recharge'
                    });
                })
            }

            $scope.cancel = function()
            {
                 $uibModalInstance.dismiss('cancel');
            }

        }
    }
})();

/**=========================================================
 * Module: createReturnController
   ===================================================*/
(function()
{
    'use strict';
    angular
    .module('app.orders')
    .controller('createReturnController', CreateReturnController);

    CreateReturnController.$inject = ['$rootScope', '$stateParams' , '$scope', 'AppService', 'ga_service',  '$state', 'Notify', '$uibModal', '$compile', '$localStorage', 'loaderFactory', 'SR_CONSTANTS'];
    function CreateReturnController($rootScope, $stateParams ,$scope,AppService,ga_service, $state, Notify, $uibModal, $compile, $localStorage, loaderFactory, SR_CONSTANTS)
    {
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }
        function activate(user) {
            var order_items = [];
            $scope.return_id = $stateParams.id == 'new' ? false : $stateParams.id;
            $scope.isOldOrder = $scope.return_id ? true : false;
            $scope.productInCatalog = false;
            $scope.addMoreAddress = false;
            $scope.disableSKU = false;
            $scope.disableTax = false;
            $scope.grand_total = 0;
            $scope.orderDetail = {};
            // intercom event
            AppService.intercomEventAndPing('Clicked Create Return Page');
            $scope.newDate = new Date();
            $scope.sub_total = 0.00;
            $scope.grand_total = 0.00;
            $scope.orderDetail =
            {
                order_id: '',
                order_date: $scope.newDate,
                channel:'',
                payment_method: 'Prepaid',
                pickup_first_name: '',
                pickup_last_name:'',
                pickup_email: '',
                pickup_mobile: '',
                isd_code: '+91',
                shipping_mobile_country_code: '+91',
                pickup_mobile_country_code: '+91',
                pickup_address_1: '',
                pickup_address_2: '',
                pickup_city:'',
                pickup_state:
                {
                    id : '0',
                    name: "Please Select State"
                },
                pickup_country:
                {
                    id: '99',
                    name: 'India'
                },
                pickup_pincode: '',
                shipping_location: ''
            }

            $scope.total_discount = 0;

            $scope.options =
            {
                showWeeks: false
            };

            $scope.Range = Range;
            $scope.checkSKU = checkSKU;
            $scope.getProduct = getProduct;
            $scope.backHistory = backHistory
            $scope.updateTotals = updateTotals;
            $scope.getStateList = getStateList;
            $scope.createReturn = createReturn;
            $scope.removeProductRow = removeProductRow;
            $scope.updateGrandTotal = updateGrandTotal;
            $scope.addNewProductRow = addNewProductRow;
            $scope.addPickupLocation = addPickupLocation;
            $scope.getPincodeDetails = getPincodeDetails;
            $scope.calculated_volumetric_weight = calculated_volumetric_weight;
            $scope.errors = {
                visibilty: false,
                stylecss : '',
                msg : ''

            }

            $scope.readonly =false;
            if($scope.return_id){
              getOrderDetails($scope.return_id);
            } else {
              getChannels();
              getStateList();
              getPickupLocation();
            }

            function addPickupLocation(){
              if($scope.addMoreAddress == 'true'){
                  var modalInstance = $uibModal.open({
                      animation: true,
                      templateUrl: 'app/views/modals/addPickupLocation.html',
                      controller:'addPickupLocationController',
                      size: 'lg'
                  })
                  .closed.then(getPickupLocation());
              } else {
                  Notify.alert("You have added maximum Numbers of Pickup Address", { timeout: 3000, status: 'danger' });
              }
            };

            function backHistory(){
                window.history.back();
            }

            function getOrderDetails (id) {
              loaderFactory.display('Fetching You order details')
              $scope.isOldOrder = true;
              AppService.get(SR_CONSTANTS.api_urls.get_orders_show + id)
              .success(function(data){
                  var order = data.data;
                  if(order.allow_return){
                    var customer_name = order.customer_name.split(' ');
                    var last_name = customer_name[customer_name.length - 1];
                    customer_name.pop();
                    var first_name = customer_name.join(' ');
                    var dimensions = order.shipments ? order.shipments.dimensions.split('x') : '';
                    $scope.orderDetail.order_id = 'R_' + order.channel_order_id
                    $scope.orderDetail.length = dimensions[0] - 0;
                    $scope.orderDetail.breadth = dimensions[1] - 0;
                    $scope.orderDetail.height = dimensions[2] - 0;
                    $scope.orderDetail.weight = order.shipments.weight - 0;
                    $scope.orderDetail.payment_method = order.payment_method;
                    $scope.orderDetail.pickup_first_name = first_name;
                    $scope.orderDetail.pickup_last_name = last_name;
                    $scope.orderDetail.pickup_address_1 = order.customer_address;
                    $scope.orderDetail.pickup_address_2 = order.customer_address_2;
                    $scope.orderDetail.pickup_city = order.customer_city;
                    $scope.orderDetail.pickup_country = {
                      id: order.country_code,
                      name: order.customer_country
                    };
                    $scope.orderDetail.pickup_email = order.customer_email;
                    $scope.orderDetail.pickup_phone = order.customer_phone - 0;
                    $scope.orderDetail.pickup_mobile_country_code = '+91';
                    $scope.orderDetail.pickup_pincode = order.customer_pincode - 0;
                    $scope.orderDetail.pickup_isd_code = 91;
                    $scope.order_items = order.products;
                    $scope.volumetric_weight = order.shipments.volumetric_weight;
                    $scope.grand_total = order.total - 0;
                    $scope.sub_total = order.total - 0;
                    $scope.orderDetail.channel = {
                      id : order.channel_id,
                      name : order.channel_name
                    }

                    loaderFactory.display('Fetching your drop addresses.')

                    AppService.get('countries/show/99', true)
                    .success(function(data){
                        $scope.pickupStateList = angular.copy(data.data);
                        $scope.orderDetail.pickup_state = {
                            id: order.state_code,
                            name: order.customer_state
                        };
                    })
                    .error(function(error){
                        AppService.isAuth(error, 'danger');
                        //$scope.isPreloader = false;
                    })

                    AppService.get('settings/company/pickup', true)
                    .success(function(data){
                        $scope.addMoreAddress = data.data.allow_more;
                        $scope.pickupLocationList = data.data.shipping_address;
                        $scope.orderDetail.shipping_location = $scope.pickupLocationList.filter(function(res){
                          return res.pickup_location == order.pickup_location;
                        })[0];
                        loaderFactory.hide();
                    })
                    .error(function(error){
                        AppService.isAuth(error, 'danger');
                        loaderFactory.hide();
                    });
                  } else {
                    loaderFactory.hide();
                    Notify.alert('This order cannot be returned', {status: 'danger', timeout: 7000 })
                  }
              })
              .error(function(error){
                  loaderFactory.hide();
                  AppService.isAuth(error, 'danger');
              })
            }

            function getProduct($event, index){
                $scope.disableSKU = false;
                $scope.disableTax = false;
                $('.options').html('');
                var target = angular.element($event.currentTarget);
                if(target.attr('data-sku')){
                    if($event.keyCode == 8){
                        //remove product
                        target.attr('data-sku', '');
                        target.val('');
                        target.closest('.product-row').find('.price' + index).val('');
                        target.closest('.product-row').find('.sku' + index).val('');
                        target.closest('.product-row').find('.quantity' + index).val('');
                        target.closest('.product-row').find('.discount' + index).val('');
                        target.closest('.product-row').find('.tax' + index).val('');
                        target.closest('.product-row').find('.in-stock ').html('');
                        target.closest('.product-row').find('.hsn'+ index).val('');
                        var row_total = target.closest('.product-row').find('.row-total').html();
                        target.closest('.product-row').find('.row-total').html('0.00');
                        row_total = parseFloat(row_total);
                        $scope.sub_total = $scope.sub_total - row_total;
                        $scope.grand_total = $scope.grand_total - row_total;
                    } else {
                        return;
                    }
                }

                var value = target.val();

                if(value.length < 3)
                {
                    return;
                }
                $('.validation-alert').remove();
                var data =
                {
                    query: value
                };
                AppService.post(SR_CONSTANTS.api_urls.search_listings, true, data )
                .success(function(data)
                {
                    var html =  '';
                    var products = data;
                    for(var i=0; i<products.length; i++)
                    {
                       html +=  '<div data-p-weight="'+products[i].weight+'" data-p-breadth="'+products[i].dimensions.width+'" data-p-height="'+products[i].dimensions.height+'" data-p-length="'+products[i].dimensions.length+'" data-sku="'+ products[i].sku + '" data-hsn="'+ products[i].hsn + '" data-units='+ products[i].quantity + ' data-selling-price='+ products[i].selling_price  + ' class="product-wrapper " '+ 'data-name="' +products[i].name  +'" >'+ products[i].search  +'</div>'
                    }
                    target.closest('.products-wrapper').find('.options').html(html);

                    $(".product-wrapper").bind("click", (function (){
                        $scope.disableSKU = true;
                        $scope.disableTax = true;
                        var currentObject = $(this);
                        var currentInput = $(this).closest('.products-wrapper').find('input');
                        // currentInput.val(currentObject.data('name'));
                        $(this).closest('.products-wrapper').find('input').attr("data-sku", currentObject.data('sku'));
                        $(this).closest('.product-row').find('input[name="order_items.'+ index +'.name"]').val(currentObject.data('name'));
                        $(this).closest('.product-row').find('input[name="order_items.'+ index +'.sku"]').val(currentObject.data('sku'));
                        $(this).closest('.product-row').find('input[name="order_items.'+ index +'.selling_price"]').val(currentObject.data('selling-price')== null ? '' :currentObject.data('selling-price'));
                        $(this).closest('.product-row').find('input[name="order_items.'+ index +'.hsn"]').val(currentObject.data('hsn')==null? '': currentObject.data('hsn'));
                        // $(this).closest('.product-row').find('.in-stock').html(currentObject.data('units'));
                        if($('.product-table.active-table').children().length == 1){
                          $scope.orderDetail.weight = currentObject.data('p-weight') - 0;
                          $scope.orderDetail.length = currentObject.data('p-length') - 0;
                          $scope.orderDetail.breadth = currentObject.data('p-breadth') - 0;
                          $scope.orderDetail.height = currentObject.data('p-height') - 0;
                          calculated_volumetric_weight()
                        } else {
                          $scope.orderDetail.weight = 0;
                          $scope.orderDetail.length = 0;
                          $scope.orderDetail.breadth = 0;
                          $scope.orderDetail.height = 0;
                          calculated_volumetric_weight()
                        }
                        $(this).closest('.products-wrapper').find('.options').html('');
                        $scope.$digest();
                    }));
                    $(".products-wrapper").mouseleave(function(){
                       $(this).find('.product-dorpdown').hide();
                    });
                    $(".products-wrapper").bind('mouseenter', function(){
                       $(this).find('.product-dorpdown').show();
                    });
                    $(".products-wrapper .productId").keypress(function(){
                       $('.product-dorpdown').show();
                    });

                })
                .error(function(error, status)
                {
                    AppService.isAuth(error, 'danger');
                }).finally(function()
                {
                    AppService.isAuth(error, 'danger');
                });
            }

            function getChannels () {
              AppService.get('channels', true)
              .success(function(data){
                  var defaultChannel = {
                      name: 'Select Channel',
                      id: ''
                  }

                  loaderFactory.hide();
                  //$scope.isPreloader = false;
                  var channelList = data.data;
                  $scope.customChannelList = [];
                  $scope.customChannelList = channelList.filter(function(x){
                    return (x.base_channel_code == 'CS' && x.status_code == 1)
                  }).map(function(channel){
                    var obj = {
                      'name': channel.name,
                      'id': channel.id
                    }
                    return obj;
                  })
                  if($scope.customChannelList.length > 1){
                    $scope.customChannelList.unshift(defaultChannel);
                  }
                  $scope.orderDetail.channel =  $scope.customChannelList[0]
              })
              .error(function(error){
                  AppService.isAuth(error, 'danger');
                  loaderFactory.hide();
              })
            }

            function getStateList(whichCountry){
                var countryId = '99';
                loaderFactory.display('Please Wait');
                //$scope.isPreloader = true;
                AppService.get('countries/show/'+  countryId, true)
                .success(function(data){
                    loaderFactory.hide();
                    $scope.pickupStateList = angular.copy(data.data);
                    $scope.orderDetail.pickup_state = {
                        id : '0',
                        name: "Please Select State"
                    }
                    $scope.pickupStateList.unshift($scope.orderDetail.pickup_state);
                })
                .error(function(error){
                    AppService.isAuth(error, 'danger');
                    loaderFactory.hide();
                    //$scope.isPreloader = false;
                })
            }

            var index = 1;
            var rowIndexArry = [0];

            function checkSKU (asd) {
              console.log(asd);
            }

            function addNewProductRow(){
                var validationIndex = '';
                for (var i = rowIndexArry.length-1; i >= 0; i--){
                    if(rowIndexArry[i] != 'null'){
                        validationIndex = i;
                        break;
                    }
                }

                if( !$('.quantity' +validationIndex ).val() ){
                    Notify.alert('Please Input Product Quantity', {status: 'danger', timeout: 7000 });
                    return false;
                }

                $('.row-remove').prop('disabled', false);
                var $tableRow =  $('<tr class="product-row">'+
                                    '<td>'+
                                      '<div class="col-lg-12 col-mg-12 products-wrapper p0">'+
                                          '<input type="text" autocomplete="off" name="order_items.'+ index +'.name"  class="input-sm form-control error-append name'+ index +'" data-sku ="" ng-keyup="getProduct($event, '+ index +')" class="form-control input-sm"  placeholder="Search Product by SKU">'+
                                          '<div class="options product-dorpdown" style="z-index:1000; position: absolute; width:100%;" >'+
                                          '</div>'+
                                      '</div>'+
                                    '</td>'+
                                    '<td>' +
                                        '<input type="text" name="order_items.'+ index +'.sku" class="form-control input-sm error-append sku'+ index +'" placeholder="Enter SKU" ng-disabled="disableSKU'+index+'">'+
                                    '</td>'+
                                    '<td>' +
                                        '<input type="text" name="order_items.'+ index +'.hsn" class="form-control input-sm error-append hsn'+ index +'" placeholder="Enter HSN">'+
                                    '</td>'+
                                    '<td>' +
                                        '<input type="text" name="order_items.'+ index +'.units" class="form-control input-sm error-append quantity'+ index+'" placeholder="Enter Qty" ng-blur="updateTotals($event, '+index +')" ng-keyup="updateTotals($event, '+index +')">'+
                                    '</td>'+
                                    '<td>' +
                                        '<input type="text" name="order_items.'+ index +'.tax" class="form-control input-sm error-append tax'+ index +'" placeholder="Enter Tax" ng-disabled="disableTax'+index+'">'+
                                    '</td>'+
                                    '<td>'+
                                        '<input type="text" name="order_items.'+ index +'.selling_price" class="form-control input-sm error-append price'+ index +'" placeholder="Enter Price" ng-blur="updateTotals($event, '+index +')" ng-keyup="updateTotals($event, '+index+')">'+
                                    '</td>'+
                                    '<td>'+
                                        '<input type="text" class="form-control input-sm discount'+ index +'" placeholder="Enter Discount" ng-blur="updateTotals($event, '+index +')" ng-keyup="updateTotals($event, '+index +')">'+
                                    '</td>'+
                                    '<td class="row-total"> 0.00</td>'+
                                    '<td class="pt-lg">' +
                                      '<button class="btn p-sm ml-sm btn-blue row-remove" ng-click="removeProductRow($event, '+index+')">'+
                                          '<i class="fa fa-minus"></i>'+
                                      '</button>'+
                                    '</td>'+
                            '</tr>').appendTo('.product-table');
                            $compile($tableRow)($scope);
                            index++;
                            rowIndexArry.push(index);
            }

            function removeProductRow($event, index){
                var target = angular.element($event.currentTarget);
                var subTractRowTotalValue = parseFloat(target.closest('.product-row').find('.row-total').html())
                $scope.grand_total = $scope.grand_total - subTractRowTotalValue;
                $scope.sub_total = $scope.sub_total - subTractRowTotalValue;
                target.closest('.product-row').remove();
                rowIndexArry[index] = 'null';
                var notNullValue = 0;
                var notNullArry = [];
                for (var i =0; i < rowIndexArry.length ; i++)
                {
                    if( rowIndexArry[i] != 'null' )
                    {
                        notNullValue++;
                        notNullArry.push(i);
                    }
                    if(notNullValue == 2)
                    {
                        break;
                    }
                }

                if(notNullValue == 1 )
                {
                    $('.row-remove').prop('disabled', true);
                }

            }

            function updateGrandTotal($event) {
                var target = angular.element($event.currentTarget);
                var targetValue = parseFloat(target.val());
            }


            function updateTotals($event, rowNo){
                var target = angular.element($event.currentTarget);
                //get data
                var price = parseFloat(target.closest('.product-row').find('.price' + rowNo).val(),10);
                if(isNaN(price))
                {
                    target.closest('.product-row').find('.price' + rowNo).val('');
                    price = 0;
                }
                var quantity = parseFloat(target.closest('.product-row').find('.quantity' + rowNo).val(), 10);

                if(!numberValidation(quantity))
                {
                    target.closest('.product-row').find('.quantity' + rowNo).val('');
                    quantity = 0;
                }

                var discount = parseFloat(target.closest('.product-row').find('.discount' + rowNo).val(), 10);
                if(isNaN(discount))
                {
                    target.closest('.product-row').find('.discount' + rowNo).val('');
                    discount = 0;
                }
                var row_total = target.closest('.product-row').find('.row-total').html();
                    row_total = parseFloat(row_total);

                //update data
                if($scope.isOldOrder){
                  var tax = parseFloat(target.closest('.product-row').find('.tax' + rowNo).val(), 10);
                  var prodSelected = target.closest('.product-row').find('.checkbox' + rowNo).prop('checked');
                  if(!prodSelected){
                    updatedTotal = 0;
                  } else {
                    // var updatedTotal = +((price*quantity - discount*quantity) + tax).toFixed(1);
                    var updatedTotal = +(price*quantity - discount*quantity).toFixed(1);
                  }
                } else {
                  var updatedTotal = +(price*quantity - discount*quantity).toFixed(1);
                }
                target.closest('.product-row').find('.row-total').html(updatedTotal);
                $scope.sub_total = $scope.sub_total - row_total + updatedTotal;
                $scope.grand_total = $scope.grand_total - row_total + updatedTotal;
            }

           function numberValidation(s) {
                if (/^[0-9]{1,6}$/.test(s)) {
                  return true
                } else {
                  return false
                }
            }

            function getSelectedProducts() {
              var products = [];
              $("input:checkbox[name=product]").each(function(index) {
                var data = {
                  name: $(this).data('product-name'),
                  sku: $(this).data('sku'),
                  hsn: $(this).data('hsn'),
                  tax: $(this).data('tax'),
                  units: $(this).closest('.product-row').find('.quantity' + index).val() - 0,
                  selling_price: $(this).data('price'),
                  discount: $(this).data('discount')
                }

                if($(this)[0].checked){
                  products.push(data);
                }
              });
              return products;
            }

            function createReturn() {
                loaderFactory.display('Please Wait!');
                //$scope.isPreloader = true;
                var eventName = 'Clicked Create Return';
                var event_category = 'Create_Return_Clicked';
                ga_service.send('Return', event_category);
                //intercom event
                AppService.intercomEventAndPing(eventName);
                $('.validation-alert').remove();

                if($scope.isOldOrder){
                  order_items = getSelectedProducts();
                } else {
                  order_items = [];
                  for (var i = 0; i < index; i++) {
                    if($('.sku'+i).attr('data-sku') || $('.sku'+i).val()){
                      var obj = {};
                      obj['name'] = $('.name'+i).val();
                      obj['sku'] = $('.sku'+i).val();
                      obj['tax'] = $('.tax'+i).val();
                      obj['hsn'] = $('.hsn'+i).val();
                      obj['units'] = $('.quantity'+i).val();
                      obj['selling_price'] = $('.price'+i).val();
                      obj['discount'] = $('.discount'+i).val();
                      order_items.push(obj);
                    }
                  }
                }

                if( $scope.sub_total < 0 ){
                    Notify.alert("For order amount can not be less than zero", {status: 'danger', timeout: 7000 });
                    loaderFactory.hide();
                    return;
                }

                if($scope.grand_total < 0){
                    Notify.alert("Total amount can not be less than zero.", {status: 'danger', timeout: 7000 });
                    loaderFactory.hide();
                    return;
                }

                var data  =
                {
                    "order_id": $scope.orderDetail.order_id,
                    "payment_method": $scope.orderDetail.payment_method,
                    "shipping_isd_code": '+91',
                    "pickup_isd_code": $scope.orderDetail.pickup_mobile_country_code,
                    "order_date": $scope.orderDetail.order_date,
                    "channel_id": $scope.orderDetail.channel.id ? $scope.orderDetail.channel.id : null,
                    "pickup_customer_name": $scope.orderDetail.pickup_first_name,
                    "pickup_last_name": $scope.orderDetail.pickup_last_name,
                    "pickup_address": $scope.orderDetail.pickup_address_1,
                    "pickup_address_2": $scope.orderDetail.pickup_address_2,
                    "pickup_city": $scope.orderDetail.pickup_city,
                    "pickup_state": $scope.orderDetail.pickup_state.name != 'Please Select State' ? $scope.orderDetail.pickup_state.name: '',
                    "pickup_country": $scope.orderDetail.pickup_country.name,
                    "pickup_pincode": $scope.orderDetail.pickup_pincode,
                    "pickup_email": $scope.orderDetail.pickup_email,
                    "pickup_phone": $scope.orderDetail.pickup_phone,
                    "shipping_customer_name": $scope.orderDetail.shipping_location.name,
                    "shipping_address": $scope.orderDetail.shipping_location.address,
                    "shipping_address_2": $scope.orderDetail.shipping_location.address_2,
                    "shipping_city": $scope.orderDetail.shipping_location.city,
                    "shipping_country": $scope.orderDetail.shipping_location.country,
                    "shipping_pincode": $scope.orderDetail.shipping_location.pin_code,
                    "shipping_state": $scope.orderDetail.shipping_location.state != 'Please Select State' ? $scope.orderDetail.shipping_location.state: '',
                    "shipping_email": $scope.orderDetail.shipping_location.email,
                    "shipping_phone": $scope.orderDetail.shipping_location.phone,
                    'order_items': order_items,
                    "payment_method": $scope.orderDetail.payment_method,
                    "total_discount": $scope.total_discount,
                    "weight": $scope.orderDetail.weight,
                    "length": $scope.orderDetail.length,
                    "breadth": $scope.orderDetail.breadth,
                    "height": $scope.orderDetail.height,
                    "sub_total": $scope.sub_total,
                    "pickup_location_id": $scope.orderDetail.shipping_location.id
                }

                if($scope.isOldOrder){
                  data.existing_order_id = $stateParams.id
                }

                var url = 'orders/create/return';

                AppService.post(url , true, data)
                .success(function(data){
                    $state.go('app.returns');
                    loaderFactory.hide();
                    $scope.isPreloader = false;
                })
                .error(function(error){
                    if(error.status_code === 422){
                        AppService.alertValidation(error.errors, true);
                        Notify.alert("Please correct below given errors !", {status: 'danger', timeout: 7000 });

                        if($scope.isOldOrder && !$scope.orderDetail.shipping_location){
                          setErrorToProduct("Please select a drop location", 'pickup_location');
                        }
                        if(error.errors.hasOwnProperty('order_items')){

                            if(!$('[name="order_items.0.sku"]').val()) {
                                setErrorToProduct( "The item sku field is required" , 'order_items.0.sku');
                            }

                            if(!$('[name="order_items.0.selling_price"]').val()) {
                                setErrorToProduct( "The item selling price field is required",  'order_items.0.selling_price' );
                            }

                            if(!$('[name="order_items.0.units"]').val() ) {
                                setErrorToProduct( "The item unit field is required", 'order_items.0.units');
                            }

                            if(!$('[name="order_items.0.name"]').val() ) {
                                setErrorToProduct( "The item name field is required", 'order_items.0.name');
                            }
                        }
                    } else {
                        AppService.isAuth(error, 'danger');
                    }

                    loaderFactory.hide();
                    $scope.isPreloader = false;
                })
            }

            function setErrorToProduct( message, key )
            {
                var errorHtml = '<div class="help-block validation-alert">' + message + '</div>';
                $( "[name='"+ key +"']" ).closest('.error-append').after(errorHtml);
            }

            function calculated_volumetric_weight(){
                $scope.volumetric_weight =  Number($scope.orderDetail.length) * Number($scope.orderDetail.breadth) * Number($scope.orderDetail.height)/5000;
            };

            function getPickupLocation(){
                loaderFactory.display("Please Wait!");
                AppService.get('settings/company/pickup', true)
                .success(function(data){
                    $scope.addMoreAddress = data.data.allow_more;
                    $scope.pickupLocationList = data.data.shipping_address.filter(function(value){
                      return value.status != 0;
                    });
                    $scope.orderDetail.shipping_location = $scope.pickupLocationList[0];
                    loaderFactory.hide();
                })
                .error(function(error){
                    AppService.isAuth(error, 'danger');
                    loaderFactory.hide();
                });
            }

            function Range(start, end) {
                var result = [];
                for (var i = start; i <= end; i++) {
                    result.push(i);
                }
                return result;
            };

            function getPincodeDetails(pincode){
              if (pincode == null || pincode.toString().length != 6) {
                return;
              }
              loaderFactory.display('Fetching Location Details.')
              AppService.get('external/open/postcode/details?postcode='+pincode, false)
              .success(function(data){
                loaderFactory.hide()
                $scope.orderDetail.pickup_city = data.postcode_details.city
                $scope.pickupStateList.reduce(function(i, e){
                  if(e.name === data.postcode_details.state){
                    $scope.orderDetail.pickup_state = e;
                  }
                });
              })
              .error(function(err){
                loaderFactory.hide();
                Notify.alert(err.message, { timeout: 4000, status: 'danger' })
                $scope.orderDetail.pickup_city = '';
                $scope.orderDetail.pickup_state = $scope.pickupStateList[0];
              })
            }
        }
    }
})();

/**=========================================================
* Module: editOrderController
=========================================================*/
(function()
{
  'use strict';
  angular
  .module('app.orders')
  .controller('editOrderController', editOrderController);

  editOrderController.$inject = [ '$stateParams','$rootScope', '$scope', 'AppService' , '$state', 'Notify', '$uibModalInstance', 'items', 'SR_CONSTANTS', 'loaderFactory'];

  function editOrderController( $stateParams, $rootScope, $scope, AppService ,$state, Notify, $uibModalInstance, items, SR_CONSTANTS, loaderFactory){
    activate();
    function activate(){
      $scope.orderDetails  = items.order;
      $scope.editPartialAddress = items.editPartialAddress;

      if(Object.keys(items.order.errors ? items.order.errors : []).length > 0){
        AppService.alertValidation(items.order.errors, true);
      }

      $scope.cancel = cancel;
      $scope.getStateList = getStateList;
      $scope.getPincodeDetails = getPincodeDetails;
      $scope.updateOrderAddress = updateOrderAddress;

      loaderFactory.display('Please Wait!');
      //$scope.isPreloader = true;

      function getPincodeDetails(pincode){
        if(pincode == null || $scope.orderDetails.customer_country.id != 99){
          return;
        }

        if (pincode.toString().length != 6) {
          $scope.orderDetails.customer_city = '';
          $scope.orderDetails.customer_state = $scope.stateList[0]
          return;
        }

        loaderFactory.display('Fetching Location Details.')
        AppService.get('external/open/postcode/details?postcode='+pincode, false)
        .success(function(data){
          var city = data.postcode_details.city;
          $scope.orderDetails.customer_city = city;
          $scope.orderDetails.customer_state = $scope.stateList.filter(function(state){
            return state.code == data.postcode_details.state_code;
          })[0];
          loaderFactory.hide()
        })
        .error(function(err){
          Notify.alert(err.message, { timeout: 3000, status: 'danger' })
          $scope.orderDetails.customer_city = '';
          $scope.orderDetails.customer_pincode = '';
          $scope.orderDetails.customer_state = $scope.stateList[0]
          loaderFactory.hide();
        })
      }

      AppService.get(SR_CONSTANTS.api_urls.get_countries, true)
      .success(function(data){
        $scope.countryList = data.data;
        $scope.orderDetails.customer_country = data.data.reduce(function(countryDetails, country){
          if (country.id == (items.order.country_code != '' ? items.order.country_code : '99')) {
            countryDetails.push({
              id : country.id,
              name : country.name
            })
          }
          return countryDetails;
        }, [])[0];

        loaderFactory.hide();
        //$scope.isPreloader = false;

        AppService.get(SR_CONSTANTS.api_urls.get_countries_show + $scope.orderDetails.customer_country.id, true)
        .success(function(data){
          var state = data.data.reduce(function(stateDetails, state){
            if(state.id === items.order.state_code) {
              stateDetails.push({
                id : state.id,
                countryId : state.country_id,
                name : state.name
              });
            }
            return stateDetails;
          }, [])[0];

          if(state !== undefined){
            $scope.orderDetails.customer_state = state
          }
          else{
            $scope.orderDetails.customer_state =
            {
              id : 0,
              name : "Please Select State"
            }
          }

          loaderFactory.hide();

          $scope.stateList = data.data;
          $scope.stateList.unshift({id : '0',name: "Please Select State"});
        })
        .error(function(error){
          loaderFactory.hide();
          //$scope.isPreloader = false;
          AppService.isAuth(error);
        });
      })
      .error(function(error){
        loaderFactory.hide();
        //$scope.isPreloader = false;
        AppService.isAuth(error);
      });


      function getStateList() {
        loaderFactory.display('Please  Wait!');
        $scope.orderDetails.customer_city = ''
        $scope.orderDetails.customer_phone = '';
        $scope.orderDetails.customer_pincode = '';
        //$scope.isPreloader = true;
        $scope.orderDetails.shipments.isd_code = $scope.orderDetails.customer_country.isd_code;
        AppService.get(SR_CONSTANTS.api_urls.get_countries_show + $scope.orderDetails.customer_country.id, true)
        .success(function(data){
          loaderFactory.hide();
          //$scope.isPreloader = false;
          $scope.stateList = data.data;
          $scope.orderDetails.customer_state =
          {
            id : '0',
            name: "Please Select State"
          }
          $scope.stateList.unshift($scope.orderDetails.customer_state);
        })
        .error(function(error){
          loaderFactory.hide();
          //$scope.isPreloader = false;
          AppService.isAuth(error);
        });
      }


      function updateOrderAddress(){
        var postData ={};
        $('.validation-alert').remove();
        loaderFactory.display('Please Wait!');
        //$scope.isPreloader = true;
        if(items.order.status_code == 3 || items.order.status_code == 12 || items.order.status_code == 14){
          postData =
          {
            "order_id"              : $scope.orderDetails.id,
            "shipping_address"      : $scope.orderDetails.customer_address,
            "shipping_address_2"    : $scope.orderDetails.customer_address_2
          };
        }else{
          postData =
          {
            "order_id"              : $scope.orderDetails.id,
            "shipping_customer_name": $scope.orderDetails.customer_name,
            "shipping_phone"        : $scope.orderDetails.customer_phone,
            "shipping_email"        : $scope.orderDetails.customer_email,
            "shipping_address"      : $scope.orderDetails.customer_address,
            "shipping_address_2"    : $scope.orderDetails.customer_address_2,
            "shipping_city"         : $scope.orderDetails.customer_city,
            "shipping_state"        : $scope.orderDetails.customer_state.name != 'Please Select State' ? $scope.orderDetails.customer_state.name: '',
            "shipping_country"      : $scope.orderDetails.customer_country.name,
            "shipping_pincode"      : $scope.orderDetails.customer_pincode,
            "isd_code"              : $scope.orderDetails.shipments.isd_code
          };
        }

        postData.edit_data = true;

        AppService.post(SR_CONSTANTS.api_urls.update_order_address, true, postData)
        .success(function(data){
          $uibModalInstance.dismiss('cancel');
          $state.reload();
        })
        .error(function(error){
          loaderFactory.hide();
          //$scope.isPreloader = false;

          if(error.status_code == 422){
            AppService.alertValidation(error.errors, true);
          }
          else{
            AppService.isAuth(error);
          }
        })
      }

      $uibModalInstance.result.finally(function(){
        $scope.orderDetails.customer_country = items.order.customer_country.name;
        $scope.orderDetails.customer_state = items.order.customer_state.name;
      });

      function cancel(){
        $uibModalInstance.dismiss('cancel');
        $state.reload();
      }
    }
  }
})();

/**=========================================================
 * Module: manifestDetailController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('manifestDetailController', manifestDetailController);
    manifestDetailController.$inject = ['$rootScope', '$scope', 'AppService',  '$state', 'Notify', '$stateParams'];
    function manifestDetailController($rootScope, $scope, AppService, $state, Notify, $stateParams)
    {
        activate();
        function activate()
        {
          console.log('obj');
            $scope.manifestId = $stateParams.id;
            AppService.setHeight();

            $scope.maxSize = 2;
            $scope.totalItems = 100000;
            $scope.totalCount = '';
            $scope.CurrentPage = 1;
            var page = 1;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            $scope.selectedItems = 0;

            $scope.$watch("CurrentPage",
            function( newValue, oldValue )
            {
                page = newValue;
                getManifestDetailData()
            });

            $scope.sortType = '';
            $scope.sortReverse  = true;

            $scope.changePerPage = function()
            {
                getManifestDetailData();
            }

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getManifestDetailData();
            }

            function getManifestDetailData(perPage)
            {
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;

                AppService.get('manifests/show/'+ $scope.manifestId + '?page='+ page +'&per_page='+ perPage + '&sort_by=' +$scope.sortType +'&sort=' +sort, true)
                .success(function(data)
                {
                    $scope.isPreloader = false;
                    $scope.manifestDetail = data.data;
                    $scope.metaData = data.meta.pagination;
                    $scope.totalItems = $scope.metaData.total;
                    $scope.totalCount = $scope.metaData.count;
                    $scope.showingOrderNo =
                    {
                        from: (page-1)* perPage +1,
                        to: Math.min($scope.totalItems, page*perPage)
                    }
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

            $scope.backHistory = function()
            {
                window.history.back()
            }
            $scope.showProductPopup = function($event, listId)
            {
               var targetdiv = angular.element($event.currentTarget);
               var divposition = targetdiv.parent().position();
                if(Math.round(divposition.top) >= '320'){
                        targetdiv.next(".popover").show().removeClass('bottom').addClass('top').css({'top':'auto','bottom':'21px'});
                }
                else{
                    targetdiv.next(".popover").show().removeClass('top').addClass('bottom').css({'top':'70px','bottom':'auto'});
                }
            }
            $scope.hideProductPopup = function($event, listId)
            {
                var targetdiv = angular.element($event.currentTarget);
                 targetdiv.next(".popover").hide()
            }

        }
    }
})();

/**=========================================================
 * Module: manifestDetailController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('manifestDetailController', manifestDetailController);
    manifestDetailController.$inject = ['$document', '$rootScope', '$scope', 'AppService',  '$state', 'Notify', '$stateParams', '$localStorage', 'loaderFactory'];
    function manifestDetailController($document, $rootScope, $scope, AppService, $state, Notify, $stateParams, $localStorage, loaderFactory){
        activate();
        function activate()
        {
            $rootScope.isRestrictFreePlan = false;
            var user = $localStorage.USER;
            $rootScope.show_channel_sync_button = user.show_channel_page;
            if(user) {
                $rootScope.isBasicPlan = user.is_basic_plan;
            }
            if(typeof user !== 'undefined' && user.is_free_plan)
            {
                $rootScope.isRestrictFreePlan = true;
            }
            var orderdate = {
                className : 'orderdate',
                width: $('.orderdate').outerWidth(),
                tableClass: 'manifestDetail-order-wrapper'
            }

            var orderid = {
                className : 'orderid',
                width: $('.orderid').outerWidth(),
            }

            var sla = {
                className : 'ordersla',
                width: $('.ordersla').outerWidth(),
            }

            var ordershippingdetails = {
                className : 'ordershippingdetails',
                width: $('.ordershippingdetails').outerWidth(),
            }

            $scope.manifestId = $stateParams.id;
            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }


            getManifestDetailData();

            $scope.paginatedData = function()
            {
                $("th").remove();
                $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.sortType = '';
            $scope.sortReverse  = true;

            $scope.printManifest = printManifest;

            function printManifest(manifestId){
              loaderFactory.display('Printing your Manifest!')
              var data = {
                ids: [manifestId]
              }
              if(!data){
                loaderFactory.hide();
                return false
              }
              AppService.post('manifests/print' , true, data)
              .success(function(data){
                AppService.downloadDataWithUrl(data.manifest_url, 'manifests');
                loaderFactory.hide();
              })
              .error(function(error){
                AppService.isAuth(error);
                loaderFactory.hide();
              })
            }

            $scope.changePerPage = function()
            {
                $("th").remove();
                setTimeout(function() {
                    $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
                }, 2);
            }

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getManifestDetailData();
            }

            $scope.filterData = function()
            {

            }

            function getManifestDetailData(perPage)
            {
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('manifests/show/'+ $scope.manifestId + '?page='+ $scope.page +'&per_page='+ perPage + '&sort_by=' +$scope.sortType +'&sort=' +sort, true)
                .success(function(data)
                {
                    if(!data.data.length)
                    {
                        $scope.isPreloader = false;
                    }
                    $scope.manifestDetail = data.data;
                    $scope.metaData = data.meta.pagination;
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    AppService.setHeight();

                    $scope.$on('manifestDetail', function(ngRepeatFinishedEvent)
                    {
                        AppService.setWidth(orderdate, orderid, ordershippingdetails);
                        $scope.isPreloader = false;
                    });
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

            $scope.backHistory = function()
            {
               // $state.go('app.manifests', {type: 'open'});
               window.history.back();
            }
            $document.on("click", function()
            {

                $('.popover').hide();
            });
            $scope.showProductPopup = function($event, listId)
            {
               $event.stopPropagation();
               var targetdiv = angular.element($event.currentTarget);
               var divposition = targetdiv.parent().position();
                if(Math.round(divposition.top) >= '320'){
                        targetdiv.next(".popover").show().removeClass('bottom').addClass('top').css({'top':'auto','bottom':'21px'});
                }
                else{
                    targetdiv.next(".popover").show().removeClass('top').addClass('bottom').css({'top':'70px','bottom':'auto'});
                }
            }
            $scope.hideProductPopup = function($event, listId)
            {
                var targetdiv = angular.element($event.currentTarget);
                 targetdiv.next(".popover").hide()
            }

        }
    }
})();

/**=========================================================
 * Module: manifestedOrdersController
  =========================================================*/
(function(){
    'use strict';
    angular
    .module('app.orders')
    .controller('manifestedOrdersController', manifestedOrdersController);

    manifestedOrdersController.$inject = ['$document','loaderFactory', '$location','$rootScope', '$scope', '$http', 'AppService',  '$state', 'Notify', '$uibModal', '$stateParams', '$localStorage', 'SR_CONSTANTS', '$timeout'];

    function manifestedOrdersController($document, loaderFactory, $location, $rootScope, $scope, $http, AppService, $state, Notify, $uibModal, $stateParams, $localStorage, SR_CONSTANTS, $timeout){
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }

        function activate(user){
            //Bulk Shipping START
            $scope.selectall = false;
            $scope.allOrdersSelected = false;
            $scope.sortTable = sortTable
            $scope.printLabel = printLabel;
            $scope.cancelOrder = cancelOrder;
            $scope.printInvoice = printInvoice;
            $scope.changePerPage = changePerPage;
            $scope.paginatedData = paginatedData;
            $scope.createManifest = createManifest;
            $scope.disableButtons = disableButtons;
            $scope.checkBulkStatus = checkBulkStatus;
            $scope.selectAllOrders = selectAllOrders;
            $scope.hideMoreProduct = hideMoreProduct;
            $scope.showProductPopup = showProductPopup;
            $scope.hideProductPopup = hideProductPopup;
            $scope.getManifestedOrder = getManifestedOrder;

            function checkBulkStatus(){
              $scope.selectall = $('#checkall-checkbox input')[0].checked;
              $scope.allOrdersSelected = false;
            }

            var currentFilters = $location.search();
            $scope.filterModels = {
                to: angular.isDefined(currentFilters.to) ? currentFilters.to : "",
                from: angular.isDefined(currentFilters.from) ? currentFilters.from : "",
                search: angular.isDefined(currentFilters.search) ? currentFilters.search : "",
                channel_id: angular.isDefined(currentFilters.channel_id) ? currentFilters.channel_id : "",
                order_status: angular.isDefined(currentFilters.order_status) ? currentFilters.order_status : "",
                payment_method: angular.isDefined(currentFilters.payment_method) ? currentFilters.payment_method : "",
                pickup_address_id: angular.isDefined(currentFilters.pickup_address_id) ? currentFilters.pickup_address_id : ""
            }

            function selectAllOrders(){
              if($scope.allOrdersSelected){
                $scope.allOrdersSelected = false;
                $('#checkall-checkbox input')[0].checked = false;
                $('input[type=checkbox]').prop('checked', $('#checkall-checkbox input')[0].checked)
                $scope.selectall = false;
                disableButtons();
              } else {
                $scope.allOrdersSelected = true;
                disabledPrintbtn(true);
              }
            }

            //Long Polling Start
            $scope.bulkInQueue = false;
            $scope.showBulkInfoRemove = false;
            var loadTime = 6000, //Load the data every second
              errorCount = 0, //Counter for the server errors
              callCount = 0,
              loadPromise; //Pointer to the promise created by the Angular $timout service

            $scope.bulkdata;
            $scope.bulk_type;
            $scope.bulkInfoModal = bulkInfoModal;

            function bulkInfoModal (type) {
              var bulkModal = $uibModal.open({
                animation: true,
                templateUrl: 'bulkInfoModal.html',
                scope: $scope,
                size: 'sm'
              })
              .closed.then(function(){
                if(!$scope.bulkInQueue && callCount > 1){
                  window.location.reload();
                }
              });
            }

            function bulkSuccessFn(res) {
              $scope.bulkInQueue = true;
              $scope.showBulkInfoRemove = false;
              $scope.bulkdata = {
                total: res.data.total != null ? res.data.total : '-' ,
                success: res.data.success != null ? res.data.success : '-' ,
                error: res.data.error != null ? res.data.error : '-' ,
                pending: res.data.pending != null ? res.data.pending : '-' ,
              }
              $scope.bulkStatus = res.data.status;
              errorCount = 0;
              if ($scope.bulkStatus == 0) {
                cancelNextLoad();
                if(res.data.pending == 0){
                  bulkInfoModal();
                  $scope.bulkInQueue = false;
                  $scope.showBulkInfoRemove = true;
                  delete $localStorage.bulk_pickup_request;
                } else if(res.data.pending == null){
                  $scope.bulkInQueue = false;
                }
              } else {
                nextLoad();
              }
              callCount++;
            }

            var getBulkData = function() {
              var bulk_type = $localStorage.bulk_pickup_request ? $localStorage.bulk_pickup_request : false;
              $scope.bulk_type = bulk_type;
              if(bulk_type){
                AppService.get('courier/bulk_details?type=' + bulk_type, true)
                .then(function(res){
                  bulkSuccessFn(res);
                })
                .catch(function(res) {
                  $scope.errorMsg = 'Server error';
                  nextLoad(++errorCount * 2 * loadTime);
                });
              } else {
                AppService.get('courier/bulk_details?type=6', true)
                .then(function(res){
                  if(res.data.status){
                    $localStorage.bulk_pickup_request = 6
                    bulkSuccessFn(res);
                  } else {
                    AppService.get('courier/bulk_details?type=2', true)
                    .then(function(res){
                      if(res.data.status){
                        $localStorage.bulk_pickup_request = 2
                        bulkSuccessFn(res)
                      }
                    })
                    .catch(function(res) {
                      $scope.errorMsg = 'Server error';
                      nextLoad(++errorCount * 2 * loadTime);
                    });
                  }
                })
                .catch(function(res) {
                  $scope.errorMsg = 'Server error';
                  nextLoad(++errorCount * 2 * loadTime);
                });
              }
            };

            var cancelNextLoad = function() {
              $timeout.cancel(loadPromise);
            };

            var nextLoad = function(mill) {
              mill = mill || loadTime;

              //Always make sure the last timeout is cleared before starting a new one
              cancelNextLoad();
              loadPromise = $timeout(getBulkData, mill);
            };

            getBulkData();

            //Always clear the timeout when the view is destroyed, otherwise it will keep polling and leak memory
            $scope.$on('$destroy', function() {
              cancelNextLoad();
            });

            //Long Polling End

            //Bulk Shipping END

            function disableButtons(){
                setTimeout(function() {
                    var manifestlength = getSelectedIds("", true);
                    if(manifestlength.length >= '1'){
                        $('.manifest').attr('disabled', false);
                        $('.print').attr('disabled', false);
                    }
                    else {
                        $('.manifest').attr('disabled', true);
                        $('.print').attr('disabled', true);
                    }
                    disabledPrintbtn($scope.allOrdersSelected);
                }, 2);
            }

            function disabledPrintbtn(allOrdersSelected){
                var totalSelected = getSelectedIds("", true);
                if(allOrdersSelected){
                    if(totalSelected.length < $scope.totalItems){
                      $('.print').attr('disabled', true);
                    }
                }
            }

            $rootScope.isRestrictFreePlan = false;
            $rootScope.show_channel_sync_button = user.show_channel_page;
            if(user) {
              $rootScope.isBasicPlan = user.is_basic_plan;
            }
            if(typeof user !== 'undefined' && user.is_free_plan){
              $rootScope.isRestrictFreePlan = true;
            }

            var action = {
                className : 'action',
                width: $('.action').outerWidth(),
                tableClass: 'manifested-order-wrapper'
            }
            var sla = {
                className : 'ordersla',
                width: $('.ordersla').outerWidth(),
            }
            var ordershippingdetails = {
                className : 'ordershippingdetails',
                width: $('.ordershippingdetails').outerWidth(),
            }
            var orderdate = {
                className : 'orderdate',
                width: $('.orderdate').outerWidth(),
            }
            var orderid = {
                className : 'orderid',
                width: $('.orderid').outerWidth(),
            }


            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }

            AppService.get('orders/manifestfilters', true)
                .success(function(data) {
                    $scope.channel_filter_data = data.channels;
                    $scope.statuses_filter_data = data.statuses;
                    $scope.paymentTypes_filter_data = data.paymentTypes;
                    $scope.courier_filter_data = data.shippingPartners;
                })
                .error(function(error) {
                    AppService.isAuth(error);
                });

            getManifestedOrderData();

            function paginatedData() {
                $('th').remove();
                var currentFilters = $location.search();
                currentFilters.perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                currentFilters.page = $scope.page;
                $location.search(currentFilters);
            }

            $scope.sortType = 'base_channel_code';
            $scope.sortReverse  = false;


            function changePerPage() {
                $('th').remove();
                var currentFilters = $location.search();
                currentFilters.perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                currentFilters.page = $scope.page;
                $location.search(currentFilters);
            }


            function sortTable(type){
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getManifestedOrderData();
            }

            function getManifestedOrder(){
                getManifestedOrderData();
            }
            function getManifestedOrderData(){
                loaderFactory.display('Preparing your Orders Ready to Ship')
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                var filters = $location.search();
                if(angular.isDefined(filters.perPage)){
                    filters.per_page = filters.perPage;
                }else{
                    filters.per_page = 15;
                }
                var url = 'orders/manifested';
                var manifestedOrders = AppService.get_with_params(url, filters, true)

                manifestedOrders
                .success(function(data){
                    delete filters.per_page;
                    if(!data.data.length){
                      loaderFactory.hide();
                      $scope.isPreloader = false;
                    }
                    $scope.manifestedOrder = data.data;
                    $scope.metaData = data.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    AppService.setHeight();
                    $scope.$on('manifestedOrder', function(ngRepeatFinishedEvent){
                        $scope.isPreloader = false;
                        AppService.setWidth(action, ordershippingdetails, orderdate, orderid);
                        loaderFactory.hide();
                    });

                })
                .error(function(error){
                    delete filters.per_page;
                    AppService.isAuth(error);
                    loaderFactory.hide();
                    $scope.isPreloader = false;
                })
            }

            function printInvoice(action, orderids){
              var data = {};
              if(action === 'single'){
                loaderFactory.display('Generating Your Invoice. Please Wait!');
                data = {
                  ids:[orderids]
                }
              } else {
                loaderFactory.display('Generating Invoices. Please Wait!')
                data = getSelectedIds();
              }

              if(!data){
                loaderFactory.hide();
                return false;
              }
              AppService.post('orders/print/invoice', true, data, true)
              .success(function(data){
                if(data.invoice_url){
                  AppService.downloadDataWithUrl(data.invoice_url, 'Invoice')
                } else {
                  Notify.alert(data.message, {status: 'success', timeout: 5000});
                }
                disableButtons()
                loaderFactory.hide();
              })
              .error(function(error){
                loaderFactory.hide();
                AppService.isAuth(error);
              })
            }
            var d = new Date();
            var time = d.getHours();

            function cancelOrder(order){
              var data = order;
              var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'app/views/Orders/cancel-order.html',
                controller: 'cancelOrderController',
                size: order.status_code==1 || order.status_code==2?'sm':'recharge',
                resolve: {
                  items: function (){
                   return data;
                  }
                }
              });
            };

            function createManifest(isSingle, order){
                loaderFactory.display('Fetching Data.')
                var eventName = '';
                var data = getSelectedIds('', '', true);
                if(!angular.isDefined(isSingle)){
                    isSingle = data.ids.length == 1;
                }
                if(!data && !isSingle){
                    loaderFactory.hide();
                    return false;
                }
                if(!isSingle){
                    loaderFactory.display('Creating Manifests')
                    eventName = 'Clicked Bulk - Create Manifest';
                    data.shipment_id =  data.ids;
                    var items =
                    {
                        count: data.ids.length,
                        data: data
                    }
                    if(items.count=='1'){
                        var countMessage = 'order';
                    }
                    else{
                        var countMessage = 'orders';
                    }
                    if(time >= 13){
                        Notify.alert('Your request to manifest '+items.count  +" "+ countMessage +' and schedule its pick-up has been taken. We are processing it and will let you know via email.<br/> Your shipment may not be picked today, if scheduled post cutoff time',{ timeout: '3000'});
                    } else {
                        Notify.alert('Your request to manifest '+items.count  +" "+ countMessage +' and schedule its pick-up has been taken. We are processing it and will let you know via email',{ timeout: '3000'});
                    }
                    delete data.ids;
                }
                if(isSingle){
                    loaderFactory.display('Creating Manifest')
                    if(time >= 13){
                        Notify.alert('Your shipment may not be picked today, if scheduled post cutoff time.',{ timeout: '3000'});
                    }
                    eventName = 'Clicked Single - Create Manifest';
                    if(angular.isDefined(order)){
                         var single_data = {
                            shipment_id: [order.shipment_id]
                        };
                    }else{
                        var single_data = {
                            shipment_id: data.ids
                        };
                    }

                    var items =
                    {
                        count: '1',
                        data: single_data
                    }
                }

                $('.btn-ext.manifest').attr('disabled', true);
                $('.btn.print').attr('disabled', true);
                $scope.selectall = false;

                 //intercom event
                AppService.intercomEventAndPing(eventName);
                let url;
                let $data;
                if($scope.allOrdersSelected){
                  url = SR_CONSTANTS.api_urls.generate_bulk_pickup;
                  $data = $scope.filterModels;
                } else {
                  url = SR_CONSTANTS.api_urls.generate_pickup;
                  $data = items.data;
                }

                AppService.post(url, true, $data)
                    .success(function(data){
                        $('input[type=checkbox]').prop('checked', false)
                        disableButtons();
                        if(data.pickup_status == 0) {
                            Notify.alert(data.response.data);
                        }
                        if(angular.isDefined(data.response) && angular.isDefined(data.response.data.dhl_handover_id)){
                            Notify.alert("The Pickup Label and Handover Note for DHL would be sent to your registered email id after 15 minutes.")
                        }
                        if(angular.isDefined(data.message)){
                            Notify.alert(data.message);
                        }
                        if(isSingle){
                            AppService.post('manifests/generate', true, items.data)
                            .success(function(data){
                                loaderFactory.hide();
                                AppService.downloadPdf(data.data, data.name);
                            })
                            .error(function(error){
                                loaderFactory.hide();
                                AppService.isAuth(error);
                            })
                        }
                        else{
                            if($scope.allOrdersSelected){
                              $localStorage.bulk_pickup_request = 6
                            } else {
                              $localStorage.bulk_pickup_request = 2
                            }
                            loaderFactory.hide();
                            getBulkData();
                        }
                    })
                    .error(function(error){
                        // $uibModalInstance.dismiss('cancel');
                        $('.btn-ext.manifest').attr('disabled', false);
                        $('.btn.print').attr('disabled', false);
                        loaderFactory.hide();
                        AppService.isAuth(error);
                    });

            }

            function getSelectedIds(id, isCancel, isManifest){
                var orderId = [];
                $("input:checkbox[name=orderId]:checked").each(function(){
                    if(isManifest){
                        var inqueue = $(this).data('in-queue');
                        if (inqueue == 0) {
                            orderId.push($(this).attr('data-id'));
                        }
                    }
                    else{
                      orderId.push($(this).val());
                    }
                });

                if(!orderId.length)
                {
                    loaderFactory.hide();
                    return false;
                }

                if(isCancel)
                {
                    return orderId;
                }

                var data =
                {
                    ids: orderId
                }
                return data;
            }

            function printLabel(action, shipmenids){
              var orderId = [];
              if(action === 'single'){
                loaderFactory.display('Printing Your Label. Please Wait!');
                var postData =
                {
                  shipment_id: [shipmenids]
                };
              }
              else{
                loaderFactory.display('Printing All Selected Labels. Please Wait!');
                var orderId = [];
                var data =
                {
                    ids: orderId
                }
                if(orderId.length>1){
                    Notify.alert("Only Single Row Allowed To Print");
                    loaderFactory.hide();
                    return false;
                }

                $("input:checkbox[name=orderId]:checked").each(function(){
                    orderId.push($(this).data('id'));
                });
                var postData =
                {
                    shipment_id: data.ids
                };
              }
              AppService.post('courier/generate/label', true, postData)
              .success(function(data){
                disableButtons();
                if (data.name) {
                  AppService.downloadPdf(data.data, data.name);
                }
                else if(data.label_created){
                  AppService.downloadDataWithUrl(data.label_url, 'label')
                }
                loaderFactory.hide();
              })
              .error(function(error){
                loaderFactory.hide();
                AppService.isAuth(error);
              })
            }

            function hideMoreProduct($event, product){
              if( product.length <2 ){
                var target = angular.element($event.currentTarget);
                target.find('.popover').css('display', 'none');
              }
            }

            setTimeout(function() {
             $('.print').attr('disabled', true);
            }, 2);

            $document.on("click", function(){
              $('.popover').hide();
            });

            function showProductPopup($event, listId){
              $event.stopPropagation();
              var targetdiv = angular.element($event.currentTarget);
              var divposition = targetdiv.parents("tr").position();
              if(Math.round(divposition.top) >= '320'){
                      targetdiv.parent().next(".popover").show().removeClass('bottom').addClass('top').css({'top':'auto','bottom':'29px'});
              }
              else{
                  targetdiv.parent().next(".popover").show().removeClass('top').addClass('bottom').css({'top':'78px','bottom':'auto'});
              }
            }

            function hideProductPopup($event, listId){
              var targetdiv = angular.element($event.currentTarget);
              targetdiv.parent().next(".popover").hide()
            }
        }
    }
})();

/**=========================================================
 * Module: manifestsController
  =========================================================*/
(function(){
  'use strict';

  angular
  .module('app.orders')
  .controller('manifestsController', manifestsController);

  manifestsController.$inject = ['$document', '$location', '$rootScope', '$scope', 'AppService',  '$state', 'Notify', '$stateParams', '$uibModal', '$localStorage','loaderFactory'];

  function manifestsController($document, $location, $rootScope, $scope, AppService, $state, Notify, $stateParams, $uibModal, $localStorage, loaderFactory){
    var user = $localStorage.USER;
    if(user){
      activate(user);
    }
    function activate(user){
      var currentFilters = $location.search();
      $scope.filterModels = {
        to: angular.isDefined(currentFilters.to) ? currentFilters.to : "",
        from: angular.isDefined(currentFilters.from) ? currentFilters.from : "",
        courier_id: angular.isDefined(currentFilters.courier_id) ? currentFilters.courier_id : ""
      }

      $rootScope.isRestrictFreePlan = false;
      $rootScope.show_channel_sync_button = user.show_channel_page;
      $rootScope.isBasicPlan = user.is_basic_plan;
      if(typeof user !== 'undefined' && user.is_free_plan){
        $rootScope.isRestrictFreePlan = true;
      }

      $rootScope.orderActive = 'active';
      $scope.maxSize = 2;
      $scope.totalItems = 10000000;
      $scope.page = $stateParams.page;

      $scope.itemsPerPage =[
        {value:'15', id:0},
        {value:'30', id:1},
        {value:'60', id:2},
        {value:'100', id:3}
      ];

      $scope.paginatedData = paginatedData;
      $scope.changePerPage = changePerPage;
      $scope.sortTable = sortTable;
      $scope.printManifest = printManifest;
      $scope.pickupRetry = pickupRetry;
      $scope.bulkReassign = bulkReassign;
      $scope.disableButtons = disableButtons;
      $scope.showProductPopup = showProductPopup;
      $scope.printBulkInvoice = printBulkInvoice;
      $scope.printBulkLabel = printBulkLabel;
      $scope.getManifestOrderData = getManifestOrderData;

      var intercomEventName = '';
      var manifestType = typeof $stateParams.type === undefined ? 'open' : $stateParams.type;
      if(manifestType == 'open'){
        $scope.isOpenManifest = 'manifest-active';
        $scope.isOpenActive = 'active';
        $scope.maifestwrapper ="manifests-open";
        var status = 1;
        intercomEventName = 'Clicked Manifest-Open Page';
      }
      else{
        $scope.isCloseManifest = 'manifest-active';
        $scope.isCloseActive = 'active';
        $scope.maifestwrapper ="manifests-close";
        var status = 2;
        intercomEventName = 'Clicked Manifest-Close Page';
      }

      function getFiltersData(){
        AppService.get('orders/manifestfilters', true)
        .success(function(data) {
          $scope.courier_filter_data = data.shippingPartners;
        })
        .error(function(error) {
          AppService.isAuth(error);
        });
      }

      getFiltersData()
      //intercom event
      AppService.intercomEventAndPing(intercomEventName);

      var orderdate = {
        className : 'orderdate',
        width: $('.orderdate').outerWidth(),
        tableClass: $scope.maifestwrapper
      }

      var orderid  = {
        className : 'orderid',
        width: $('.orderid').outerWidth(),
      }

      var status = {
        className : 'status',
        width: $('.status').outerWidth(),
      }

      var action = {
        className : 'processing-order-table-action',
        width: $('.processing-order-table-action').outerWidth(),
      }

      var pickup = $stateParams.pickup;

      if($stateParams.perPage == 30){
        $scope.selectedItems = 1;
      }
      else if($stateParams.perPage == 60){
        $scope.selectedItems = 2;
      }
      else if($stateParams.perPage == 100){
        $scope.selectedItems = 3;
      }
      else{
        $scope.selectedItems = 0;
      }

      getManifestOrderData();

      function paginatedData() {
        $('th').remove();
        var currentFilters = $location.search();
        currentFilters.page = $scope.page;
        $location.search(currentFilters);
      }

      $scope.sortType = 'base_channel_code';
      $scope.sortReverse  = false;


      function changePerPage() {
        $('th').remove();
        var currentFilters = $location.search();
        currentFilters.perPage = $scope.itemsPerPage[$scope.selectedItems].value;
        $location.search(currentFilters);
      }

      function sortTable(type){
        $scope.sortType = type;
        $scope.sortReverse = !$scope.sortReverse;
        getManifestOrderData();
      }

      function printManifest(action, manifestId){
        var isAnyQuedOrError = false;
        $scope.isPreloader = true;
        if(action === 'bulk'){
          var data = getSelectedIds();
        }
        else if(action === 'single'){
          var data = {
            ids: [manifestId]
          }
        }
        if(!data){
          $scope.isPreloader = false;
          return false
        }
        var length = data.ids.length;
        var idData = data.ids;
        for (var i = 0; i < length; i++){
          var manifestLength = $scope.manifestsOrder.length
          for (var j = 0; j < manifestLength; j++){
            if($scope.manifestsOrder[j].manifest_id == data.ids[i] && ($scope.manifestsOrder[j].status == 'PICKUP ERROR')){
              isAnyQuedOrError = true;
              idData.splice(i, 1);
            }
          }
        }
        if(isAnyQuedOrError){
          Notify.alert('Manifest in pickup Queued status cannot be printed');
        }
        AppService.post('manifests/print' , true, data)
        .success(function(data){
          AppService.downloadDataWithUrl(data.manifest_url, 'manifests');
          $scope.isPreloader = false;
          $("input:checkbox").prop( "checked", false );
        })
        .error(function(error){
          AppService.isAuth(error);
          $scope.isPreloader = false;
        })
      }

      function pickupRetry(manifest_id, shipment_ids){
        $scope.isPreloader = true;
        var shipment_data = {
          manifest_id : manifest_id,
          shipment_id : shipment_ids,
          status : 'retry',
          is_reassign: 0,
          company_id : user.company_id
        };

        AppService.post('courier/generate/pickup' , true, shipment_data)
        .success(function(data){
          AppService.post('manifests/regenerate', true, shipment_data)
          .success(function(data){
            $state.reload();
            $scope.isPreloader = false;
          })
          .error(function(error){
            $scope.isPreloader = false;
            AppService.isAuth(error);
          })
        })
        .error(function(error){
          AppService.isAuth(error);
          $scope.isPreloader = false;
        })
      }

      function bulkReassign(){
        if($rootScope.weight < 100) {
            openRechargeModal();
            $scope.isPreloader = false;
            return false;
        }
        $scope.isPreloader = true;
        var dataItems = getSelectedIds('id');
        if(!dataItems){
          $scope.isPreloader = false;
          return false;
        }

        var postData =
        {
            manifest_id: dataItems.ids[0]
        }
        AppService.post('courier/bulk_reassign_serviceability' , true, postData)
        .success(function(data){
          $scope.isPreloader = false;
          $("input:checkbox").prop( "checked", false );
          if(data.status == 0){
              Notify.alert(data.response.message);

          }
          else {
            dataItems.count = data.length;
            dataItems.message = data.response.message;
            var modalInstance = $uibModal.open({
              animation: true,
              backdrop  : 'static',
              keyboard  : false,
              templateUrl: 'bulkReassignCourier.html',
              controller: 'bulkReassignController',
              size: 'lg',
              resolve: {
                items: function (){
                  return dataItems;
                }
              }
            });
          }
        })
        .error(function(error){
          $scope.isPreloader = false;
          AppService.isAuth(error);
        })
      }

      function getManifestOrderData(){
        $scope.isPreloader = true;
        var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
        var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
        var filters = $location.search();
        if(angular.isDefined(filters.perPage)){
          filters.per_page = filters.perPage;
        }
        else{
          filters.per_page = 15;
        }
        delete filters.perPage;
        var url = 'manifests?filter_by=status&filter='+ manifestType;

        switch (pickup) {
          case 'error':
            url += '&pickup_error=1';
            break;
          case 'pending':
            url += '&pickup_error=0';
            break;
        }

        AppService.get_with_params(url,filters, true )
        .success(function(data){
          if(!data.data.length){
            $scope.isPreloader = false;
          }
          $scope.manifestsOrder = data.data;
          $scope.metaData = data.meta.pagination
          $scope.totalItems = $scope.metaData.total;
          $scope.showingOrderNo =
          {
            from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
            to: Math.min($scope.totalItems, $scope.page*perPage)
          }
          AppService.setHeight();
          $scope.$on('manifestsOrder', function(ngRepeatFinishedEvent){
            AppService.setWidth(orderdate, orderid, status, action);
            $scope.isPreloader = false;
          });
        })
        .error(function(error){
          AppService.isAuth(error);
          $scope.isPreloader = false;
        })
      }

      function getSelectedIds(id, isCancel){
        var orderId = [];
        $("input:checkbox[name=orderId]:checked").each(function(){
          switch (id) {
            case 'id':
              orderId.push($(this).data('id'));
              break;

            case 'status':
              orderId.push($(this).data('status'));
              break;

            case 'shipment_ids':
              var isInqueue = $(this).data('inqueue');
              if(isInqueue == 0){
                orderId.push($(this).data('shipmentids'));
              }
              break;

            default:
              orderId.push($(this).val());
          }
        });

        if(!orderId.length){
          $scope.isPreloader = false;
          return false;
        }
        if(isCancel){
          return orderId;
        }
        var data = {  ids: orderId }
        return data;
      }

      function disableButtons(){
        setTimeout(function() {
          var isAnyPickupSchedule = false;
          var data = getSelectedIds("", true);
          if(data.length == '1'){
            $('.reAssign').attr('disabled', false);
            $('.print').attr('disabled', false);
          }
          else if(data.length > '1'){
            $('.print').attr('disabled', false);
            $('.reAssign').attr('disabled', true);
          }
          else{
            $('.reAssign').attr('disabled', true);
            $('.print').attr('disabled', true);
          }

          var data = getSelectedIds("status", true);
          var length = data.length;
          for (var i = 0; i < length; i++){
            if( data[i] != 'PICKUP ERROR'){
              isAnyPickupSchedule = true;
              $('.print-manifest').attr('disabled', false);
              break;
            }
          }

          if(!isAnyPickupSchedule){
            $('.print-manifest').attr('disabled', true);
          }
        }, 2);
      }

      $document.on("click", function(){
          $('.popover').hide();
      });

      function showProductPopup($event, listId){
        $event.stopPropagation();
        var targetdiv = angular.element($event.currentTarget);
        var divposition = targetdiv.parents('tr').position();
        if(Math.round(divposition.top) >= '320'){
          targetdiv.parent().next(".popover").show().removeClass('bottom').addClass('top').css({'top':'auto','bottom':'29px'});
        }
        else{
          targetdiv.parent().next(".popover").show().removeClass('top').addClass('bottom').css({'top':'78px','bottom':'auto'});
        }
      }

      function printBulkInvoice(action, orderids){
        loaderFactory.display('Generating your Invoice. Please Wait!')
        if(action === 'single'){
          var orderidString = orderid.toString();
          var data = {
            ids:orderids
          }
        }

        if(!data){
          loaderFactory.hide();
          return false;
        }
        AppService.post('orders/print/invoice', true, data, true)
        .success(function(data){
          if(data.invoice_url){
            AppService.downloadDataWithUrl(data.invoice_url, 'Invoice')
          } else {
            Notify.alert(data.message, {status: 'success', timeout: 5000});
          }
          loaderFactory.hide();
           // window.open(data.invoice_url)
          $("input:checkbox").prop( "checked", false );
        })
        .error(function(error){
          loaderFactory.hide();
          AppService.isAuth(error);
        })
      }

      function printBulkLabel(action, shipmenids){
        loaderFactory.display('Printing your label. Please Wait!');
        var orderId = [];
        if(action === 'single'){
          var postData =
          {
            shipment_id: shipmenids
          };
        }
        else{
          $("input:checkbox[name=orderId]:checked").each(function(){
            orderId = orderId.concat($(this).data('shipmentids'));
          });
          var postData =
          {
            shipment_id: orderId
          };
        }
        AppService.post('courier/generate/label', true, postData)
        .success(function(data){
          $("input:checkbox").prop( "checked", false );
          if (data.name) {
            AppService.downloadPdf(data.data, data.name);
          }
          else if(data.label_created){
            AppService.downloadDataWithUrl(data.label_url, 'label')
          }
          loaderFactory.hide();
        })
        .error(function(error){
          loaderFactory.hide();
          AppService.isAuth(error);
        })
      }
    }
  }
})();

/**=========================================================
 * Module: ndrController
  =========================================================*/
(function()
{
    'use strict';
    angular
    .module('app.orders')
    .controller('ndrController', ndrController);

    ndrController.$inject = ['$rootScope', '$scope', 'AppService', '$state', 'Notify','$auth'];
    function ndrController($rootScope, $scope, AppService, $state, Notify, $auth){
        if($auth.isAuthenticated()){
          activate();
        }
        function activate(){

            var orderdate = {
                className : 'orderdate',
                width: $('.orderdate').outerWidth(),
                tableClass: 'ndr-report-wrapper'
            }
            var orderid = {
                className : 'orderid',
                width: $('.orderid').outerWidth()
            }
            var dimension = {
                className : 'dimension',
                width: $('.dimension').outerWidth()
            }
            var status = {
                className : 'status',
                width: $('.status').outerWidth()
            }

            var api_url = '';
            if ($state.current.name == 'app.ndrPanelRaised' || $state.current.name == 'app.ndrPanelClosed'){
                api_url = 'internal/report/ndr/count/all';
            }
            else{
                api_url = 'shipments/ndr/count/all';
            }

            AppService.get( api_url , true )
            .success(function(data){
                $rootScope.orderCount = data;
            })
            .error(function(error){
                AppService.isAuth(error);
            })
      }
    }
})();

/**=========================================================
 * Module: ndrOrdersController
  =========================================================*/
(function() {
    'use strict';
    angular
        .module('app.orders')
        .controller('ndrOrdersController', ndrOrdersController);
    ndrOrdersController.$inject = ['$document', '$rootScope', '$scope', '$location', 'AppService', 'ga_service', '$state', 'Notify', '$uibModal', '$stateParams', '$localStorage', '$timeout'];

    function ndrOrdersController($document, $rootScope, $scope, $location, AppService, ga_service, $state, Notify, $uibModal, $stateParams, $localStorage, $timeout) {
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }

        function activate(user) {
          
           $('th').children().removeClass('checkbox')
            var orderdate = {
                className: 'orderdate',
                width: $('.orderdate').outerWidth(),
                tableClass: 'ndr-report-wrapper'
            }
            var orderid = {
                className: 'orderid',
                width: $('.orderid').outerWidth()
            }
            var dimension = {
                className: 'dimension',
                width: $('.dimension').outerWidth()
            }
            var status = {
                className: 'status',
                width: $('.status').outerWidth()
            }

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;

            $scope.attempts = $stateParams.attempts;
            $scope.ndr_status = $stateParams.ndr_status;
            //$scope.action = $stateParams.action;
            $scope.s_status = $stateParams.s_status;
            $scope.action_by = $stateParams.action_by;
            $scope.aging = $stateParams.aging;

            var querryParams = $location.search();

            $scope.searchParams = {
              to: angular.isDefined(querryParams.to) ? querryParams.to : '',
              from: angular.isDefined(querryParams.from) ? querryParams.from : '',
              page: angular.isDefined(querryParams.page) ? querryParams.page : '',
              action: angular.isDefined(querryParams.action) ? querryParams.action : '',
              perPage: angular.isDefined(querryParams.perPage) ? querryParams.perPage : '',
              order_id: angular.isDefined(querryParams.order_id) ? querryParams.order_id : '',
              attempts: angular.isDefined(querryParams.attempts) ? querryParams.attempts : '',
              searchText: angular.isDefined(querryParams.searchText) ? querryParams.searchText : '',
              courier_id: angular.isDefined(querryParams.courier_id) ? querryParams.courier_id : '',
              channel_id: angular.isDefined(querryParams.channel_id) ? querryParams.channel_id : ''
            }

            $scope.searchText = '';
            $scope.filter = {
                courier_name: ''
            };

            $scope.page = $stateParams.page;

            var date = new Date();
            $scope.currentDate = date;

            $scope.startDate = {
                from: ''
            };
            $scope.filter_by = '';
            $scope.itemsPerPage = [
              { value: 15, id: 0 },
              { value: 30, id: 1 },
              { value: 60, id: 2 },
              { value: 100, id: 3 }
            ];

            if ($scope.searchParams.perPage == 30) {
                $scope.selectedItems = 1;
            } else if ($scope.searchParams.perPage == 60) {
                $scope.selectedItems = 2;
            } else if ($scope.searchParams.perPage == 100) {
                $scope.selectedItems = 3;
            } else {
                $scope.selectedItems = 0;
            }

            $scope.searchBy         = searchBy;
            $scope.openModal        = openModal;
            $scope.sortTable        = sortTable;
            $scope.updateState      = updateState;
            $scope.openHistory      = openHistory;
            $scope.paginatedData    = paginatedData;
            $scope.changePerPage    = changePerPage;
            $scope.filterByStatus   = filterByStatus;
            $scope.updateNdrAction  = updateNdrAction;
            $scope.filterByCouriers = filterByCouriers;
            
            $scope.show_form_status = ['SRNDR1','SRNDR2','SRNDR3','SRNDR4','SRNDR5','SRNDR6','SRNDR8','SRNDR9'];
            $scope.no_action = [];
            $scope.others = [];


            $scope.all_ndr_status = [{id:'SRNDR1', value:'Customer not Contactable'},
                                {id:'SRNDR2', value:'Address Incomplete/Incorrect'},
                                {id:'SRNDR3', value:'COD amount not ready'},
                                {id:'SRNDR4', value:'Customer requested future delivery'},
                                {id:'SRNDR5', value:'Customer Requested Self Pickup'},
                                {id:'SRNDR6', value:'Customer Refused Delivery'},
                                {id:'SRNDR7', value:'Auto Reattempt'},
                                {id:'SRNDR8', value:'Door/Premises/Office Closed'},
                                {id:'SRNDR9', value:'Others'}];

            $scope.shipment_status = [{id:'17', value:'OUT FOR DELIVERY'},
                                      {id:'21', value:'UNDELIVERED'}];

            $scope.no_action_shipment_status = [{id:'7', value:'Delivered'},
                                                {id:'9', value:'RTO'}];

            $scope.action_users = [{id:'1', value:'Seller'},
                                   {id:'2', value:'Buyer'},
                                   {id:'3', value:'Shiprocket'}];


 
            var baseUrl = '';
            var event_action = '';
            $scope.sortReverse = false;
            $scope.showHistoryItem = false;
            $scope.sortType = 'base_channel_code';

            switch ($state.current.name) {
              case 'app.ndrPending':
                $scope.buyerDataUpdate = buyerDataUpdate;
                orderdate.tableClass = 'ndr-pending-wrapper';
                baseUrl = 'shipments/ndr/pending';
                event_action = 'ndr_pending_click';
                break;

              case 'app.ndrClosed':
                orderdate.tableClass = 'ndr-closed-wrapper';
                baseUrl = 'shipments/ndr/closed';
                event_action = 'ndr_closed_click';
                break;

              case 'app.ndrNoAction':
                orderdate.tableClass = 'ndr-closed-wrapper';
                baseUrl = 'shipments/ndr/noaction';
                event_action = 'ndr_noaction_click';
                break;  

              case 'app.ndrPanelRaised':
                orderdate.tableClass = 'ndr-pannelraised-wrapper';
                getCourierCompany();
                baseUrl = 'internal/report/ndr/pending';
                event_action = 'ndr_panelRaised';
                break;

              case 'app.ndrPanelClosed':
                orderdate.tableClass = 'ndr-pannelColsed-wrapper';
                getCourierCompany();
                baseUrl = 'internal/report/ndr/closed';
                event_action = 'ndr_panelClosed';
                break;
            }

            AppService.get('orders/manifestfilters', true)
            .success(function(data) {
              $scope.channel_filter_data = data.channels;
              $scope.statuses_filter_data = data.statuses;
              $scope.paymentTypes_filter_data = data.paymentTypes;
              $scope.courier_filter_data = data.shippingPartners;
            })
            .error(function(error) {
              AppService.isAuth(error);
            });

            


            function openHistory(item){
                // $scope.disputeData = []
                if($scope.showHistoryItem != item.id){
                    $scope.showHistoryItem = item.id;
                } else {
                    $scope.showHistoryItem = false;
                }
            }

            function updateState() {
                
                $("th").remove();
                var filters = $location.search();
                
                

                filters.page = $scope.page;
                filters.attempts = $scope.attempts ? $scope.attempts : '';
                filters.s_status = $scope.s_status ? $scope.s_status : '';
                filters.ndr_status = $scope.ndr_status ? $scope.ndr_status : '';

                if($state.current.name == 'app.ndrClosed') {
                    //filters.action = $scope.action ? $scope.action : '';
                    filters.action_by = $scope.action_by ? $scope.action_by : '';
                } else {
                    filters.aging = $scope.aging ? $scope.aging : '';
                }

                filters.perPage = $scope.itemsPerPage[$scope.selectedItems].value;
               
                $location.search(filters)
            }

            function paginatedData() {
              //$("th").remove();
              $scope.searchParams.page = $scope.page;
              getNdrOrderData();
            }

            function changePerPage() {
              $scope.searchParams.perPage = $scope.itemsPerPage[$scope.selectedItems].value;
              getNdrOrderData();
            }

            function sortTable(type) {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getNdrOrderData();
            }

            function filterByStatus() {
                getNdrOrderData();
            }

            function filterByCouriers(filter) {
                if (filter.id == '') {
                    $scope.searchParams.filter_by = '';
                    $scope.searchParams.courier_name = '';
                } else {
                    $scope.searchParams.filter_by = 'courier_name';
                    $scope.searchParams.courier_name = filter.courier_name;
                }
                getNdrOrderData();
            }


            function searchBy(search) {
                if($scope.searchParams.searchText.length >= 4){
                    $scope.searchParams.searchText = search;
                    getNdrOrderData();
                }
            }

            

            function getNdrOrderData(params) {
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC" : "DESC";
                var url = baseUrl;
                if(params){
                  var filters = params;
                } else {
                  var filters = $location.search();
                }
                ga_service.send('Tracking', event_action);
                $scope.searchParams.per_page = $scope.searchParams.perPage ? $scope.searchParams.perPage : 15
                filters.per_page = $scope.searchParams.per_page;
                delete filters.perPage;
                delete $scope.searchParams.perPage;
                var data = {}
                switch ($state.current.name) {
                  case 'app.ndrPending':
                    data = angular.copy(filters);
                    break;

                  case 'app.ndrClosed':
                    data = angular.copy(filters);
                    break;

                  case 'app.ndrNoAction':
                    data = angular.copy(filters);
                    break;

                  case 'app.ndrPanelRaised':
                    $scope.searchParams.courier_name = $scope.searchParams.courier_name === 'Select Courier Company' ? '' : $scope.searchParams.courier_name;
                    $scope.searchParams.search = $scope.searchParams.searchText;
                    console.log($scope.searchParams);
                    delete $scope.searchParams.searchText;
                    data = angular.copy($scope.searchParams);
                    break;

                  case 'app.ndrPanelClosed':
                    $scope.searchParams.courier_name = $scope.searchParams.courier_name === 'Select Courier Company' ? '' : $scope.searchParams.courier_name;
                    $scope.searchParams.search = $scope.searchParams.searchText;
                    delete $scope.searchParams.searchText;
                    data = angular.copy($scope.searchParams);
                    break;
                }
                AppService.get_with_params(url, data, true)
                .success(function(data) {

                    if (!data.data.length) {
                        $scope.isPreloader = false;
                    }
                    console.log(data);
                    $scope.ndrOrder = data.data;
                    $scope.metaData = data.meta.pagination;
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo = {
                      from: $scope.totalItems == 0 ? 0 : ($scope.page - 1) * $scope.searchParams.per_page + 1,
                      to: Math.min($scope.totalItems, $scope.searchParams.page * $scope.searchParams.per_page)
                    }
                    AppService.setHeight();

                    $scope.$on('ndrOrder', function(ngRepeatFinishedEvent) {
                      AppService.setWidth(orderdate, orderid, dimension, status);
                      $scope.isPreloader = false;
                     });
                    $stateParams = $scope.searchParams;
                })
                .error(function(error) {
                    $location.search($scope.searchParams);
                    AppService.isAuth(error);
                    $scope.isPreloader = false;
                })
            }

            $document.on("click", function(){
              $('.popover').hide();
            });

            function updateNdrAction(shipment_id, action, comment) {
                $scope.isPreloader = true;
                if (!shipment_id) {
                    $scope.isPreloader = false;
                    return false;
                }

                var data = {
                    'shipment_id': shipment_id,
                    'action': action,
                    'comments': comment
                };

                AppService.patch('shipments/ndr/update/action', true, data)
                .success(function(data) {
                    $scope.isPreloader = false;
                    $state.reload();
                })
                .error(function(error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            };


            function openModal() {
                $scope.items = {
                    type: 'order'
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop: 'static',
                    keyboard: false,
                    templateUrl: 'importNDROrderfile.html',
                    controller: 'UploadController',
                    size: 'sm-400',
                    resolve: {
                        items: function() {
                            return $scope.items;
                        }
                    }
                });
            };

            function buyerDataUpdate(shipment_id,order_id,ndr_last_date) {

                $scope.items = {
                    type: 'ndr-reattempt',
                    shipment_id:shipment_id,
                    order_id:order_id,
                    ndr_last_date:ndr_last_date
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop: 'static',
                    keyboard: false,
                    templateUrl: 'data_update_form.html',
                    controller: 'updateReattemptController',
                    size: 'sm-400',
                    resolve: {
                        items: function() {
                            return $scope.items;
                        }
                    }
                });
            }

            var start = $scope.searchParams.from ? moment($scope.searchParams.from, 'YYYY-MMM-DD') : moment().subtract(1, 'month');
            var end = $scope.searchParams.to ? moment($scope.searchParams.to, 'YYYY-MMM-DD') : moment();

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                    'All': [moment(user.created_at.date), moment()],
                    'Today': [moment(), moment()],
                    'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                    'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                    'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                    'This Month': [moment().startOf('month'), moment().endOf('month')],
                    'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);

            function cb(start, end) {
                $scope.searchParams.from = start.format('YYYY-MMM-DD').toString();
                $scope.searchParams.to = end.format('YYYY-MMM-DD').toString();
                getNdrOrderData();
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
            }

            function getCourierCompany() {
                AppService.get('courier/priority', true)
                .success(function(data) {
                    $scope.couriers = data;
                    var defaultOption = {
                        id: '',
                        courier_name: 'Select Courier Company'
                    }
                    $scope.couriers.unshift(defaultOption);
                    $scope.filter = $scope.searchParams.courier_name ? _.find($scope.couriers, function(o) { return o.courier_name == $scope.searchParams.courier_name; }) : $scope.couriers[0];
                })
                .error(function(error) {
                    AppService.isAuth(error);
                })
            }
        }
    }
})();

/**=========================================================
 'order' => [
         1  => 'New',
         2  => 'Invoiced',
         3  => 'Ready to Ship',
         4  => 'Pickup Scheduled',
         5  => 'Canceled',
         6  => 'Shipped',
         7  => 'Delivered',
         8  => 'ePayment Failed',
         9  => 'Returned',
         10 => 'Unmapped',
         11 => 'Out Of Stock',
         12 => 'Pickup Queued',
         13 => 'Pickup Rescheduled',
         14 => 'Pickup Error', // Created when there is an error on pickup schedule
         15 => 'RTO Initiated',
         16 => 'RTO Delivered',
         17 => 'RTO Acknowledged',
         18 => 'Cancellation Requested',
         19 => 'Out for Delivery',
         20 => 'In Transit'
     ],
 * Module: OrderController
  =========================================================*/
;(function(){
    'use strict';
    angular
    .module('app.orders')
    .controller('OrderController', OrderController);

    OrderController.$inject = [ '$stateParams','$rootScope', '$scope', 'AppService', 'ga_service', '$state', 'Notify', '$uibModal', 'SR_CONSTANTS', '$localStorage', 'loaderFactory', '$q'];

    function OrderController( $stateParams, $rootScope, $scope, AppService, ga_service ,$state, Notify, $uibModal, SR_CONSTANTS, $localStorage, loaderFactory, $q){
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }

        function activate(user){
            //intercom event
            AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.order_ID_clicked);
            ga_service.send('Orders','orderId_clicked');
            $scope.gstin_entered = user? user.gstn: false;
            $scope.inventory_sync_status = user.inventory_sync_status;
            loaderFactory.display("Getting Order Details. Please Wait!");

            AppService.setHeight();
            $scope.selected = [];
            $scope.isData= true;
            $scope.showTrackingSync = false;
            $scope.showRequestPickup = false;
            $scope.labelprint = true;
            $scope.labelgenerate = true;
            $scope.isShowEdit = false;
            $scope.editPartialAddress = false;
            $scope.isCancelOrder = false;
            $scope.tablecolums = '8';
            $scope.isIMEI = true;
            $scope.isShowIMEIColumn = false;
            $scope.update_hsn_now = false;
            $scope.isReassign = true;
            $scope.showGenerateManifest = false;
            $scope.selectedPayment = '';
            $scope.show_warehouse = false;
            $scope.paymentOptions = {show : false};
            $scope.updateHSN = updateHSN;
            $scope.printLabel = printLabel;
            $scope.updateIMEI = updateIMEI;
            $scope.getActivity = getActivity;
            $scope.printInvoice = printInvoice;
            $scope.getOrderDetail = getOrderDetail;
            $scope.openLabelModal = openLabelModal;
            $scope.generatePickup = generatePickup;
            $scope.generateManifest = generateManifest;
            $scope.cancelOrderModal = cancelOrderModal;
            $scope.syncTrackingInfo = syncTrackingInfo;
            $scope.getTrackingDetails = getTrackingDetails;
            $scope.updatePaymentMethods = updatePaymentMethods;
            $scope.generateChannelInvoice = generateChannelInvoice;
            $scope.openMakeDeliveredPopup = openMakeDeliveredPopup;
            $scope.updateOrderPickupLocation = updateOrderPickupLocation;
            $scope.editShipmentDimensionAndWeight = editShipmentDimensionAndWeight;

            function generateChannelInvoice (channelId, channelOrderId, $event) {
              loaderFactory.display('Fetching Invoice from Channel')
              AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.channel_invoice_clicked);
              ga_service.send('Orders', 'single_channel_invoice_clicked');
              $event.stopPropagation();
              var data = {
                channel_id: channelId,
                channel_order_id: channelOrderId
              }
              AppService.post(SR_CONSTANTS.api_urls.print_channel_invoice, true, data)
              .then(function(res){
                AppService.downloadDataWithUrl(res.data.invoice_url, 'channel_invoice');
                loaderFactory.hide();
              }, function(error){
                loaderFactory.hide();
                if (error.status == 404) {
                  Notify.alert('We are not able to fetch your channel Invoice, connect to our support team for assistance', {status: 'danger', timeout: 7000 });
                } else {
                  AppService.isAuth(error, 'danger');
                }
              })
            }

            function getOrderDetail(){
                AppService.get(SR_CONSTANTS.api_urls.get_orders_show+ $stateParams.id)
                .success(function(data){
                    loaderFactory.hide();
                    $scope.order = data.data;
                    $scope.order.shipment_id = $scope.order.shipments ? $scope.order.shipments.id : '';
                    var dimension = $scope.order.shipments ? $scope.order.shipments.dimensions.split('x') : '';
                    $scope.order.length = dimension[0];
                    $scope.order.breadth = dimension[1];
                    $scope.order.height = dimension[2];

                    if([3,22].indexOf($scope.order.status_code - 0) != -1){
                      $scope.showRequestPickup = true;
                    }

                    if([1,21].indexOf($scope.order.status_code - 0) != -1){
                      $scope.hsn_editable = true;
                    }

                    if([1,2,3,4,12,13,14,21,22,24,28,34,35].indexOf($scope.order.status_code - 0) != -1){
                      $scope.isCancelOrder = true;
                    }

                    if([3,4,6,12,13,14,15,16,19,20,34,35,36,37].indexOf($scope.order.status_code - 0) != -1){
                      $scope.showTrackingSync = true;
                    }

                    if([1,2,10,11,5,21].indexOf($scope.order.status_code - 0) == -1){
                      $scope.labelprint=false;
                    }

                    if([4,12,14].indexOf($scope.order.status_code - 0) != -1 && $scope.order.shipments.manifest_id == ''){
                      $scope.showGenerateManifest = true;
                    }

                    $scope.isShowEdit = $scope.order.status_code == "1";

                    if([1,2,21].indexOf($scope.order.status_code - 0) != -1) {
                        $scope.labelgenerate = false;
                    }else if([3,4,12,13,14,35].indexOf($scope.order.status_code - 0) != -1) {
                        $scope.isReassign = false;
                        if([13,4].indexOf($scope.order.status_code - 0) == -1){
                            $scope.editPartialAddress = true;
                            $scope.isShowEdit = true;
                        }
                    }else if([5,6,7,9].indexOf($scope.order.status_code - 0) != -1) {
                        $scope.isShowEdit = false;
                    }else if($scope.order.status_code==18) {
                        $scope.labelprint = true;
                    }else if([10,11].indexOf($scope.order.status_code - 0) != -1){
                        $scope.isShowEdit = true;
                    }

                    var length = $scope.order.products.length;

                    for (var i = 0; i < length; i++) {
                        if($scope.order.products[i].custom_field == 'imei' && $scope.order.products[i].custom_field_value != '') {
                            $scope.isIMEI = false;
                        }

                        if($scope.order.products[i].custom_field == 'imei') {
                            $scope.isShowIMEIColumn = true;
                            $scope.tablecolums = '9';
                        }

                    }

                    if([1,2].indexOf($scope.order.status_code - 0) != -1) {
                        $scope.isIMEI = true;
                    }

                    var tooltip_rate = "";
                    if( $scope.order.currency == 'INR' ){
                        tooltip_rate = '<div>'+'<h5>'+'1 INR = '+ $scope.order.exchange_rate_usd + ' USD'+'</h5>';
                    }else if ($scope.order.currency == 'USD'){
                        tooltip_rate = '<div>'+'<h5>'+'1 USD = '+ $scope.order.exchange_rate_inr + ' INR'+'</h5>';
                    }
                    else{
                        tooltip_rate = '<div>'+'<h5>'+'1'+  $scope.order.currency + ' = '+ $scope.order.exchange_rate_inr + ' INR'+' | 1'+  $scope.order.currency + ' = '+ $scope.order.exchange_rate_usd + ' USD'+'</h5>';
                    }

                    $scope.tooltip = tooltip_rate + 'The conversion rates are as per the order creation date.'+'</div>';
                })
                .error(function(error){
                    loaderFactory.hide();
                    AppService.isAuth(error);
                })
            }

            function getActivity(){
                AppService.get(SR_CONSTANTS.api_urls.get_order_activities + $stateParams.id)
                .success(function(data){
                    $scope.activity = data;
                    $scope.activityKeys = Object.keys($scope.activity);
                })
                .error(function(error){
                    AppService.isAuth(error);
                })
            }

            function syncTrackingInfo(){
                loaderFactory.display("Getting Tracking Information. Please Wait!");
                Notify.alert(SR_CONSTANTS.alert_messages.sync_tracking);

                AppService.get(SR_CONSTANTS.api_urls.sync_tracking + $scope.order.shipments.awb)
                    .success(function(data) {
                        getTrackingDetails();
                        getOrderDetail();
                    })
                    .error(function(error) {
                        loaderFactory.hide();
                        AppService.isAuth(error);
                    });

            };


            function getTrackingDetails(){
                loaderFactory.display("Getting Tracking Information. Please Wait!");
                AppService.get(SR_CONSTANTS.api_urls.get_courier_shipment_tracking+ $scope.order.shipments.id)
                .success(function(data){
                    loaderFactory.hide();
                    if(data.tracking_data.track_status == 0){
                      $scope.isTracking = 'false';
                      $scope.tracking = "No Data Available";
                    }
                    else {
                      $scope.isTracking = 'true';
                      $scope.tracking = data.tracking_data.shipment_track_activities;
                      var length = $scope.tracking.length;
                      var comp=[], gt=[];
                      for (var i = 0; i < length; i++){
                        var date = $scope.tracking[i].date.split(' ');
                        var time = date[1].split('.')
                        comp[i] = date[0];
                        gt[i] = date[0];
                        $scope.tracking[i].formattedDate = date[0];
                        $scope.tracking[i].time = time[0];
                      }

                      $scope.a=[];
                      $scope.a=comp;
                      for (var i = length-1;i>0;i--){
                        if(comp[i]==comp[i-1]){
                          $scope.a[i]=0;
                        }
                      }
                    }

                })
                .error(function(error){
                    loaderFactory.hide();
                    AppService.isAuth(error);
                })
            };

            function hsnUpdate(productForHsn, type, afterModal){
                loaderFactory.hide();
                var items =
                    {
                        "productForHsn": productForHsn,
                        'type': type,
                        'page': 'processingOrder'
                    }

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/Orders/hsnCodeUpdate.html',
                    controller: 'updateHsnController',
                    size: 'sm-400',
                    resolve: {
                        items: function (){
                            return items;
                        }
                    }
                }).result.then(function(){
                    afterModal();
                });
            }


            function printInvoice(id){
                //intercom event
                AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.invoice_order_internal_clicked);
                loaderFactory.display("Generating Invoice. Please Wait!");
                // check for imei
                // Check for Hsn
                if(user.gstn == true && $scope.order.status_code == 1) {
                    var productForHsn = getEmptyHsnProduct();
                    if(productForHsn.length) {
                        hsnUpdate(productForHsn, 'hsn', ImeiOrPrintInvoice);
                        return false;
                    }else{
                        ImeiOrPrintInvoice()
                    }
                }else{
                    ImeiOrPrintInvoice()
                }

                function ImeiOrPrintInvoice() {
                    var items = [];
                    var products = $scope.order.products;
                    var productLength = $scope.order.products.length;
                    for (var k = 0; k < productLength; k++) {
                      if (products[k].custom_field == 'imei' && products[k].custom_field_value == '') {
                        products[k].base_channel_code = $scope.order.base_channel_code;
                        products[k].channel_order_id = $scope.order.channel_order_id;
                        products[k].order_id = $scope.order.id;
                        products[k].channel_name = $scope.order.channel_name;
                        items.push(products[k]);
                      }
                    }

                    if (items.length) {
                        imeiNoUpdate(items, event);
                        return false;
                    }


                    var url;
                    if ($scope.order.is_international == 1) {
                        url = 'orders/international/print/invoice';
                        var data = {
                            shipment_ids: [id]
                        }
                    } else {
                        url = SR_CONSTANTS.api_urls.print_invoice;
                        var data =
                            {
                                ids: [id]
                            }
                    }
                    ga_service.send('Orders', 'manifest_print_invoice_clicked');
                    AppService.post(url, true, data)
                        .success(function (data) {
                            loaderFactory.hide();
                            if(data.invoice_url){
                              AppService.downloadDataWithUrl(data.invoice_url, 'Invoice')
                            } else {
                              Notify.alert(data.message, {status: 'success', timeout: 5000});
                            }
                        })
                        .error(function (error) {
                            loaderFactory.hide();
                            AppService.isAuth(error);
                        })
                }
            }

            function printLabel(shipmentID){
                loaderFactory.display("Generating Label. Please Wait!");
                var data = {
                    shipment_id: [shipmentID]
                }
                ga_service.send('Orders','courier_generate_label_clicked');
                AppService.post(SR_CONSTANTS.api_urls.generate_label, true, data)
                .success(function(data){
                    loaderFactory.hide();
                     if (data.name) {
                        AppService.downloadPdf(data.data, data.name);
                    }
                    else if(data.label_created){
                        AppService.downloadDataWithUrl(data.label_url, 'label')
                    }
                })
                .error(function(error){
                    loaderFactory.hide();
                    AppService.isAuth(error);
                })
            }

            function openMakeDeliveredPopup(orderId){
                var data =
                {
                    orderId: orderId
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'deliverOrder.html',
                    controller: 'orderDeliveredController',
                    size: 'sm-350',
                    resolve: {
                        items: function (){
                            return data
                        }
                    }
                });
            }

            function generatePickup(id, isReturn){
                loaderFactory.display("Processing Your Request. Please Wait!");
                //intercom event
                AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.manifest_order_internal_clicked);
                var shipment_data = {
                    shipment_id: [id]
                };

                if(isReturn){
                  shipment_data.is_return = 1
                }

                ga_service.send('Orders','courier_generate_pickup_clicked');
                AppService.post(SR_CONSTANTS.api_urls.generate_pickup, true, shipment_data)
                .success(function(data){
                    if(!isReturn){
                      if(data.pickup_status == 0 && data.response.data){
                        Notify.alert(data.response.data);
                        $state.reload();
                      }
                      AppService.post('manifests/generate', true, shipment_data)
                      .success(function(data){
                          loaderFactory.hide();
                          if (data.name){
                            AppService.downloadPdf(data.data, data.name);
                          }
                          $state.go($state.current, {}, {reload: true});
                      })
                      .error(function(error){
                          loaderFactory.hide();
                          AppService.isAuth(error);
                      })
                    } else {
                      if(data.response.data){
                        Notify.alert(data.response.data);
                      }
                      $state.reload();
                    }
                })
                .error(function(error){
                    loaderFactory.hide();
                    AppService.isAuth(error);
                })
            };

            function generateManifest(id){
                loaderFactory.display("Generating Manifest. Please Wait!");
                //intercom event
                AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.manifest_order_internal_clicked);
                var shipment_data = {
                    shipment_id: [id]
                };

                ga_service.send('Orders','courier_generate_pickup_clicked');
                AppService.post('manifests/generate', true, shipment_data)
                    .success(function(data){
                        loaderFactory.hide();
                        if (data.name){
                            AppService.downloadPdf(data.data, data.name);
                        }
                        $state.reload();
                    })
                    .error(function(error){
                        loaderFactory.hide();
                        AppService.isAuth(error);
                    })
            };

            $scope.backHistory = backHistory;
            $scope.editCustomerDetails = editCustomerDetails;

            function backHistory(){
                if($rootScope.manifestId)
                {
                    $state.go('app.manifest', {id: $rootScope.manifestId});
                    $rootScope.manifestId = '';
                }
                else
                {
                    window.history.back();
                }
            };

            function editCustomerDetails(){
                //intercom event
                ga_service.send('Orders','edited_address');
                AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.address_edited);

                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop  : 'static',
                    keyboard  : false,
                    templateUrl: 'editordercustomer.html',
                    controller: 'editOrderController',
                    size: 'lg',
                    resolve:
                    {
                        items: function ()
                        {
                            return {
                                order:$scope.order,
                                editPartialAddress: $scope.editPartialAddress
                            }
                        }
                    }
                });
            };

            function openLabelModal(order, isCourierCompany, $event) {
              if((1 + $localStorage.USER.shipment_count) > 5 && [0,3].indexOf($localStorage.USER.kyc_status) != -1 && $localStorage.USER.kyc_shipment_check){
                loaderFactory.hide();
                var modalInstance = $uibModal.open({
                  animation: true,
                  templateUrl: 'app/views/modals/kyc_verification_popup.html',
                  scope: $scope,
                  size: 'md'
                });
                return;
              }

                if(order.is_incomplete){
                  Notify.alert('Please fix the pending errors to proceed', {status:'danger', timeout: 3000});
                  return;
                }
                var dimensions = $scope.order.shipments.dimensions.split('x');
                var data = {
                    length:parseFloat(dimensions[0]),
                    breadth:parseFloat(dimensions[1]),
                    height:parseFloat(dimensions[2])
                };

                var no_of_ones = 0;
                if(data.length < 0.5){
                    no_of_ones++;
                }
                if(data.breadth < 0.5){
                    no_of_ones++;
                }
                if(data.height < 0.5){
                    no_of_ones++;
                }
                if($scope.order.shipments.weight == 0 || no_of_ones>1){
                    Notify.alert("Dimension should be greater than or equal to 0.5 x 0.5 x 0.5 and Weight should be greater than 0.", {status:"danger"});
                    return false;
                }

                function openLabelPopup(order, isCourierCompany, $event) {
                  //cod recon handling
                  loaderFactory.display("Processing Your Request. Please Wait!");
                  AppService.get(SR_CONSTANTS.api_urls.all_pending_cod_recon, true)
                  .success(function(data) {
                    loaderFactory.hide();
                    if(data.length) {
                      AppService.openCodReconModal(data);
                    }
                    else {
                      checkForLabelGeneration(order, isCourierCompany, $event)
                    }
                  })
                  .error(function(error) {
                    loaderFactory.hide();
                    AppService.isAuth(error);
                  });
                  //cod recon handling end
                }
                openLabelPopup(order, isCourierCompany, $event);
            };

            function courierWithPrice(obj)
            {
                obj.courierWithprice = obj.courier_name + "  Rs "+ obj.rate;
                return obj;
            }

            $scope.reAssignCourierCompany = reAssignCourierCompany;

            function reAssignCourierCompany(order, isCourierCompany)
            {
                loaderFactory.display("Processing Your Request. Please Wait!");
                var postData =
                {
                    'shipment_id': $scope.order.shipments.id
                }
                ga_service.send('Orders','single_courier_reassign_clicked');
                AppService.post(SR_CONSTANTS.api_urls.get_single_reassign_data , true, postData)
                .success(function(data)
                {
                    loaderFactory.hide();
                    var asignedValue = data.data;
                    asignedValue.courier_list = asignedValue.courier_options.available_courier_companies.map(courierWithPrice);
                    if(asignedValue.dimensions == null)
                    {
                        asignedValue.length = 10;
                        asignedValue.breadth = 10;
                        asignedValue.height = 10;
                    }
                    else
                    {
                        asignedValue.length = asignedValue.dimensions.L;
                        asignedValue.breadth = asignedValue.dimensions.B;
                        asignedValue.height = asignedValue.dimensions.H;
                    }
                    var data =
                    {
                        order: $scope.order,
                        isCourierCompany: isCourierCompany,
                        asignedValue: asignedValue
                    }

                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: 'reAssignCourier.html',
                        controller: 'orderLabelController',
                        size: 'sm-350',
                        resolve:
                        {
                            items: function ()
                            {
                                return data
                            }
                        }
                    });
                })
                .error(function(error)
                {
                    loaderFactory.hide();
                    AppService.isAuth(error);
                })

            }

            function editShipmentDimensionAndWeight(order, isCourierCompany){
                var dimensions = order.shipments.dimensions.split('x');
                var asignedValue = {
                    length:parseFloat(dimensions[0]),
                    breadth:parseFloat(dimensions[1]),
                    height:parseFloat(dimensions[2])
                };
                var data = {
                        order: $scope.order,
                        isCourierCompany: isCourierCompany,
                        asignedValue: asignedValue
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'reAssignCourier.html',
                    controller: 'orderLabelController',
                    size: 'sm-350',
                    resolve: {
                        items: function () {
                            return data
                        }
                    }
                });
            };

            function updateHSN(){
                loaderFactory.display("Updating HSN data. Please Wait!");
                $scope.update_hsn_now = !$scope.update_hsn_now;

                if($scope.update_hsn_now){
                    loaderFactory.hide();
                }else{
                    AppService.post( "products/update/hsn", true, {data: $scope.order.products})
                        .success(function(data)
                        {
                            Notify.alert(data.success);
                            loaderFactory.hide();
                        })
                        .error(function(error)
                        {
                            loaderFactory.hide();
                            AppService.isAuth(error);
                        })
                }
            };

            function updateIMEI(){
                var length = $scope.order.products.length;
                var isAnyIMEI = false;
                var IMEIProduct = [];
                for (var i = 0; i < length; i++){
                    if($scope.order.products[i].custom_field == 'imei')
                    {
                        isAnyIMEI = true;
                        $scope.order.products[i].order_id = $scope.order.id;
                        $scope.order.products[i].channel_order_id = $scope.order.channel_order_id;
                        IMEIProduct.push($scope.order.products[i]);
                    }
                }
                var items = {
                    "productForImei": IMEIProduct,
                    'page': 'order'
                }

                if(!isAnyIMEI){
                    Notify.alert(SR_CONSTANTS.alert_messages.no_imei_product)
                    return;
                }

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/Orders/imeiUpdate.html',
                    controller: 'updateIMEIController',
                    size: 'sm-400',
                    resolve: {
                        items: function ()
                        {
                            return items;
                        }
                    }
                });
            }

            function imeiNoUpdate(productForImei, event){
                loaderFactory.hide();
                var items =
                {
                    "productForImei": productForImei,
                    "event": event,
                    'type': '',
                    'page': 'order'
                }

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/Orders/imeiUpdate.html',
                    controller: 'updateIMEIController',
                    size: 'sm-400',
                    resolve: {
                        items: function ()
                        {
                            return items;
                        }
                    }
                });
            }

            function cancelOrderModal(order){
                var data = order;
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/Orders/cancel-order.html',
                    controller: 'cancelOrderController',
                    size: order.status_code==1 || order.status_code==2?'sm':'recharge',
                    resolve: {
                        items: function ()
                        {
                         return data;
                        }
                    }
                });
            };

            function showWeightDiscrepancyModal(awbAsigndata, labelGenerateData, order, isCourierCompany) {
                loaderFactory.display("Checking Current Balance. Please Wait!");
                if ($rootScope.weight < 100) {
                    loaderFactory.hide();
                    // $scope.isPreloader = false;
                    openRechargeModal();
                    loaderFactory.hide();
                    // $scope.isPreloader = false;
                    return false;
                }
                loaderFactory.display("Checking Previous Weight Discrepancies. Please Wait!");
                // $scope.isPreloader = true;
                var dataTosend = {
                    awbAsigndata: awbAsigndata,
                    labelGenerateData: labelGenerateData,
                    order: angular.copy(order),
                    isCourierCompany: isCourierCompany
                }

                AppService.get(SR_CONSTANTS.api_urls.billing_discrepancy, true)
                    .success(function(data) {
                        loaderFactory.hide();
                        function showWeightDesModal() {

                            var modalInstance = $uibModal.open({
                                animation: true,
                                backdrop: 'static',
                                keyboard: false,
                                templateUrl: 'weight-discrepancy.html',
                                controller: 'weightDiscrepancyController',
                                size: 'lg',
                                resolve: {
                                    items: function() {
                                        return dataTosend;
                                    }
                                }
                            }).result.catch(function(){
                                $state.reload();
                            });
                        };
                        if (data.data.length && !user.is_weight_dispute) {
                            // $scope.isPreloader = false;
                            dataTosend.data = data;
                            dataTosend.order = order;
                            dataTosend.isEditAvailable = false;
                            if (angular.isDefined(user.is_auto_accept_notification_seen) && user.is_auto_accept_notification_seen == 0) {
                                var modalInstance = $uibModal.open({
                                    animation: true,
                                    templateUrl: 'app/views/modals/accept_terms.html',
                                    controller: 'billingAutoPopupController',
                                    backdrop: 'static',
                                    size: 'recharge'
                                }).result.then(function() {
                                    showWeightDesModal();
                                });
                            } else {
                                showWeightDesModal();
                            }

                        } else {
                            loaderFactory.display("Checking Serviceability. Please Wait!");
                            var url = "";

                            if(order.is_international == 1){
                                url = 'courier/international/serviceability?order_id=' + order.id;
                            }else {
                                url = SR_CONSTANTS.api_urls.courier_serviceability + '?pickup_postcode=' + order.pickup_code + '&order_id=' + order.id + '&delivery_postcode=' + order.delivery_code + '&weight=' + order.shipments.weight + '&cod=' + order.cod + '&declared_value=' + order.total + '&is_return=' + order.is_return;
                            }
                            AppService.get(url, true)
                                .success(function (data) {
                                    if (data.status == '404') {
                                        Notify.alert(data.message);
                                        // $scope.isPreloader = false;
                                        loaderFactory.hide();
                                        return false;
                                    } else if (!data.data.available_courier_companies.length) {
                                        Notify.alert(SR_CONSTANTS.alert_messages.courier_company_not_available);
                                        return false;
                                    } else {
                                        if (isCourierCompany == 'true') {
                                            var item = {
                                                "order": order,
                                                "data": data.data,
                                                "courierList": data.data,
                                                "isEditWeight": true,
                                                "isCourierCompany": isCourierCompany,
                                                "is_return": order.is_return
                                            };
                                            var modalInstance = $uibModal.open({
                                                animation: true,
                                                templateUrl: 'orderlabel.html',
                                                controller: 'orderLabelController',
                                                size: 'md',
                                                resolve: {
                                                    items: function () {
                                                        return item
                                                    }
                                                }
                                            });
                                        }
                                        else if (isCourierCompany == 'reasign') {
                                            var courier_companies = data.data;
                                            // $scope.isPreloader = true;
                                            loaderFactory.display("Processing Your Request. Please Wait!");
                                            var postData = {
                                                'shipment_id': $scope.order.shipments.id
                                            };
                                            //
                                            AppService.post(SR_CONSTANTS.api_urls.get_single_reassign_data, true, postData)
                                                .success(function (data) {
                                                    var asignedValue = data.data;
                                                    asignedValue.courier_list = asignedValue.courier_options.available_courier_companies.map(courierWithPrice);
                                                    if (asignedValue.dimensions == null) {
                                                        asignedValue.length = 10;
                                                        asignedValue.breadth = 10;
                                                        asignedValue.height = 10;
                                                    } else {
                                                        asignedValue.length = asignedValue.dimensions.L;
                                                        asignedValue.breadth = asignedValue.dimensions.B;
                                                        asignedValue.height = asignedValue.dimensions.H;
                                                    }
                                                    var data = {
                                                        order: $scope.order,
                                                        isCourierCompany: isCourierCompany,
                                                        asignedValue: asignedValue,
                                                        data: data.data.courier_options,
                                                        isEditWeight: true,
                                                        pickup_locationlist: $scope.pickupLocationList,
                                                        updateOrderPickupLocation: $scope.updateOrderPickupLocation
                                                    };
                                                    var modalInstance = $uibModal.open({
                                                        animation: true,
                                                        templateUrl: 'orderlabel.html',
                                                        controller: 'orderLabelController',
                                                        size: 'md',
                                                        resolve: {
                                                            items: function () {
                                                                return data
                                                            }
                                                        }
                                                    });
                                                })
                                                .error(function (error) {
                                                    loaderFactory.hide();
                                                    AppService.isAuth(error);
                                                });
                                        }
                                    }
                                loaderFactory.hide();
                            })
                            .error(function (error) {
                                if (error.status_code === 422) {
                                    var keys = Object.keys(error.errors);
                                    Notify.alert(error.errors[keys[0]][0]);
                                }
                                else {
                                    AppService.isAuth(error);
                                }
                                loaderFactory.hide();
                            });

                        }
                    })
                    .error(function(error) {
                        AppService.isAuth(data);
                        loaderFactory.hide();
                    })
            }


            function checkIfInternationalActivated(postData, order_data, order, isCourierCompany){
                loaderFactory.display("Checking For International Plan. Please Wait!");
                AppService.get('settings/international/status', true)
                .success(function(data){
                    if(data.status == 0){
                        loaderFactory.hide();
                        var modalInstance = $uibModal.open({
                            animation: true,
                            backdrop  : 'static',
                            keyboard  : false,
                            templateUrl: 'app/views/modals/international_shipping_deactivated.html',
                            controller: 'genericModalController',
                            size: 'md'
                        });
                    }
                    else{
                        user.international_status = 1;
                        $rootScope.isInernationalActivated = true;
                        showWeightDiscrepancyModal(postData, order_data, order, isCourierCompany)
                    }
                })
                .error(function(error){
                    loaderFactory.hide();
                    AppService.isAuth(error);
                })
            }

            function getEmptyHsnProduct(){
              var dataToProcess = angular.copy($scope.order.products);

              var items = _.remove(dataToProcess, function(o){
                  o.channel_order_id = $scope.order.channel_order_id;
                  return !o.hsn;
              });
              return items;
            }

            function checkForLabelGeneration(order, isCourierCompany, $event){
                loaderFactory.display("Processing Your Request. Please Wait!");
                var event = angular.element($event.currentTarget);
                // CHECK FOR RS
                if($rootScope.weight == 'NA'){
                    Notify.alert(SR_CONSTANTS.alert_messages.whmcs_id_not_created);
                    loaderFactory.hide();
                    return false;
                }


                var postData = {
                    shipment_id : [order.shipment_id],
                    courier_id: order.shipments.sr_courier_id
                };

                if(order.is_return == 1){
                  postData.is_return = 1;
                }

                var data = {
                        shipment_id: [order.shipment_id],
                        courier_id: order.shipments.sr_courier_id
                }
                // Check for Hsn
                if(user.gstn == true && $scope.order.status_code == 1) {
                  var productForHsn = getEmptyHsnProduct();
                  if(productForHsn.length) {
                    hsnUpdate(productForHsn, 'hsn', ImeiOrinvoice);
                    return false;
                  }else{
                    ImeiOrinvoice()
                  }
                }else{
                  ImeiOrinvoice()
                }

                function ImeiOrinvoice() {
                    loaderFactory.display("Processing Data. Please Wait!");
                    // check for imei
                    var items = [];
                    var products = $scope.order.products;
                    var productLength = $scope.order.products.length;
                    for (var k = 0; k < productLength; k++) {
                        if (products[k].custom_field == 'imei' && products[k].custom_field_value == '') {
                            products[k].base_channel_code = $scope.order.base_channel_code;
                            products[k].channel_order_id = $scope.order.channel_order_id;
                            products[k].order_id = $scope.order.id;
                            products[k].channel_name = $scope.order.channel_name;
                            items.push(products[k]);
                        }
                    }

                if(items.length) {
                    imeiNoUpdate(items, event);
                    loaderFactory.hide();
                    return false;
                }else {
                    // Check For international order and  Descrepancy
                    if(order.is_international==1){
                        checkIfInternationalActivated(postData, data, order, isCourierCompany);
                    }else{
                        showWeightDiscrepancyModal(postData, data, order, isCourierCompany)
                    }

                }
            }

            function openRechargeModal()
            {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/Settings/topnavrecharge.html',
                    controller: 'rechargeController',
                    size: 'recharge'
                });
            }
        }

        function getPickupLocation(){
            loaderFactory.display("Please Wait!");
            AppService.get('settings/company/pickup', true)
            .success(function(data)
            {
                $scope.pickupLocationList = data.data.shipping_address;
                $scope.selected =  $scope.pickupLocationList[0];
                loaderFactory.hide();
            })
            .error(function(error)
            {
                AppService.isAuth(error);
                loaderFactory.hide();
            })
        }

        function getPaymentMethods(){
            loaderFactory.display("Please Wait!");
            AppService.get('orders/payments', true)
            .success(function(data)
            {
                $scope.paymentMethodsList = data;
                $scope.selectedPayment =  $scope.paymentMethodsList[0];
                loaderFactory.hide();
            })
            .error(function(error)
            {
                AppService.isAuth(error);
                loaderFactory.hide();
            })
        }

        function updateOrderPickupLocation(pickup_location, orderid){
            loaderFactory.display("Updating Pickup Address. Please Wait!");
            var orderids = [orderid];
            var data = {
                'order_id': orderids,
                'pickup_location': pickup_location
            }
            AppService.patch("orders/address/pickup", true, data)
            .success(function(data) {
                loaderFactory.hide();
                $scope.getOrderDetail();
                $scope.show_warehouse = false;
                return $q.defer().resolve(true);
            })
            .error(function(error) {

                loaderFactory.hide();
                AppService.isAuth(error);
            });
        }

        function updatePaymentMethods(payment_method, orderids, hasErrors){
            loaderFactory.display("Updating Payment Method. Please Wait!");
            var data = {
                'order_id': orderids,
                'payment_method': payment_method
            }
            if(hasErrors)
            {
                data.errorsResolved = 'payment_method';
            }
            AppService.patch("orders/payment/edit", true, data)
            .success(function(data) {
                loaderFactory.hide(); Notify.alert(data.message, {status: 'success'});
                $scope.getOrderDetail();
                $scope.paymentOptions.show = false;
            })
            .error(function(error) {
                loaderFactory.hide();
                AppService.isAuth(error);
            });
        }

        getPickupLocation();
        getPaymentMethods();
    }}
})();

/**=========================================================
 * Module: orderCancelController
  =========================================================*/
;(function(){
    'use strict';
    angular
    .module('app.orders')
    .controller('orderCancelController', orderCancelController);

    orderCancelController.$inject = ['$rootScope', '$scope', 'AppService',  '$state', 'Notify', '$uibModalInstance', 'items', 'SR_CONSTANTS'];

    function orderCancelController($rootScope, $scope,AppService, $state, Notify, $uibModalInstance, items, SR_CONSTANTS){
        activate();
        function activate(){
            var data = items.orderIds;
            $scope.cancel_on_channel = true;
            $scope.orderCancel = orderCancel;
            $scope.closeCancelOrderModal = closeCancelOrderModal
            $scope.isNonChannelCancelOrder = items.isNonChannelCancelOrder? items.isNonChannelCancelOrder: false;
            $scope.hideCancelOnChannel = items.hideCancelOnChannel? items.hideCancelOnChannel: false;


            function closeCancelOrderModal(){
                $("input:checkbox").prop( "checked", false );
                $uibModalInstance.dismiss('cancel');
            }

            function orderCancel(isReturn){
                data.cancel_on_channel = $scope.cancel_on_channel? 1: 0;
                data.is_return = !!isReturn ? 1 : 0;
                $scope.isPreloader = true;
                AppService.post(SR_CONSTANTS.api_urls.cancel_orders , true, data)
                .success(function(data){
                    $uibModalInstance.dismiss('cancel');
                    $scope.isPreloader = false;
                    Notify.alert(SR_CONSTANTS.alert_messages.order_cancel_success ,  {status: 'success'});
                    $state.go($state.current, {}, {reload: true});})
                .error(function(error){
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }
        }
    }
})();

/**=========================================================
 * Module: orderDeliveredController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('orderDeliveredController', orderDeliveredController);
    orderDeliveredController.$inject = ['$rootScope', '$scope', 'AppService',  '$state', 'Notify', '$uibModalInstance', 'items', 'SR_CONSTANTS'];
    function orderDeliveredController($rootScope, $scope,AppService, $state, Notify, $uibModalInstance, items, SR_CONSTANTS)
    {
        activate();
        function activate()
        {   
            $scope.MakeDeliveredOrder = function()
            {   
                $scope.isPreloader = true;
                AppService.get(SR_CONSTANTS.api_urls.order_delivered + items.orderId, true)
                .success(function(data)
                {   
                    $state.go($state.current, {}, {reload: true});
                    $scope.isPreloader = false;
                    $uibModalInstance.dismiss('cancel');
                })
                .error(function(error) 
                {   
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

            $scope.closeModal = function() 
            {
                $uibModalInstance.dismiss('cancel');
            }
           
        }

    }
})();
/**=========================================================
 * Module: orderFulfillableController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('orderFulfillableController', orderFulfillableController);
    orderFulfillableController.$inject = ['$rootScope', '$scope', 'AppService',  '$state', 'Notify', '$uibModalInstance', 'items', 'SR_CONSTANTS'];
    function orderFulfillableController($rootScope, $scope, AppService, $state, Notify, $uibModalInstance, items, SR_CONSTANTS)
    {
        activate();
        function activate()
        {
            window.Intercom('update');
            AppService.setHeight();
            $scope.unFulfillableProduct = items;

            $scope.updateQuantity = function($event)
            {   
                $scope.isPreloader = true;
                //intercom event
                AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.single_add_stock_clicked);

                var target = angular.element($event.currentTarget);
                var input = target.closest('.inventory-update').find('input');
                if(!input.val())
                {   
                    $scope.isPreloader = false;
                    Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value,  {status: 'danger'});
                    return false;
                }
                if(isNaN(input.val())== true)
                {   
                    $scope.isPreloader = false;
                    Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value,  {status: 'danger'});
                    return false;
                }
                if(input.val()<1)
                {   
                    $scope.isPreloader = false;
                    Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value_gtr_than_0,  {status: 'danger'});
                    return false;
                }
                var dataArry = []
                var dataObj = 
                {
                    'order_id': input.data('order-id'),
                    'order_product_id': input.data('product-id'),
                    'quantity': input.val(),
                    'action': 'add'
                }
                dataArry.push(dataObj);

                var data = 
                {
                    'data': dataArry
                }
                updateInventory(data)
                
            }

            $scope.closeFulfillModal = function()
            {
                $uibModalInstance.dismiss('cancel');
                $("#ordertable .checkbox input[type='checkbox']").attr('checked', false);
            }

            $scope.addAllInventory  = function()
            {   
                $scope.isPreloader = true;
                //intercom event
                AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.bulk_add_stock_clicked);

                var productLength = $scope.unFulfillableProduct.length;
                var dataArry = [];
                for (var i = 0; i < productLength; i++) 
                {
                    if($('#product-input'+i).val())
                    {   
                        var input = $('#product-input'+i);
                        var dataObj = 
                        {
                            'order_id': input.data('order-id'),
                            'order_product_id': input.data('product-id'),
                            'quantity': input.val(),
                            'action': 'add'
                        }
                        dataArry.push(dataObj);   
                    }
                }

                var data  = 
                {
                    'data': dataArry
                }
                if(!dataArry.length)
                {   
                    $scope.isPreloader = false;
                    Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value);
                    return false;
                }
                updateInventory(data);
            }



            function updateInventory(data)
            {

                AppService.patch(SR_CONSTANTS.api_urls.orders_fulfill, true, data)
                .success(function(data)
                {   
                    $scope.isPreloader = false;
                    var orderLength = $scope.unFulfillableProduct.length;
                    for (var j = 0; j < orderLength; j++) 
                    {
                        var length = data.length;
                        for(var i=0; i< length; i++)
                        { 
                            if(data[i].success === true)
                            {
                                if( data[i].data.order_product_id == $scope.unFulfillableProduct[j].id )
                                {   
                                    $('#product-input' +j).prop('disabled', true);
                                    // $('.linkBtn'+j).unbind('click');
                                    $('.btn-wrapper'+j).find('.add').addClass('hide');
                                    $('.btn-wrapper'+j).find('.added').removeClass('hide').addClass('show');
                                    $state.go('app.processing');
                                    break;
                                }
                            }
                            else if(data[i].success === false && data[i].data.order_product_id == $scope.unFulfillableProduct[j].id )
                            {
                                var errorHtml = '<div class="help-block validation-alert product-font">' + data[i].message+ '</div>';                
                                $('#product-input'+j).closest('.inventory-update').find('.validation-alert').remove();
                                $('#product-input'+j).after(errorHtml);
                            }

                        }
                    }

                })
                .error(function(error) 
                {   
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })

            }

        }
    }
})();
/**=========================================================
 * Module: orderLabelController
  =========================================================*/
(function () {
    'use strict';
    angular
        .module('app.orders')
        .controller('orderLabelController', orderLabelController);
    orderLabelController.$inject = ['loaderFactory', '$rootScope', '$scope', '$timeout', 'AppService', '$state', 'Notify', '$uibModalInstance', 'items', '$uibModal', '$q', 'SR_CONSTANTS', '$localStorage'];
    function orderLabelController(loaderFactory, $rootScope, $scope, $timeout, AppService, $state, Notify, $uibModalInstance, items, $uibModal, $q, SR_CONSTANTS, $localStorage) {
        activate();
        function activate() {
            $scope.allow_mps = false;
            $scope.shipment_package = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
            $scope.package = { count: 1 };
            $scope.getCourierCompanies = getCourierCompanies;

            if ($localStorage.USER.allow_mps) {
                $scope.allow_mps = true
            }

            $scope.pickup_options = {
                pickup_locations: '',
                pin_code: ''
            };
            $scope.volumetric_weight = '';
            $scope.shipping = items.data;
            $scope.order = items.order;
            $scope.is_international = items.order.is_international == 1;
            $scope.purpose_of_shipment_options = [
                { id: 0, name: 'Gift' },
                { id: 1, name: 'Sample' },
                { id: 2, name: 'Commercial' }
            ];

            $scope.purpose_of_shipment = $scope.purpose_of_shipment_options[items.order.purpose_of_shipment];

            $scope.order_shipment = angular.copy($scope.order.shipments);
            if ($scope.shipping) {
                $scope.courierCompanies = items.data.available_courier_companies;
                $scope.selectedCourierIdOnProcessing = $scope.courierCompanies[0].courier_company_id;
            }

            $rootScope.manifestId = '';
            $scope.isCourierCompany = items.isCourierCompany;
            $scope.pickup_locationlist = {};

            if ($scope.isCourierCompany == 'reasign') {
                $scope.asignedValue = items.asignedValue;
                $scope.courier_id = $scope.asignedValue.courier_list[0];
                $scope.pickup_locationlist = items.pickup_locationlist;

                for (var i = 0; i < $scope.pickup_locationlist.length; i++) {
                    if ($scope.pickup_locationlist[i].pickup_location == $scope.order.pickup_location) {
                        $scope.pickup_options = $scope.pickup_locationlist[i];
                    }
                };
                $scope.asignedValue.pickup_options = $scope.pickup_options;
            }

            if ($scope.isCourierCompany == 'true') {
                $scope.courierList = items.courierList;
                $scope.courier_id = $scope.courierList[0];
                loaderFactory.hide();
            }

            $scope.generateLabelWithReassign = function () {
                loaderFactory.display("Generating Label. Please Wait!");
                if ($scope.order.status_code == 3) {
                    asignAwbAndGenerateLabel(false, true);
                }
                else if ($scope.order.status_code == 4 || $scope.order.status_code == 12 || $scope.order.status_code == 13 || $scope.order.status_code == 14 || $scope.order.status_code == 35) {
                    asignAwbAndGenerateLabel(true, true);
                }

            }

            $scope.cancel = function (isRefresh) {
                $uibModalInstance.dismiss('cancel');
                if (isRefresh) {
                    $state.reload();
                }
            };

            $scope.save_purpose_of_shipment = function (purpose_of_shipment) {
                loaderFactory.display("Processing Your Request. Please Wait!");
                var data = {
                    purpose: purpose_of_shipment.id
                };
                AppService.post('orders/save_purpose/' + items.order.id, true, data)
                    .success(function (data) {
                        $scope.purpose_of_shipment = $scope.purpose_of_shipment_options[data.purpose];
                        Notify.alert(data.msg);
                        loaderFactory.hide();
                    })
                    .error(function (error) {
                        AppService.isAuth(error);
                        loaderFactory.hide();
                    })
            };

            $scope.saveDimension = function () {
                loaderFactory.display("Validating Data. Please Wait!");

                var data = {};
                if ($scope.isCourierCompany == 'reasign') {
                    $scope.asignedValue.length = parseFloat($scope.asignedValue.length);
                    $scope.asignedValue.breadth = parseFloat($scope.asignedValue.breadth);
                    $scope.asignedValue.height = parseFloat($scope.asignedValue.height);
                    $scope.asignedValue.weight = parseFloat($scope.asignedValue.weight);
                    data = {
                        length: $scope.asignedValue.length,
                        breadth: $scope.asignedValue.breadth,
                        height: $scope.asignedValue.height,
                        weight: $scope.asignedValue.weight,
                    }
                }
                else {
                    $scope.order.length = parseFloat($scope.order.length);
                    $scope.order.breadth = parseFloat($scope.order.breadth);
                    $scope.order.height = parseFloat($scope.order.height);
                    $scope.order_shipment.weight = parseFloat($scope.order_shipment.weight);
                    data = {
                        length: $scope.order.length,
                        breadth: $scope.order.breadth,
                        height: $scope.order.height,
                        weight: $scope.order_shipment.weight,
                    }
                }
                var no_of_ones = 0;
                if (data.length < 0.5) {
                    no_of_ones++;
                }
                if (data.breadth < 0.5) {
                    no_of_ones++;
                }
                if (data.height < 0.5) {
                    no_of_ones++;
                }
                if (no_of_ones >= 1 || data.weight == 0) {
                    Notify.alert("Dimension should be greater than  or equal to 0.5 x 0.5 x 0.5 and Weight should be greater than 0.", { status: "danger" });
                    loaderFactory.hide();
                    return false;
                }
                else { no_of_ones = 0; }

                if (!data.weight || data.weight == 0) {
                    loaderFactory.hide();
                    Notify.alert("Weight should be greater than 0.", { status: "danger" });
                    return;
                }

                saveDimensionData($scope.isCourierCompany == 'reasign', true, data)
            };

            $scope.getCourierId = function (courierId) {
                $scope.selectedCourierIdOnProcessing = courierId;
            };

            function saveDimensionData(isReassign, fromSaveDimension, data) {
                loaderFactory.display("Processing Your Request. Please Wait!");



                AppService.post(SR_CONSTANTS.api_urls.save_shipment_details + $scope.order.shipment_id, true, data)
                    .then(function (res) {
                        $scope.order.shipments.dimensions = res.data.dimensions;
                        $scope.order.shipments.weight = res.data.weight;
                        $scope.order.shipments.volumetric_weight = res.data.volumetric_weight;
                        if (fromSaveDimension) {
                            if (items.isEditWeight || items.is_return) {
                                $timeout(function () {
                                    getCourierCompanies();
                                }, 500);
                            } else {
                                $scope.updateCourierCompanyWIthWeight()
                                loaderFactory.hide();
                                $uibModalInstance.dismiss('cancel');
                            }
                        } else {
                            $scope.updateCourierCompanyWIthWeight()
                        }
                        return $q.defer().resolve(true);

                    })
                    .catch(function (error) {
                        loaderFactory.hide();
                        AppService.isAuth(error);
                    })
            }

            $scope.reAssignCourier = true;
            $scope.reAssignCourierMessage = false;

            $scope.generateLabel = function ($event, isRecommendation) {
                var target = angular.element($event.currentTarget);
                if (isRecommendation) {
                    asignAwbAndGenerateLabel(false, false, target, isRecommendation);
                }
                else {
                    //intercom event
                    AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.label_order_internal_clicked);
                    if (!$scope.order.shipments.weight) {
                        Notify.alert(SR_CONSTANTS.alert_messages.input_weight);
                        return;
                    }
                    //saveDimensionData();
                    asignAwbAndGenerateLabel(false, false, target);
                }
            }

            function asignAwbAndGenerateLabel(isReassign, isStatus, event, isRecommendation) {
                loaderFactory.display("validating Data. Please Wait!");
                if (isRecommendation) {
                    var postData =
                    {
                        shipment_id: [$scope.order.shipment_id],
                        courier_id: $scope.selectedCourierIdOnProcessing
                    }
                }
                else {
                    var postData =
                    {
                        shipment_id: [$scope.order.shipments.id],
                        courier_id: $scope.selectedCourierIdOnProcessing
                    }

                    if ($scope.courier_id.courier_company_id == 'null') {
                        Notify.alert(SR_CONSTANTS.alert_messages.select_courier_company);
                        loaderFactory.hide();
                        return false
                    }
                }
                var url = SR_CONSTANTS.api_urls.assign_awb;

                if (isReassign) {
                    url = SR_CONSTANTS.api_urls.single_reassign_manifest;
                }
                if (!$scope.order.is_international) {
                    if (isStatus) {
                        postData.weight = $scope.asignedValue.weight;
                    }
                    else {
                        postData.weight = $scope.order.shipments.weight;
                    }
                }
                if (items.is_return) {
                    postData.is_return = 1;
                }
                if (isStatus) {
                    postData.manifest_id = $scope.order.shipments.manifest_id;
                    postData.channel_order_id = $scope.order.channel_order_id;
                    postData.status = 'reassign';
                    postData.length = $scope.asignedValue.length;
                    postData.breadth = $scope.asignedValue.breadth;
                    postData.height = $scope.asignedValue.height;
                }

                if ($scope.allow_mps) {
                    postData.package_count = $scope.package.count;
                }

                var promise, locationPromise;
                if (isStatus || url == SR_CONSTANTS.api_urls.single_reassign_manifest) {
                    //promise = saveDimensionData('true');
                    locationPromise = items.updateOrderPickupLocation($scope.asignedValue.pickup_options.pickup_location, $scope.order.id);
                }

                $q.all([promise, locationPromise]).then(function () {
                    $uibModalInstance.dismiss('cancel');
                    generateLabelOrReassignManifest();
                })

                function generateLabelOrReassignManifest() {
                    loaderFactory.display("Processing Your Request. Please Wait!");
                    AppService.post(url, true, postData)
                        .success(function (data) {
                            var x = data.response.data
                            if (data.awb_assign_status == 1) {
                                if (items.is_return) {
                                    x.is_return = 1;
                                }
                                AppService.openAssignAwbPopup(x);
                            } else if (data.awb_assign_status == 0 && (data.response.data.fedex_int_credentials == false || data.response.data.dhl_int_credentials == false)) {
                                loaderFactory.hide();
                                $uibModalInstance.dismiss('cancel');
                                var modalInstance = $uibModal.open({
                                    animation: true,
                                    templateUrl: 'app/views/modals/international_parameters.html',
                                    controller: 'IntDetailsModal',
                                    size: 'md',
                                    resolve: {
                                        items: function () {
                                            return {
                                                is_settings_page: false,
                                                courier: (angular.isDefined(data.response.data.fedex_int_credentials) && data.response.data.fedex_int_credentials == false) ? 'fedex' : (
                                                    (angular.isDefined(data.response.data.dhl_int_credentials) && data.response.data.dhl_int_credentials) == false
                                                ) ? 'dhl' : ''
                                            }
                                        }
                                    }
                                });

                            } else if (url == SR_CONSTANTS.api_urls.single_reassign_manifest) {
                                loaderFactory.hide();
                                Notify.alert(data.message);
                                // if (data.label_url) {
                                //     window.open(data.label_url);
                                // }
                                $uibModalInstance.dismiss('cancel');
                                $rootScope.manifestId = data.manifest_id;
                                $state.reload();
                            }
                            else {
                                loaderFactory.hide();
                                Notify.alert(data.response.data);
                                $uibModalInstance.dismiss('cancel');
                                $state.reload();
                            }
                            loaderFactory.hide();
                        })
                        .error(function (error) {
                            loaderFactory.hide();
                            AppService.isAuth(error);
                        })
                }
            }


            $scope.updateCourierCompanyWIthWeight = function (isReassign) {
                loaderFactory.display("Processing Your Request. Please Wait!");

                var weight = $scope.order.shipments.weight;
                if (isReassign) {
                    weight = $scope.asignedValue.weight;
                }
                if (!weight) {
                    return;
                }

                if (isReassign) {
                    var postData =
                    {
                        weight: weight,
                        shipment_id: $scope.order.shipments.id
                    }
                    AppService.post(SR_CONSTANTS.api_urls.get_single_reassign_data, true, postData)
                        .success(function (data) {
                            var courierData = data.data.courier_options.available_courier_companies;
                            $scope.asignedValue.courier_list = courierData;
                            $scope.asignedValue.courier_list = $scope.asignedValue.courier_list.map(courierWithPrice);
                            $scope.courier_id = $scope.asignedValue.courier_list[0];
                        })
                        .error(function (error) {
                            loaderFactory.hide();
                            AppService.isAuth(error);
                        })
                }
                else {
                    var url;
                    if (items.order.is_international == 1) {
                        url = 'courier/international/serviceability?order_id=' + $scope.order.id;
                    } else if (items.is_return) {
                        url = SR_CONSTANTS.api_urls.courier_serviceability + '?pickup_postcode=' + $scope.order.pickup_code + '&order_id=' + $scope.order.id + '&delivery_postcode=' + $scope.order.delivery_code + '&weight=' + weight + '&is_return=1&cod=0';
                    } else {
                        url = SR_CONSTANTS.api_urls.courier_serviceability + '?pickup_postcode=' + $scope.order.pickup_code + '&order_id=' + $scope.order.id + '&delivery_postcode=' + $scope.order.delivery_code + '&weight=' + weight + '&cod=' + $scope.order.cod;
                    }
                    AppService.get(url, true)
                        .success(function (data) {
                            if (data.status == '404') {
                                Notify.alert(data.message);
                                loaderFactory.hide();
                                return;
                            }
                            else {
                                loaderFactory.hide();
                                var courierData = data.data.available_courier_companies;
                                courierData = courierData.map(courierWithPrice);
                                $scope.courierList = courierData;
                                $scope.courier_id = $scope.courierList[0];
                            }

                        })
                        .error(function (error) {
                            if (error.status_code === 422) {
                                var keys = Object.keys(error.errors);
                                Notify.alert(error.errors[keys[0]][0]);
                            }
                            else {
                                AppService.isAuth(error);
                            }
                            loaderFactory.hide();
                        })
                }
            }

            function courierWithPrice(obj) {
                obj.courierWithprice = obj.courier_name + "  Rs " + obj.rate;
                return obj;
            }

            function getCourierCompanies() {
                loaderFactory.display("Checking Up With Our Courier Partners. Please Wait!");

                $scope.courierCompanies = [];
                var order = $scope.order;
                var url = " ";
                if (items.order.is_international == 1) {
                    url = 'courier/international/serviceability?order_id=' + $scope.order.id;
                } else {
                    url = SR_CONSTANTS.api_urls.courier_serviceability + '?pickup_postcode=' + ((items.isCourierCompany && items.isCourierCompany == 'reasign' ? $scope.asignedValue.pickup_options.pin_code : order.pickup_code)) + ((items.isCourierCompany && items.isCourierCompany == 'reasign') ? '&length=' + $scope.asignedValue.length + '&breadth=' + $scope.asignedValue.breadth + '&height=' + $scope.asignedValue.height : '&order_id=' + order.id) + '&delivery_postcode=' + order.delivery_code + '&weight=' + ((items.isCourierCompany && items.isCourierCompany == 'reasign') ? $scope.asignedValue.weight : order.shipments.weight) + '&cod=' + order.cod + '&declared_value=' + order.total + (items.is_return == 1 ? '&is_return=1' : '');
                }
                AppService.get(url, true)
                    .success(function (data) {
                        if (data.status == '404') {
                            if (!items.is_return) {
                                Notify.alert(data.message);
                            }
                            loaderFactory.hide();
                            return false;
                        }
                        else if (!data.data.available_courier_companies.length) {
                            Notify.alert(SR_CONSTANTS.alert_messages.courier_company_not_available);
                            return false;
                        } else {
                            if (items.isCourierCompany && items.isCourierCompany == 'reasign') {
                                _.remove(data.data.available_courier_companies, function (company) {
                                    return company.courier_company_id === items.asignedValue.assigned_courier_id;
                                });
                            }
                            $scope.courierCompanies = data.data.available_courier_companies;
                            $scope.selectedCourierIdOnProcessing = $scope.courierCompanies[0].courier_company_id;
                        }
                        loaderFactory.hide();
                    })
                    .error(function (error) {
                        if (error.status_code === 422) {
                            var keys = Object.keys(error.errors);
                            Notify.alert(error.errors[keys[0]][0]);
                        }
                        else {
                            AppService.isAuth(error);
                        }
                        loaderFactory.hide();
                    });
            }

            function openRechargeModal() {
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/Settings/topnavrecharge.html',
                    controller: 'rechargeController',
                    size: 'recharge'
                });
            }

        }
    }
})();

/**=========================================================
 * Module: orderMappingController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('orderMappingController', orderMappingController);
    orderMappingController.$inject = ['$rootScope', '$scope', '$http', 'AppService',  '$state', 'Notify', '$uibModalInstance', 'items', 'SR_CONSTANTS'];
    function orderMappingController($rootScope, $scope, $http, AppService, $state, Notify, $uibModalInstance, items, SR_CONSTANTS)
    {
        activate();
        function activate()
        {

            $scope.productHtml = '';
            $scope.unmappedOrder = items;

            $scope.getProduct = function($event, index)
            {

                $('.options').html('');
                var target = angular.element($event.currentTarget);
                if(target.attr('data-sku'))
                {
                    if($event.keyCode == 8)
                    {
                        target.attr('data-sku', '');
                        target.val('');
                    }
                    else
                    {
                        return false;
                    }
                }

                var value = target.val();

                if(value.length < 3)
                {
                    return false;
                }
                $('.validation-alert').remove();
                var data =
                {
                    query: value
                };
                AppService.post(SR_CONSTANTS.api_urls.search_listings, true, data )
                .success(function(data){
                    var html =  '';
                    var products = data;
                    for(var i=0; i<products.length; i++)
                    {
                       html +=  '<div data-p-weight="'+products[i].weight+'" data-p-breadth="'+products[i].dimensions.width+'" data-p-height="'+products[i].dimensions.height+'" data-p-length="'+products[i].dimensions.length+'" data-sku="'+ products[i].sku + '" data-hsn="'+ products[i].hsn + '" data-units='+ products[i].quantity + ' data-selling-price='+ products[i].selling_price  + ' class="product-wrapper " '+ 'data-name="' +products[i].name  +'" >'+ products[i].search  +'</div>'
                    }
                    target.closest('.products-wrapper').find('.options').html(html);

                    $(".product-wrapper").bind("click", (function ()
                    {
                        var currentObject = $(this);
                        var currentInput = $(this).closest('.products-wrapper').find('input');
                        currentInput.val(currentObject.data('name'));
                        $(this).closest('.products-wrapper').find('input').attr("data-sku", currentObject.data('sku'));
                        $(this).closest('.products-wrapper').find('.options').html('');
                    }));
                    $(".products-wrapper").mouseleave(function(){
                       $(this).find('.bulkmapping-dorpdown').hide();
                    });
                    $(".products-wrapper").bind('mouseenter', function(){
                       $(this).find('.bulkmapping-dorpdown').show();
                    });
                    $(".products-wrapper .productId").keypress(function(){
                       $('.bulkmapping-dorpdown').show();
                    });
                    //AppService.setHeight();

                })
                .error(function(error, status)
                {
                    AppService.isAuth(error);
                }).finally(function()
                {
                    AppService.isAuth(error);
                });
            }

            $scope.linkAllProduct = function()
            {
                //intercom event
                $scope.isPreloader = true;
                AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.clicked_bulk_map);
                $('.link-all-btn').prop('disabled', true);
                var products = $('.products-wrapper');
                var dataArry = [];

                for ( var i = 0; i < products.length; i++ )
                {
                    if( $('#productId'+i).attr('data-sku') )
                    {
                        var dataObj =
                        {
                            order_id: $('#productId'+i).data('order-id'),
                            order_product_id: $('#productId'+i).data('product-id'),
                            master_sku: $('#productId'+i).attr('data-sku')
                        }
                        dataArry.push(dataObj);
                    }
                }
                if(!dataArry.length)
                {
                    Notify.alert(SR_CONSTANTS.alert_messages.select_sku);
                    $('.link-all-btn').prop('disabled', false);
                    $scope.isPreloader = false;
                    return false;
                }
                var data  =
                {
                    'data': dataArry
                }
                var target = $('.link-all-btn');
                linkProducts(data, target);
            }

            $scope.closeBulkMappingModal = function()
            {
                $uibModalInstance.dismiss('cancel');
                $("#ordertable .checkbox input[type='checkbox']").attr('checked', false);
            }

            $scope.linkSingleProduct = function($event, index)
            {
                //intercom event
                AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.clicked_single_map);
                $scope.isPreloader = true;
                var target = angular.element($event.currentTarget);
                target.prop('disabled', true);
                $('.link-all-btn').prop('disabled', true);
                if(!target.closest('.table-row').find('input')[0].getAttribute("data-sku"))
                {
                    target.prop('disabled', false);
                    $('.link-all-btn').prop('disabled', false);
                    Notify.alert(SR_CONSTANTS.alert_messages.select_sku);
                    $scope.isPreloader = false;
                    return false;
                }

                var productToLink =  $scope.unmappedOrder[index];
                var dataArry = [];
                var dataObj =
                {
                    order_id: productToLink.order_id,
                    order_product_id: productToLink.id,
                    master_sku: target.closest('.table-row').find('input').data('sku')
                }

                dataArry.push(dataObj);
                var data  =
                {
                    'data': dataArry
                }
                linkProducts(data, target);
            }

            function linkProducts(data, target)
            {

                AppService.patch(SR_CONSTANTS.api_urls.orders_mapping, true, data)
                .success(function(data)
                {
                    $scope.isPreloader = false;
                    var totalMappedWithFulfilable = 0;
                    target.prop('disabled', false);
                    $('.link-all-btn').prop('disabled', false);
                    var orderLength = $scope.unmappedOrder.length;
                    for (var j = 0; j < orderLength; j++)
                    {
                        var length = data.length;
                        for(var i=0; i< length; i++)
                        {
                            if(data[i].success === true)
                            {
                                if(data[i].status_code == 2)
                                {
                                    totalMappedWithFulfilable += 1;
                                }
                                if( data[i].data.order_product_id == $scope.unmappedOrder[j].id )
                                {
                                    $('#productId' +j).prop('disabled', true);
                                    $('.linkBtn'+j).unbind('click');
                                    $('.linkBtn'+j).find('.fa-link').addClass('hide');
                                    $('.linkBtn'+j).find('.fa-check').removeClass('hide').addClass('show');
                                    break;
                                }
                            }
                            else if(data[i].success === false && data[i].data.order_product_id == $scope.unmappedOrder[j].id )
                            {
                                var errorHtml = '<div class="help-block validation-alert product-font">' + data[i].message+ '</div>';
                                $('#productId'+j).closest('.products-wrapper').find('.validation-alert').remove();
                                $('#productId' +j).after(errorHtml);
                            }

                        }
                    }
                    if(totalMappedWithFulfilable === orderLength)
                    {
                        $state.go('app.processing');
                    }
                    else
                    {
                        $state.go($state.current, {}, {reload: true});
                    }
                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                    $scope.isPreloader = false;
                    target.prop('disabled', false);
                    $('.link-all-btn').prop('disabled', false);
                })

            }

        }
    }
})();


/**=========================================================
 * Module: orderUploadController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('orderUploadController', orderUploadController);
    orderUploadController.$inject = ['$rootScope', '$scope', 'AppService',  '$state', 'Notify', '$uibModal', '$window', '$localStorage'];
    function orderUploadController($rootScope, $scope, AppService, $state, Notify, $uibModal, $window, $localStorage)
    {
        activate();
        function activate()
        {
            var user = $localStorage.USER;
            if(user) {
                $rootScope.isBasicPlan = user.is_basic_plan;
                $rootScope.toggleOff = !user.inventory_sync_status;
                $rootScope.isInernationalActivated = user.international_status == 1

            }
            $scope.openModal = function()
            {
                $scope.items = {
                    type: 'order'
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop  : 'static',
                    keyboard  : false,
                    templateUrl: 'importOrderfile.html',
                    controller: 'UploadController',
                    size: 'sm-400',
                    resolve: {
                        items: function ()
                        {
                         return $scope.items;
                        }
                    }
                });
            }

        }
    }
})();

/**=========================================================
 * Module: View All Order
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('orderViewAllOrder', orderViewAllOrder);
    orderViewAllOrder.$inject = ['$rootScope', '$scope', '$http', 'AppService',  '$state', 'Notify', '$uibModal'];
    function orderViewAllOrder($rootScope, $scope, $http, AppService, $state, Notify, $uibModal)
    {
        activate();
        function activate()
        {   
            AppService.setHeight();
            $rootScope.orderActive = 'active';
            $('.section-wrapper').scroll(function() {    
                var scroll = $('.section-wrapper').scrollTop();
                if (scroll >= 140) {
                    //clearHeader, not clearheader - caps H
                    $(".table-head").addClass("fixHeader");
                }
                else{
                    $(".table-head").removeClass("fixHeader");
                }
            });

            $scope.clear = function () {
                $scope.dt = null;
            };

            $scope.toggleMin = function() {
                $scope.minDate = $scope.minDate ? null : new Date();
            };
            $scope.toggleMin();

            $scope.open = function($event) {
              // $event.preventDefault();
              // $event.stopPropagation();

            $scope.opened = true;
            };

            $scope.dateOptions = {
                formatYear: 'dd-mm-yy',
                startingDay: 1
            };
        }
    }
 })();
/**=========================================================
 * Module: OrdersController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('OrdersController', OrdersController);
    OrdersController.$inject = ['$rootScope', '$scope', 'AppService', '$state', 'Notify', '$q', '$uibModal', 'SR_CONSTANTS', '$localStorage', 'loaderFactory'];
    function OrdersController($rootScope, $scope, AppService, $state, Notify, $q, $uibModal, SR_CONSTANTS, $localStorage, loaderFactory)
    {
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }
        function activate(user)
        {
            AppService.setHeight();
            $rootScope.orderActive = 'active';
            $scope.isData= true;
            $scope.isPreloader = true;
            $scope.isFreePlan = false;

            $rootScope.toggleOff = !user.inventory_sync_status;
            $rootScope.isRestrictFreePlan = false;
            $rootScope.show_channel_sync_button = user.show_channel_page;
            $rootScope.isBasicPlan = user.is_basic_plan;
            if (user.is_free_plan) {
              $scope.isFreePlan = true;
              $rootScope.isRestrictFreePlan = true;
            }

            $scope.syncOrder = syncOrder;
            $scope.syncStatus = syncStatus;
            $scope.backHistory = backHistory;
            $scope.selectOrderType = selectOrderType;

            function selectOrderType (type) {
              var state = type == 0 ? 'app.customorder' : 'app.createReturn'
              if((!$rootScope.isRestrictFreePlan && !$rootScope.isBasicPlan && !$rootScope.toggleOff) && $scope.pickupLocationList.length !== 0){
                var modalInstance = $uibModal.open({
                  animation: true,
                  templateUrl: 'app/views/modals/select_order_type.html',
                  controller: 'orderTypeController',
                  size: 'sm',
                  resolve: {
                    ordertype: function(){
                      return type;
                    }
                  }
                });
              } else if(!(!$rootScope.isRestrictFreePlan && !$rootScope.isBasicPlan && !$rootScope.toggleOff) && $scope.pickupLocationList.length !== 0) {
                $state.go(state, {type:'linked'});
              } else if ($scope.pickupLocationList.length == 0){
                $state.go('app.companyAddressDetails');
              }
            }


            function syncOrder(){
                Notify.alert(SR_CONSTANTS.alert_messages.order_sync_started,  {status: 'success' });
                AppService.get(SR_CONSTANTS.api_urls.fetch_orders)
                .error(function(error){
                  AppService.isAuth(error, 'danger');
                })
            };

            function syncStatus(){
                Notify.alert(SR_CONSTANTS.alert_messages.status_sync_started,  {status: 'success' });
                AppService.get(SR_CONSTANTS.api_urls.orders_status)
                .error(function(error){
                  AppService.isAuth(error, 'danger');
                })
            }

            AppService.get(SR_CONSTANTS.api_urls.get_orders_count)
            .success(function(data){
                $rootScope.orderCount = data;

            })
            .error(function(error){
                AppService.isAuth(error);
            })


            function backHistory(){
                window.history.back();
            }

            switch ($state.current.name) {
              case 'app.unprocessible':
                $scope.unprocessablemenu = true;
                break;
              case 'app.processing':
                $scope.processablemenu = true;
                break;
              case 'app.processing_international':
                $scope.processablemenu = true;
                break;
              case 'app.manifested':
                $scope.manifestmenu = true;
                break;
              case 'app.returns':
                $scope.returnsmenu = true;
                break;
            }


            $scope.selected = [];
            function getPickupLocation(){
                loaderFactory.display("Please Wait!");
                AppService.get('settings/company/pickup', true)
                .success(function(data){
                  $scope.pickupLocationList = data.data.shipping_address;
                  if ($state.current.name == 'app.processing' || $state.current.name == 'app.processing_international') {
                    $scope.pickupLocationList = data.data.shipping_address.filter(function(value){
                      return value.status != 0;
                    });
                  }
                  $scope.pickup_address = data.data.shipping_address.map(function(item){
                    var data = {
                      value: item.id,
                      display_value: item.pickup_location
                    }
                    return data;
                  });
                  loaderFactory.hide();
                })
                .error(function(error){
                  AppService.isAuth(error);
                  loaderFactory.hide();
                })
            }
            getPickupLocation();
      }
    }
})();

/**=========================================================
* Module: processingOrdersController
=========================================================*/
(function() {
  'use strict';
  angular
    .module('app.orders')
    .controller('processingOrdersController', processingOrdersController);

  processingOrdersController.$inject = ['$document', '$rootScope', '$scope', 'AppService', 'ga_service', '$state', 'appConstant', 'Notify', '$uibModal', '$timeout', '$stateParams', '$localStorage', 'SR_CONSTANTS', '$location', 'loaderFactory','$window'];

  function processingOrdersController($document, $rootScope, $scope, AppService, ga_service, $state, appConstant, Notify, $uibModal, $timeout, $stateParams, $localStorage, SR_CONSTANTS, $location, loaderFactory, $window) {
    var user = $localStorage.USER;
    if(user){
			activate(user);
    }

    function activate(user) {

      loaderFactory.display("Generating Manifest. Please Wait!");
      $scope.isPreloader = false;

      if ($state.current.name === 'app.processing_international') {
        $scope.show_international_orders = true;

        AppService.get('settings/international/status', true)
          .success(function(data) {
            if (data.status == 1) {
              // var user = $localStorage.USER;
              if (user) {
                user.international_status = 1;
              }
              $rootScope.isInernationalActivated = true;
            }
          })
          .error(function(error) {
            // $scope.isPreloader = false;
            AppService.isAuth(error, 'danger');
          })
      }
      var currentFilters = $location.search();
      $scope.filterModels = {
        to: angular.isDefined(currentFilters.to) ? currentFilters.to : "",
        from: angular.isDefined(currentFilters.from) ? currentFilters.from : "",
        search: angular.isDefined(currentFilters.search) ? currentFilters.search : "",
        channel_id: angular.isDefined(currentFilters.channel_id) ? currentFilters.channel_id : "",
        order_status: angular.isDefined(currentFilters.order_status) ? currentFilters.order_status : "",
        payment_method: angular.isDefined(currentFilters.payment_method) ? currentFilters.payment_method : ""
      }

      //Shopify Webhook Bigsmall START
      if (user) {
        if ($stateParams.hasOwnProperty('shop') && $stateParams.shop != '') {
          shopifyWebhook();
        }
      }

      $scope.openLabelPopup = openLabelPopup;

  		function shopifyWebhook() {
  			var url = new URL($location.absUrl());
  			var ids = url.searchParams.getAll("ids[]");
        ids = (ids.length == 0) ? url.searchParams.getAll("ids") : ids;
  			var api_url = 'webhook/shopify';
  			var data = {
  				order_id: ids,
  				shop: $stateParams.shop
  			};

  			$scope.data = data;

  			AppService.post(api_url, true, data)
  				.success(function (data) {
            Notify.alert(data.message, {status: 'success', timeout: 7000 });
  				})
  				.error(function (error) {
  					Notify.alert(error.message, {status: 'danger', timeout: 7000 });
  				});

  			var modalInstance = $uibModal.open({
  				animation: true,
  				templateUrl: 'shopifyWebhook.html',
  				scope: $scope,
  				size: 'sm-400',
  				backdrop  : 'static'
  			});
  		}
      //Shopify Webhook Bigsmall END

      //Bulk Shipping START
      $scope.selectall = false;
      $scope.allOrdersSelected = false;
      $scope.printBulkLabel = printBulkLabel;
      $scope.printPicklist = printPicklist;
      $scope.printBulkInvoice = printBulkInvoice;
      $scope.disableButtons = disableButtons;
      $scope.checkBulkStatus = checkBulkStatus;
      $scope.selectAllOrders = selectAllOrders;
      $scope.generateInvoice = generateInvoice;
      $scope.generateChannelInvoice = generateChannelInvoice;
      $scope.cancelOrderModal = cancelOrderModal;
      $scope.updateOrderPickupLocation = updateOrderPickupLocation;
      $scope.upgrade_for_international = upgrade_for_international;
      $scope.getInternationalOrDomesticOrders = getInternationalOrDomesticOrders;

      function checkBulkStatus(){
        $scope.selectall = $('#checkall-checkbox input')[0].checked;
        // $scope.selectall = a;
        $scope.allOrdersSelected = false;
      }

      function selectAllOrders(){
        if($scope.allOrdersSelected){
          $scope.allOrdersSelected = false;
          $('#checkall-checkbox input')[0].checked = false;
          $('input[type=checkbox]').prop('checked', $('#checkall-checkbox input')[0].checked)
          $scope.selectall = false;
          disableButtons();
        } else {
          $scope.allOrdersSelected = true;
        }
      }

      //Bulk Shipping END

      function disableButtons() {
        setTimeout(function() {
          var orderslength = getSelectedItems("", true).length;
          if (orderslength >= '1') {
            $('.generate-btn').attr('disabled', false);
            $('.cancel').attr('disabled', false);
            $('.ship').attr('disabled', false);
            $('.pickuplocations').attr('disabled', false);
          } else {
            $('.generate-btn').attr('disabled', true);
            $('.cancel').attr('disabled', true);
            $('.ship').attr('disabled', true);
            $('.pickuplocations').attr('disabled', true);
          }
        }, 2);
      }

      //Long Polling Start
      $scope.bulkInQueue = false;
      $scope.showBulkInfoRemove = false;
      var loadTime = 6000, //Load the data every second
        errorCount = 0, //Counter for the server errors
        callCount = 0,
        loadPromise; //Pointer to the promise created by the Angular $timout service

      $scope.bulkdata;
      $scope.bulk_type;
      $scope.bulkInfoModal = bulkInfoModal;

      function bulkInfoModal (type) {
        var bulkModal = $uibModal.open({
          animation: true,
          templateUrl: 'bulkInfoModal.html',
          scope: $scope,
          size: 'sm'
        })
        .closed.then(function(){
          if(!$scope.bulkInQueue && callCount > 1){
            window.location.reload();
          }
        });
      }

      function bulkSuccessFn(res) {
        $scope.bulkInQueue = true;
        $scope.showBulkInfoRemove = false;
        $scope.bulkdata = {
          total: res.data.total != null ? res.data.total : '-' ,
          success: res.data.success != null ? res.data.success : '-' ,
          error: res.data.error != null ? res.data.error : '-' ,
          pending: res.data.pending != null ? res.data.pending : '-' ,
        }
        $scope.bulkStatus = res.data.status;
        errorCount = 0;
        if ($scope.bulkStatus == 0) {
          cancelNextLoad();
          if(res.data.pending == 0){
            bulkInfoModal();
            $scope.bulkInQueue = false;
            $scope.showBulkInfoRemove = true;
            delete $localStorage.bulk_assign_awb;
          } else if(res.data.pending == null){
            $scope.bulkInQueue = false;
          }
        } else {
          nextLoad();
        }
        callCount++;
      }

      var getBulkData = function() {
        var bulk_type = $localStorage.bulk_assign_awb ? $localStorage.bulk_assign_awb : false;
        $scope.bulk_type = bulk_type;
        if(bulk_type){
          AppService.get('courier/bulk_details?type=' + bulk_type, true)
          .then(function(res){
            bulkSuccessFn(res);
          })
          .catch(function(res) {
            $scope.errorMsg = 'Server error';
            nextLoad(++errorCount * 2 * loadTime);
          });
        } else {
          AppService.get('courier/bulk_details?type=5', true)
          .then(function(res){
            if(res.data.status){
              $localStorage.bulk_assign_awb = 5
              bulkSuccessFn(res);
            } else {
              AppService.get('courier/bulk_details?type=1', true)
              .then(function(res){
                if(res.data.status){
                  $localStorage.bulk_assign_awb = 1
                  bulkSuccessFn(res)
                }
              })
              .catch(function(res) {
                $scope.errorMsg = 'Server error';
                nextLoad(++errorCount * 2 * loadTime);
              });
            }
          })
          .catch(function(res) {
            $scope.errorMsg = 'Server error';
            nextLoad(++errorCount * 2 * loadTime);
          });
        }
      };

      var cancelNextLoad = function() {
        $timeout.cancel(loadPromise);
        loaderFactory.hide();
      };

      var nextLoad = function(mill) {
        mill = mill || loadTime;

        //Always make sure the last timeout is cleared before starting a new one
        cancelNextLoad();
        loadPromise = $timeout(getBulkData, mill);
      };

      getBulkData();

      //Always clear the timeout when the view is destroyed, otherwise it will keep polling and leak memory
      $scope.$on('$destroy', function() {
        cancelNextLoad();
      });

      //Long Polling End

      $scope.show_dimension_form = [];
      $scope.isFreePlan = false;
      $rootScope.isRestrictFreePlan = false;
      $rootScope.show_channel_sync_button = user.show_channel_page;
      if (user) {
        $rootScope.international_plans = _.indexOf(appConstant.internationalPlans, user.plan_id) > -1;
        // (user.plan_id == 4) || (user.plan_id == 3);
        $rootScope.isBasicPlan = user.is_basic_plan;
        if (user.is_free_plan) {
          $scope.isFreePlan = true;
          $rootScope.isRestrictFreePlan = true;
        }
      }


      //intercom event
      AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.order_clicked);

      var eventToTriggerAfterIMEI = '';
      var action = {
        className: 'processing-order-table-action',
        width: $('.processing-order-table-action').outerWidth(),
        tableClass: 'processing-order-table'
      }
      var sla = {
        className: 'ordersla',
        width: $('.ordersla').outerWidth()
      }
      var dimension = {
        className: 'processing-order-table-dimension',
        width: $('.processing-order-table-dimension').outerWidth()
      }
      var orderdate = {
        className: 'processing-order-table-orderdate',
        width: $('.processing-order-table-orderdate').outerWidth()
      }
      var orderid = {
        className: 'processing-order-table-orderid',
        width: $('.processing-order-table-orderid').outerWidth()
      }


      $rootScope.orderActive = 'active';
      $rootScope.hiddenClass = '';

      $scope.maxSize = 2;
      $scope.totalItems = 10000000;
      $scope.page = $stateParams.page;
      var isDashboard = $stateParams.isDashboard;

      $scope.itemsPerPage = [
        {value: '15',id: 0},
        {value: '30',id: 1},
        {value: '60',id: 2},
        {value: '100',id: 3}
      ];

      if ($stateParams.perPage == 30) {
        $scope.selectedItems = 1;
      } else if ($stateParams.perPage == 60) {
        $scope.selectedItems = 2;
      } else if ($stateParams.perPage == 100) {
        $scope.selectedItems = 3;
      } else {
        $scope.selectedItems = 0;
      }


      AppService.get('orders/processingordersfilters', true)
        .success(function(data) {
          $scope.channel_filter_data = data.channels;
          $scope.statuses_filter_data = data.statuses;
          $scope.paymentTypes_filter_data = data.paymentTypes;
        })
        .error(function(error) {
          // $scope.isPreloader = false;
          AppService.isAuth(error, 'danger');
        });


      function activate_plan_upgrade() {

        AppService.get('settings/plans/all', true)
          .success(function(data) {
            var activePlanID = data.data.find(isActive);
            $scope.adv_plan = _.find(data.data, function(o) {
              return o.id === 3;
            });
            $scope.pro_plan = _.find(data.data, function(o) {
              return o.id === 4;
            });
            $scope.planData = [$scope.adv_plan, $scope.pro_plan];

            $scope.activePlanScore = activePlanID.id;
            $scope.isProPlus = $scope.activePlanScore == 5;
          })
          .error(function(error) {
            AppService.isAuth(error, 'danger');
          });

        $scope.updatePlan = function(id, planName, price, plan) {
          var items = {
            id: id,
            is_active: $scope.activePlanScore,
            planName: planName,
            price: price,
            plans: plan
          };

          AppService.intercomEventAndPing('upgardePlan Clicked');

          var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'upgradeplan.html',
            controller: 'updatePlanController',
            size: 'recharge',
            resolve: {
              items: function() {
                return items;
              }
            }
          });
        };

        $scope.selfUpdateModal = function(id, planName, price, plan) {
          if ($scope.activePlanScore != 1) { //id of current plan  is not of that of lite plan
            $scope.updatePlan(id, planName, price, plan);
          } else {
            var items = {
              id: id,
              is_active: $scope.activePlanID,
              planName: planName,
              price: price,
              plans: plan
            };

            var modalInstance = $uibModal.open({
              animation: true,
              templateUrl: 'app/views/modals/selfUpdgradePlan.html',
              controller: 'updatePlanController',
              size: 'recharge',
              resolve: {
                items: function() {
                  return items;
                }
              }
            });
          }
        };

        function isActive(plan) {
          if (plan.is_active) {
            return plan.id;
          }
        }
      }

      if (!$rootScope.international_plans) {
        activate_plan_upgrade();
      }

      $scope.calculate_width = function() {
        action = {
          className: 'processing-order-table-action',
          width: $('.processing-order-table-action').outerWidth(),
          tableClass: 'processing-order-table'
        };
        dimension = {
          className: 'processing-order-table-dimension',
          width: $('.processing-order-table-dimension').outerWidth()
        };
        orderdate = {
          className: 'processing-order-table-orderdate',
          width: $('.processing-order-table-orderdate').outerWidth()
        };
        orderid = {
          className: 'processing-order-table-orderid',
          width: $('.processing-order-table-orderid').outerWidth()
        };

      };

      $scope.paginatedData = function() {
        $('th').remove();
        var currentFilters = $location.search();
        currentFilters.perPage = $scope.itemsPerPage[$scope.selectedItems].value;
        currentFilters.page = $scope.page;
        $location.search(currentFilters);
      }

      $scope.sortReverse = false;

      $scope.changePerPage = function() {
        $('th').remove();
        var currentFilters = $location.search();
        currentFilters.perPage = $scope.itemsPerPage[$scope.selectedItems].value;
        currentFilters.page = $scope.page;
        $location.search(currentFilters);
      }

      $scope.sortTable = function(type) {
        $scope.sortType = type;
        $scope.sortReverse = !$scope.sortReverse;
        processingOrderData();
      }

      $scope.hideMoreProduct = function($event, product) {
        if (product.length < 2) {
          var target = angular.element($event.currentTarget);
          target.find('.popover').css('display', 'none');
        }
      }

      $scope.getProcessingOrder = function() {
        processingOrderData();
      }

      function printBulkInvoice($event) {
        //intercom event
        AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.bulk_invoice_button_clicked);
        ga_service.send('Orders', 'bulk_invoice_clicked');

        var target = angular.element($event.currentTarget);
        eventToTriggerAfterIMEI = target;
        loaderFactory.display("Processing Your Request. Please Wait!");

        // $scope.isPreloader = true;
        var data = getSelectedItems('orderId');
        if (!data) {
          loaderFactory.hide();
          // $scope.isPreloader = false;
          return false;
        }
        // Check for HSN
        if (user.gstn == true) {
          var productForHsn = getEmptyHsnProduct();
          if (productForHsn.length) {
            hsnUpdate(productForHsn, 'hsn', ImeiOrinvoice);
            return false;
          } else {
            ImeiOrinvoice();
          }
        } else {
          ImeiOrinvoice();
        }

        function ImeiOrinvoice() {
          //Check for IMEI
          var productForImei = getEmptyIMEIProduct();
          if (productForImei.length) {
            imeiNoUpdate(productForImei, 'Invoice');
          } else {
            printInvoice(data);
          }
        }
      }

      function printPicklist() {
        //intercom event
        loaderFactory.display("Processing Your Request. Please Wait!");
        ga_service.send('Orders', 'bulk_picklist_clicked');
        AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.bulk_picklist_button_clicked)
        // $scope.isPreloader = true;
        var data = getSelectedItems('orderId');
        if (!data) {
          loaderFactory.hide();
          // $scope.isPreloader = false;
          return false
        }

        AppService.post(SR_CONSTANTS.api_urls.generate_picklists, true, data)
          .success(function(data) {
            AppService.downloadDataWithUrl(data.picklist_url);
            $("input:checkbox").prop("checked", false);
            disableButtons();
            checkBulkStatus();
            loaderFactory.hide();
          })
          .error(function(error) {
            loaderFactory.hide();
            $("input:checkbox").prop("checked", false);
            disableButtons();
            checkBulkStatus();
            AppService.isAuth(error, 'danger');
          })
        $('.generate-btn').attr('disabled', true);
        $('.cancel').attr('disabled', true);
        $('.ship').attr('disabled', true);
      }

      function printBulkLabel($event) {
        //intercom event
        AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.bulk_label_button_clicked);
        ga_service.send('Orders', 'bulk_label_clicked');
        loaderFactory.display("Checking Dependencies.");
        // $scope.isPreloader = true;

        var selected_order_data = getSelectedItems('shipment');
        if((selected_order_data.ids.length + $localStorage.USER.shipment_count) > 5 && [0,3].indexOf($localStorage.USER.kyc_status) != -1 && $localStorage.USER.kyc_shipment_check){
          loaderFactory.hide();
          var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'app/views/modals/kyc_verification_popup.html',
            scope: $scope,
            size: 'md'
          });
          return;
        }

        //cod recon handling

        AppService.get(SR_CONSTANTS.api_urls.all_pending_cod_recon, true)
        .then(function(res) {
          // $scope.isPreloader = false;
          if (res.data.length) {
            AppService.openCodReconModal(res.data);
            loaderFactory.hide();
          } else {
            checkForBulkLabelCreation($event, selected_order_data);
          }
        })
        .catch(function(error) {
          loaderFactory.hide();
          // $scope.isPreloader = false;
          AppService.isAuth(error, 'danger');
        })
        //cod recon handling end


      };

      function cancelOrderModal() {

        var data = {
          orderIds: getSelectedItems('orderId'),
          isNonChannelCancelOrder: $scope.isNonChannelCancelOrder,
          hideCancelOnChannel: $scope.hideCancelOnChannel

        };
        if (!data) {
          return false;
        }
        setTimeout(function() {
          $('input.wh-15.cancel_on_channel_checkbox').attr("type", "checkbox");
        }, 0);
        var modalInstance = $uibModal.open({
          animation: true,
          templateUrl: 'orderCancel.html',
          controller: 'orderCancelController',
          size: 'sm',
          resolve: {
            items: function() {
              return data;
            }
          }
        });
        $('.generate-btn').attr('disabled', true);
        $('.cancel').attr('disabled', true);
        $('.ship').attr('disabled', true);
      }

      function generateChannelInvoice (channelId, channelOrderId, $event) {
        loaderFactory.display('Fetching Invoice from Channel')
        AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.channel_invoice_clicked);
        ga_service.send('Orders', 'single_channel_invoice_clicked');
        $event.stopPropagation();
        var data = {
          channel_id: channelId,
          channel_order_id: channelOrderId
        }
        AppService.post(SR_CONSTANTS.api_urls.print_channel_invoice, true, data)
        .then(function(res){
          AppService.downloadDataWithUrl(res.data.invoice_url, 'channel_invoice');
          loaderFactory.hide();
        }, function(error){
          loaderFactory.hide();
          if (error.status == 404) {
            Notify.alert('We are not able to fetch your channel Invoice, connect to our support team for assistance', {status: 'danger', timeout: 7000 });
          } else {
            AppService.isAuth(error, 'danger');
          }
        });
      }

      function generateInvoice(shipment_id, id, shipments, $event, index) {
        //intercom event
        AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.invoice_clicked);
        ga_service.send('Orders', 'single_invoice_clicked');
        $event.stopPropagation();

        var target = angular.element($event.currentTarget);
        eventToTriggerAfterIMEI = target;
        var courier_id = target.closest('.action-wrapper').find('.select-action').val();
        var courier_name = target.closest('.action-wrapper').find('.select-action').find(":selected").text();
        loaderFactory.display("Processing Orders Data. Please Wait!");
        // $scope.isPreloader = true;
        if (courier_name === 'Select Courier') {
          courier_name = '';
        }
        var data = {
          ids: [id],
          courier_name: courier_name,
          courier_id: courier_id
        };
        if (angular.isDefined(index)) {
          if ($scope.processingOrder[index].is_international == 1) {
            data.shipment_ids = [shipment_id];
            delete data.ids;
          }
        }

        // Check for Hsn
        if (user.gstn == true) {
          var productForHsn = getEmptyHsnProduct(index);
          if (productForHsn.length) {
            hsnUpdate(productForHsn, 'hsn', ImeiOrinvoice);
          } else {
            ImeiOrinvoice();
          }
        } else {
          ImeiOrinvoice();
        }

        function ImeiOrinvoice() {
          //Check for IMEI
          var productForImei = getEmptyIMEIProduct(index);
          if (productForImei.length) {
            imeiNoUpdate(productForImei, 'Invoice')
          } else {
            if (angular.isDefined(index)) {
              printInvoice(data, index)
            } else {
              printInvoice(data)
            }
          }
        }
      }

      function openLabelPopup($event, order, index, form) {
        form = form[index];

        if((1 + $localStorage.USER.shipment_count) > 5 && [0,3].indexOf($localStorage.USER.kyc_status) != -1 && $localStorage.USER.kyc_shipment_check){
          loaderFactory.hide();
          var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'app/views/modals/kyc_verification_popup.html',
            scope: $scope,
            size: 'md'
          });
          return;
        }

        if(order.is_incomplete){
          Notify.alert('Please fix the pending errors to proceed', {status:'danger', timeout: 3000});
          return;
        }


        if (form.$invalid) {
          $scope.show_dimension_form[index] = true;
          Notify.alert("Dimension should be greater than  or equal to 0.5 x 0.5 x 0.5 and Weight should be greater than 0.", {status: 'danger', timeout: 7000 });
          return false;
        }

        loaderFactory.display("Processing Your Request. Please Wait!");
        //cod recon handling
        AppService.get(SR_CONSTANTS.api_urls.all_pending_cod_recon, true)
          .success(function(data) {
            loaderFactory.hide();
            // $scope.isPreloader = false;
            if (data.length) {
              AppService.openCodReconModal(data);
            } else {
              checkForLabelCreation($event, order, index)
            }
          })
          .error(function(error) {
            loaderFactory.hide();
            // $scope.isPreloader = false;
            AppService.isAuth(error, 'danger');
          })
        //cod recon handling end
      }

      function checkIfInternationalActivated(awbAsigndata, labelGenerateData, order, isSingleShip) {
        AppService.get('settings/international/status', true)
          .success(function(data) {
            if (data.status == 0) {
              loaderFactory.hide();
              // $scope.isPreloader = false;
              var modalInstance = $uibModal.open({
                animation: true,
                keyboard: false,
                templateUrl: 'app/views/modals/international_shipping_deactivated.html',
                controller: 'genericModalController',
                size: 'md'
              });
            } else {
              user.international_status = 1;
              $rootScope.isInernationalActivated = true;
              showWeightDiscrepancyModal(awbAsigndata, labelGenerateData, order, isSingleShip)

            }
          })
          .error(function(error) {
            loaderFactory.hide();
            // $scope.isPreloader = false;
            AppService.isAuth(error, 'danger');
          })

      }

      function checkForLabelCreation($event, order, index) {
        loaderFactory.display("Checking Labels. Please Wait!");
        // $scope.isPreloader = true;
        //CHECK FOR BALANCE AMOUNT START
        if ($rootScope.weight == 'NA') {
          Notify.alert(SR_CONSTANTS.alert_messages.whmcs_id_not_created, {status: 'danger', timeout: 7000 });
          loaderFactory.hide();
          // $scope.isPreloader = false;
          return false;
        }
        // CHECK FOR BALANCE AMOUNT END

        var postData = {
          shipment_id: [order.shipment_id],
          courier_id: order.shipments[0].sr_courier_id
        }

        // Check for Hsn
        if (user.gstn == true) {
          loaderFactory.display("Checking HSN numbers. Please Wait!");
          var productForHsn = getEmptyHsnProduct(index);
          if (productForHsn.length) {
            hsnUpdate(productForHsn, 'hsn', ImeiOrinvoice);
            return false;
          } else {
            ImeiOrinvoice()
          }
        } else {
          ImeiOrinvoice()
        }

        function ImeiOrinvoice() {
          //Check for IMEI
          loaderFactory.display("Processing Data. Please Wait!");
          var productForImei = getEmptyIMEIProduct(index);
          if (productForImei.length) {
            imeiNoUpdate(productForImei, 'Label');
          } else {
            // Check For Descrepancy
            var data = {
              shipment_id: [order.shipment_id],
              courier_id: order.shipments[0].sr_courier_id
            }
            var preData = {
              action: 'label',
              data: data
            }
            if (order.is_international == 1) {
              checkIfInternationalActivated(postData, preData.data, order, true);
            } else {
              showWeightDiscrepancyModal(postData, preData.data, order, true);
            }
          }
        }
      }

      function printInvoice(data, index) {
        loaderFactory.display("Generating Invoice. Please Wait!");
        var url = SR_CONSTANTS.api_urls.print_invoice;
        if (angular.isDefined(index)) {
          if ($scope.processingOrder[index].is_international == 1) {
            url = "orders/international/print/invoice";
          }
        }
        ga_service.send('Orders', 'print_invoice_clicked');
        AppService.post(url, true, data)
        .success(function(data) {
          if(data.invoice_url){
            AppService.downloadDataWithUrl(data.invoice_url, 'Invoice')
          } else {
            Notify.alert(data.message, {status: 'success', timeout: 5000});
          }
          $("input:checkbox").prop("checked", false);
          disableButtons();
          checkBulkStatus();
          loaderFactory.hide();
        })
        .error(function(error) {
          loaderFactory.hide();
          AppService.isAuth(error, 'danger');
        })
      }

      function generateLabelApi(labelData) {
        loaderFactory.display("Checking HSN numbers. Please Wait!");
        if (user.gstn == true) {
          var productForHsn = getEmptyHsnProduct();
          if (productForHsn.length) {
            hsnUpdate(productForHsn, 'hsn', ImeiOrInvoice);
            return false;
          } else {
            ImeiOrInvoice();
          }
        } else {
          ImeiOrInvoice();
        }


        function ImeiOrInvoice() {
          //Check for IMEI
          loaderFactory.display("Checking If IMEI Required. Please Wait!");
          var productForImei = getEmptyIMEIProduct();
          if (productForImei.length) {
            imeiNoUpdate(productForImei, "Label");
          } else {
            var postData = {
              shipment_id: labelData.shipment_id,
              courier_id: ''
            }
            showWeightDiscrepancyModal(postData);
          }
        }
      }

      $scope.updateDetail = function($event, ShipmentId, index, form, shipment_data) {
        //intercom event
        loaderFactory.display("Checking For Errors. Please Wait!");
        AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.dimensions_edited);

        var target = angular.element($event.currentTarget);
        var data = {
          length: parseFloat(target.closest('.edit-dimension').find('.length').val(), 10),
          breadth: parseFloat(target.closest('.edit-dimension').find('.breadth').val(), 10),
          height: parseFloat(target.closest('.edit-dimension').find('.height').val(), 10),
          weight: parseFloat(target.closest('.edit-dimension').find('.weight').val(), 10),
        }

        if (isNaN(data.length) == true) {
          Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value, {status: 'danger', timeout: 7000 });
          loaderFactory.hide();
          return false;
        }
        if (isNaN(data.breadth) == true) {
          Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value, {status: 'danger', timeout: 7000 });
          loaderFactory.hide();
          return false;
        }
        if (isNaN(data.height) == true) {
          Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value, {status: 'danger', timeout: 7000 });
          loaderFactory.hide();
          return false;
        }
        if (isNaN(data.weight) == true) {
          Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value, {status: 'danger', timeout: 7000 });
          loaderFactory.hide();
          return false;
        }
        if (form.$invalid) {
          Notify.alert("Dimension should be greater than or equal to 0.5 x 0.5 x 0.5 and Weight should be greater than 0.", {status: 'danger', timeout: 7000 });
          loaderFactory.hide();
          return false;
        }
        var no_of_ones = 0;
        if ($rootScope.processingOrder[index].shipments[0].length < 0.5) {
          no_of_ones++;
        }
        if ($rootScope.processingOrder[index].shipments[0].breadth < 0.5) {
          no_of_ones++;
        }
        if ($rootScope.processingOrder[index].shipments[0].height < 0.5) {
          no_of_ones++;
        }
        if (no_of_ones >= 1) {
          Notify.alert("Dimension should be greater than or equal to 0.5 x 0.5 x 0.5.", {status: 'danger', timeout: 7000 });
          loaderFactory.hide();
          return false;
        } else {
          no_of_ones = 0;
        }

        if ($rootScope.processingOrder[index].shipments[0].weight == 0) {
          Notify.alert("Weight should be greater than 0.", {status: 'danger', timeout: 7000 });
          loaderFactory.hide();
          return false;
        }


        AppService.post(SR_CONSTANTS.api_urls.save_shipment_details + ShipmentId, true, data)
          .success(function(data) {
            processingOrderData();
            loaderFactory.hide();
            $rootScope.processingOrder[index].shipments[0].length = parseFloat(shipment_data.length, 10);
            $rootScope.processingOrder[index].shipments[0].breadth = parseFloat(shipment_data.breadth, 10);
            $rootScope.processingOrder[index].shipments[0].height = parseFloat(shipment_data.height, 10);
            $rootScope.processingOrder[index].shipments[0].weight = parseFloat(shipment_data.weight, 10);
            $rootScope.processingOrder[index].shipments[0].volumetric_weight = parseFloat(data.volumetric_weight, 10);
            $scope.show_dimension_form[index] = false;
            Notify.alert('Weight and dimension details of the order have been saved successfully',{status: 'success', timeout: 5000 })
          })
          .error(function(error) {
            loaderFactory.hide();
            AppService.isAuth(error, 'danger');
          })
      }

      var first_time_call = true;

      $scope.processingOrderData = processingOrderData

      function processingOrderData() {
        loaderFactory.display("Fetching Your Orders. Please Wait!");
        $scope.isPreloader = true
        var url = '';
        var sort = $scope.sortReverse === true ? "ASC" : "DESC";
        var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
        var filters = $location.search();
        if (angular.isDefined(filters.perPage)) {
          filters.per_page = filters.perPage;
        } else {
          filters.per_page = 15;
        }
        if(angular.isDefined($scope.sortType)){
          filters.sort = sort;
          filters.sort_by = $scope.sortType;
        }

        if ($scope.show_international_orders) {
          url = 'orders/processing/international';
        } else {
          url = 'orders/processing';
        }
        // if ($stateParams.status) {
        //     url += '&status=' + $stateParams.status;
        // }

        var orderapi = AppService.get_with_params(url, filters, true);
        orderapi
          .success(function(data) {
            delete filters.per_page;
            if (!data.data.length) {
              if ($localStorage.USER.from_shopify && !$localStorage.USER.is_onboarding_complete && !$localStorage.USER.order_fetched && first_time_call) {
                Notify.alert('<div>We are fetching your orders. In case you create your orders later, click on the sync  <div style="padding:2px;background: white;display: inline-block;"><button class="btn sync-btn pfx" style="padding: 4px 8px !important;" ng-disabled="disabled" type="button" aria-haspopup="true" aria-expanded="true" > <i class="icon-refresh"></i> </button></div>  icon on the orders screen to fetch your orders.</div>', {status: 'info', timeout: 10000 });
                first_time_call = false;
              }
              loaderFactory.hide();
              $scope.isPreloader = false;
            } else {
              var from_shopify = $localStorage.USER.from_shopify;
              $localStorage.USER.order_fetched = true;
              AppService.post('auth/login/user', false, {
                  token: $localStorage.USER.token
                })
                .success(function(data) {
                  if (data.token) {
                    $localStorage.USER = data;
                    $localStorage.USER.from_shopify = from_shopify;
                  }
                })
                .error(function(error) {
                  AppService.isAuth(error, 'danger');
                });
            }
            $rootScope.processingOrder = data.data;
            _.forEach(data.data, function(value, index) {
              var shipment = value.shipments.length == 0 ? false : value.shipments[0];
              if(shipment){
                $rootScope.processingOrder[index].shipments[0].weight = parseFloat(value.shipments[0].weight, 10);
                $rootScope.processingOrder[index].shipments[0].height = parseFloat(value.shipments[0].height, 10);
                $rootScope.processingOrder[index].shipments[0].length = parseFloat(value.shipments[0].length, 10);
                $rootScope.processingOrder[index].shipments[0].breadth = parseFloat(value.shipments[0].breadth, 10);
                if (!angular.isDefined(shipment.weight) || !angular.isDefined(shipment.height) || !angular.isDefined(shipment.length) || !angular.isDefined(shipment.breadth) || shipment.weight == "0" || shipment.height == "0" || shipment.length == "0" || shipment.breadth == "0") {
                  $scope.show_dimension_form[index] = true;
                } else {
                  $scope.show_dimension_form[index] = false;
                }
              } else {
                $rootScope.processingOrder[index].shipments[0] = {};
                $rootScope.processingOrder[index].shipments[0].weight = 0;
                $rootScope.processingOrder[index].shipments[0].height = 0;
                $rootScope.processingOrder[index].shipments[0].length = 0;
                $rootScope.processingOrder[index].shipments[0].breadth = 0;
                $scope.show_dimension_form[index] = true;
              }
            });
            $scope.metaData = data.meta.pagination;
            $scope.totalItems = $scope.metaData.total;
            $scope.showingOrderNo = {
              from: $scope.totalItems == 0 ? 0 : ($scope.page - 1) * perPage + 1,
              to: Math.min($scope.totalItems, $scope.page * perPage)
            }
            AppService.setHeight();
            $scope.isPreloader = false;
            $scope.$on('processingOrder', function(ngRepeatFinishedEvent) {
              AppService.setWidth(action, dimension, orderdate, orderid);
              loaderFactory.hide();
            });
          })
          .error(function(error) {
            delete filters.per_page;
            AppService.isAuth(error, 'danger');
            loaderFactory.hide();
            $scope.isPreloader = false;
          })
      }

      function getSelectedItems(id, isCancel) {
        var nonChannelCancelOrders = 0;
        $scope.hideCancelOnChannel = false;
        $scope.isNonChannelCancelOrder = false;
        var orderId = [];
        $("input:checkbox[name=orderId]:checked").each(function() {
          if (id === 'shipment') {
            orderId.push($(this).data('shipment'));
          } else if (id == 'index') {
            orderId.push($(this).data('index'));
          } else if (id == 'id') {
            orderId.push($(this).data('id'));
          } else {
            orderId.push($(this).val());
            if ($(this).data('baseChannelCode') == "EB" || $(this).data('baseChannelCode') == "SH") { //ebay base channel code or Shopify base channel code
              $scope.isNonChannelCancelOrder = true;
              nonChannelCancelOrders = nonChannelCancelOrders + 1;
            }
            if ($(this).data('baseChannelCode') == "CS") {
              nonChannelCancelOrders = nonChannelCancelOrders + 1;
            }
          }
        });

        if (!orderId.length) {
          return false;
        }
        if (orderId.length == nonChannelCancelOrders) {
          $scope.hideCancelOnChannel = true;
        }
        if (isCancel) {
          return orderId;
        }

        var data = {
          ids: orderId
        }

        return data;
      }

      setTimeout(function() {
        $('.generate-btn').attr('disabled', true);
      }, 2);

      $document.on("click", function() {
        $('.popover').hide();
      });
      $scope.showProductPopup = function($event, listId) {
        $event.stopPropagation();
        var targetdiv = angular.element($event.currentTarget);
        var divposition = targetdiv.parents('tr').position();

        if (Math.round(divposition.top) >= '320') {
          targetdiv.parent().next(".popover").show().removeClass('bottom').addClass('top').css({
            'top': 'auto',
            'bottom': '29px'
          });
        } else {
          targetdiv.parent().next(".popover").show().removeClass('top').addClass('bottom').css({
            'top': '78px',
            'bottom': 'auto'
          });
        }
      }

      $scope.hideProductPopup = function($event, listId) {
        var targetdiv = angular.element($event.currentTarget);
        targetdiv.parent().next(".popover").hide()
      }


      function openRechargeModal() {
        var modalInstance = $uibModal.open({
          animation: true,
          templateUrl: 'app/views/Settings/topnavrecharge.html',
          controller: 'rechargeController',
          size: 'recharge'
        }).result.catch(function() {
          $state.reload();
        });
      }

      function checkForBulkLabelCreation($event , data) {
        loaderFactory.display("Processing Your Request. Please Wait!");
        var target = angular.element($event.currentTarget);
        eventToTriggerAfterIMEI = target;
        // $scope.isPreloader = true;
        //check user weight
        if ($rootScope.weight == 'NA') {
          Notify.alert(SR_CONSTANTS.alert_messages.whmcs_id_not_created, {status: 'danger', timeout: 7000 });
          // $scope.isPreloader = false;
          loaderFactory.hide();
          return false;
        }

        if ($rootScope.weight < 100) {
          openRechargeModal();
          // $scope.isPreloader = false;
          loaderFactory.hide();
          return false;
        }

        var postData = {
          shipment_id: []
        };

        if (!data) {
          // $scope.isPreloader = false;
          loaderFactory.hide();
          return false;
        }
        var orders = [];
        var show_error = false;
        _.forEach(data.ids, function(value) {
          var object = _.find($rootScope.processingOrder, function(o) {
            return o.shipment_id == value;
          });
          if (object) {
            var shipment = object.shipments[0];
            if (!angular.isDefined(shipment.weight) || !angular.isDefined(shipment.height) || !angular.isDefined(shipment.length) || !angular.isDefined(shipment.breadth) || shipment.weight == "0" || shipment.height == "0" || shipment.length == "0" || shipment.breadth == "0") {
              show_error = true;
            }
          }
        });
        if (show_error) {
          if(!$scope.allOrdersSelected){
            Notify.alert("Weight and Dimension missing for Selected Order", {status: 'danger', timeout: 7000 });
            loaderFactory.hide();
            return false;
          } else {
            Notify.alert("Weight and Dimensions missing for some orders", {status: 'danger', timeout: 7000 });
            // loaderFactory.hide();
          }
        }
        postData.shipment_id = data.ids;
        generateLabelApi(postData);

        $('.generate-btn').attr('disabled', true);
        $('.cancel').attr('disabled', true);
        $('.ship').attr('disabled', true);
      }

      function showWeightDiscrepancyModal(awbAsigndata, labelGenerateData, order, isSingleShip) {
        loaderFactory.display("Checking Current Balance. Please Wait!");
        // var user = $localStorage.USER;
        if ($rootScope.weight < 100) {
          openRechargeModal();
          loaderFactory.hide();
          // $scope.isPreloader = false;
          return false;
        }
        loaderFactory.display("Checking Previous Weight Discrepancies. Please Wait!");
        // $scope.isPreloader = true;
        var dataTosend = {
          awbAsigndata: awbAsigndata,
          labelGenerateData: labelGenerateData,
          order: angular.copy(order),
          isCourierCompany: 'true',
          isSingleShip: isSingleShip
        }

        function showWeightDesModal() {
          var modalInstance = $uibModal.open({
            animation: true,
            backdrop: 'static',
            keyboard: false,
            templateUrl: 'weight-discrepancy.html',
            controller: 'weightDiscrepancyController',
            size: 'lg',
            resolve: {
              items: function() {
                return dataTosend;
              }
            }
          }).result.catch(function() {
            $state.reload();
          });
        };

        AppService.get(SR_CONSTANTS.api_urls.billing_discrepancy, true)
          .success(function(data) {
            if (data.data.length && !user.is_weight_dispute) {
              // $scope.isPreloader = false;
              dataTosend.data = data;
              dataTosend.order = order;
              dataTosend.isEditAvailable = false;
              loaderFactory.hide();
              if (angular.isDefined(user.is_auto_accept_notification_seen) && user.is_auto_accept_notification_seen == 0) {
                var modalInstance = $uibModal.open({
                  animation: true,
                  templateUrl: 'app/views/modals/accept_terms.html',
                  controller: 'billingAutoPopupController',
                  backdrop: 'static',
                  size: 'recharge'
                }).result.then(function() {
                  showWeightDesModal();
                });
              } else {
                showWeightDesModal();
              }
            } else if (isSingleShip) {
              loaderFactory.display("Checking Serviceability. Please Wait!");

              //open recomendation popup
              // $scope.isPreloader = true;
              var url = "";
              if (order.is_international == 1) {
                url = 'courier/international/serviceability?order_id=' + order.id;
              } else {
                url = SR_CONSTANTS.api_urls.courier_serviceability + '?pickup_postcode=' + order.pickup_code + '&order_id=' + order.id + '&delivery_postcode=' + order.delivery_code + '&weight=' + order.shipments[0].weight + '&cod=' + order.cod + '&declared_value=' + order.total
              }
              AppService.get(url, true)
                .success(function(data) {
                  if (data.status == '404') {
                    Notify.alert(data.message, {status: 'danger', timeout: 7000 });
                    loaderFactory.hide();
                    // $scope.isPreloader = false;
                    return false;
                  } else {
                    var item = {
                      "order": order,
                      "data": data.data
                    }
                    loaderFactory.hide();
                    var modalInstance = $uibModal.open({
                      animation: true,
                      templateUrl: 'selectShippingPartner.html',
                      controller: 'orderLabelController',
                      size: 'md',
                      resolve: {
                        items: function() {
                          return item
                        }
                      }
                    }).result.catch(function() {
                      $state.reload();
                    });
                  }
                })
                .error(function(error) {
                  if (error.status_code === 422) {
                    var keys = Object.keys(error.errors);
                    Notify.alert(error.errors[keys[0]][0], {status: 'danger', timeout: 7000 });
                  }
                  if (error.status_code === 400) {
                    Notify.alert(data.message, {status: 'danger', timeout: 7000 });
                  } else {
                    AppService.isAuth(error, 'danger');
                  }
                  loaderFactory.hide();
                });
            } else {
              loaderFactory.display("Assigning AWB. Please Wait!");
              var url, $data;
              if($scope.allOrdersSelected){
                url = SR_CONSTANTS.api_urls.bulk_assign_awb;
                $data = $scope.filterModels;
              } else {
                url = SR_CONSTANTS.api_urls.assign_awb;
                $data = dataTosend.awbAsigndata;
              }
              AppService.post(url, true, $data)
                .success(function(data) {
                  $('input[type=checkbox]').prop('checked', false)
                  disableButtons();
                  if($scope.allOrdersSelected){
                    $localStorage.bulk_assign_awb = 5;
                  } else {
                    $localStorage.bulk_assign_awb = 1;
                  }
                  getBulkData();
                  if ($data.courier_id != '' && $data.courier_id) {
                    if (data.awb_assign_status == 1) {
                      AppService.openAssignAwbPopup(data.response.data);
                    } else {
                      loaderFactory.hide();
                      Notify.alert(data.response.data, {status: 'success', timeout: 7000 });
                    }
                  } else {
                    loaderFactory.hide();
                    //start polling here
                    // getBulkData();
                    Notify.alert(data.message, {status: 'success', timeout: 7000 });
                  }
                })
                .error(function(data) {
                  loaderFactory.hide();
                  Notify.alert(data.message, {status: 'danger', timeout: 7000 });
                  AppService.isAuth(data, 'danger');
                })
            }

          })
          .error(function(error) {
            AppService.isAuth(error, 'danger');
            loaderFactory.hide();
          })
      }

      $scope.openModal = function() {
        $scope.items = {
          type: 'order'
        };

        var modalInstance = $uibModal.open({
          animation: true,
          backdrop: 'static',
          keyboard: false,
          templateUrl: 'importfile.html',
          controller: 'UploadController',
          size: 'sm-400',
          resolve: {
            items: function() {
              return $scope.items;
            }
          }
        });
      }

      function hsnUpdate(productForHsn, type, afterModal) {
        // $scope.isPreloader = false;
        loaderFactory.hide();
        var items = {
          "productForHsn": productForHsn,
          'type': type,
          'page': 'processingOrder'
        }

        var modalInstance = $uibModal.open({
          animation: true,
          templateUrl: 'app/views/Orders/hsnCodeUpdate.html',
          controller: 'updateHsnController',
          size: 'md',
          resolve: {
            items: function() {
              return items;
            }
          }
        }).result.then(function() {
          afterModal();
        });
      }

      function imeiNoUpdate(productForImei, type) {
        // $scope.isPreloader = false;
        loaderFactory.hide();
        var items = {
          "productForImei": productForImei,
          "event": eventToTriggerAfterIMEI,
          'type': type,
          'page': 'processingOrder'
        }

        var modalInstance = $uibModal.open({
          animation: true,
          templateUrl: 'app/views/Orders/imeiUpdate.html',
          controller: 'updateIMEIController',
          size: 'sm-400',
          resolve: {
            items: function() {
              return items;
            }
          }
        });
      }

      function getEmptyHsnProduct(index) {
        var dataToProcess = [];
        if (index >= 0) {
          if ($rootScope.processingOrder[index].status_code == 1) {
            dataToProcess.push($rootScope.processingOrder[index]);
          }
        } else {
          //Get Selected Index Data
          var indexData = getSelectedItems('index');
          var indexArry = indexData.ids;
          var length = indexArry.length;
          for (var i = 0; i < length; i++) {
            if ($rootScope.processingOrder[indexArry[i]].status_code == 1) {
              dataToProcess.push($rootScope.processingOrder[indexArry[i]])
            }
          }
        }
        var items = [];
        for (var i = 0; i < dataToProcess.length; i++) {
          var products = dataToProcess[i].products;
          var productLength = dataToProcess[i].products.length;
          for (var k = 0; k < productLength; k++) {
            if (!products[k].hsn) {
              products[k].base_channel_code = dataToProcess[i].base_channel_code;
              products[k].channel_order_id = dataToProcess[i].channel_order_id;
              products[k].order_id = dataToProcess[i].id;
              products[k].channel_name = dataToProcess[i].channel_name;
              items.push(products[k]);
            }
          }
        }
        return items;
      }

      function getEmptyIMEIProduct(index) {
        var dataToProcess = [];
        if (index >= 0) {
          dataToProcess.push($rootScope.processingOrder[index]);
        } else {
          //Get Selected Index Data
          var indexData = getSelectedItems('index');
          var indexArry = indexData.ids;
          var length = indexArry.length;
          for (var i = 0; i < length; i++) {
            dataToProcess.push($rootScope.processingOrder[indexArry[i]])
          }
        }
        var items = [];
        for (var i = 0; i < dataToProcess.length; i++) {
          var products = dataToProcess[i].products;
          var productLength = dataToProcess[i].products.length;
          for (var k = 0; k < productLength; k++) {
            if (products[k].custom_field == 'imei' && products[k].custom_field_value == '') {
              products[k].base_channel_code = dataToProcess[i].base_channel_code;
              products[k].channel_order_id = dataToProcess[i].channel_order_id;
              products[k].order_id = dataToProcess[i].id;
              products[k].channel_name = dataToProcess[i].channel_name;
              items.push(products[k]);
            }
          }
        }
        return items;
      }

      function upgrade_for_international() {
        // $scope.isPreloader = true;
        loaderFactory.display("Checking Serviceability. Please Wait!");

        AppService.get("courier/international/serviceability?check_pickup=" + true, true)
          .success(function(data) {
            loaderFactory.hide();
            // $scope.isPreloader = false;
            $scope.loading = false;
            if (data.is_serviceable) {
              $state.go('app.user_plandetails')
            } else if (data.status == "404") {
              Notify.alert(data.message, {status: 'danger', timeout: 7000 });
            } else {
              var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'app/views/modals/non-servicable-pincode.html',
                controller: 'genericModalController',
                size: 'md',
                backdrop: 'static'
              })
            }
          })
          .error(function(error) {
            // $scope.isPreloader = false;
            loaderFactory.hide();
            AppService.isAuth(error, 'danger');
          });
      };

      function getInternationalOrDomesticOrders() {
        $("th").remove();
        $scope.show_international_orders ? $state.go('app.processing') : $state.go('app.processing_international');
      }


      function updateOrderPickupLocation(pickup_location, orderid) {
        var orderids = '';
        if (orderid == null) {
          var indexData = getSelectedItems('id');
          orderids = indexData.ids;
        } else {
          orderids = [orderid];
        }
        var data = {
          'order_id': orderids,
          'pickup_location': pickup_location
        }
        var modalInstance = $uibModal.open({
  				animation: true,
  				templateUrl: 'app/views/modals/updateOrderPickupConfirmation.html',
          controller: 'updatePickupConfirmationController',
  				size: 'sm',
  				backdrop  : 'static',
          resolve: {
            items: function() {
              return data;
            }
          }
  			})
        .closed.then(function(){
          $scope.allOrdersSelected = false;
          $('#checkall-checkbox input')[0].checked = false;
          $('input[type=checkbox]').prop('checked', $('#checkall-checkbox input')[0].checked)
          $scope.selectall = false;
          disableButtons();
        });
      }
      processingOrderData();
    }
  }
})();

/**=========================================================
 * Module: returnOrdersController

  const RETURN_REQUESTED     = 21;
  const RETURN_INITIATED     = 22;
  const RETURN_PICKUP_QUEUED   = 23;
  const RETURN_PICKUP_ERROR   = 24;
  const RETURN_IN_TRANSIT     = 25;
  const RETURN_DELIVERED     = 26;
  const RETURN_CANCELLED     = 27;
  const RETURN_PICKUP_GENERATED = 28;
  const RETURN_CANCELLATION_REQUESTED = 29;
  const RETURN_PICKUP_CANCELLED = 30;
  const RETURN_PICKUP_RESCHEDULED =31;
  const RETURN_PICKEDUP      =32;
  =========================================================*/

;(function(angular){
    'use strict';
    angular
    .module('app.orders')
    .controller('returnOrdersController', ReturnOrdersController);

    ReturnOrdersController.$inject = ['$document','$rootScope', '$location', '$scope', 'AppService',  '$state', 'Notify', '$stateParams', '$uibModal', '$localStorage', 'SR_CONSTANTS', 'loaderFactory', 'ga_service', '$timeout'];

    function ReturnOrdersController($document, $rootScope, $location, $scope, AppService, $state, Notify, $stateParams, $uibModal, $localStorage, SR_CONSTANTS, loaderFactory, ga_service, $timeout){
      var user = $localStorage.USER;
      if(user){
  			activate(user);
      }

      function activate(user) {
        $scope.returnStatuses = [
          {
            display_value: 'All Statuses',
            value: ''
          },
          {
            display_value: 'Return Pending',
            value: 21
          },
          {
            display_value: 'Return Initiated',
            value: 22
          },
          // {
          //   display_value: 'Return Pickup Queued',
          //   value: 23
          // },
          {
            display_value: 'Return Pickup Generated',
            value: 28
          },
          {
            display_value: 'Return Picked Up',
            value: 32
          },
          {
            display_value: 'Return Pickup Error',
            value: 24
          },
          {
            display_value: 'Return In Transit',
            value: 25
          },
          {
            display_value: 'Retun Delivered',
            value: 26
          },
          {
            display_value: 'Return Cancelled',
            value: 27
          },
          {
            display_value: 'Return Pickup Rescheduled',
            value: 31
          }
          // {
          //   display_value: 'Return Cancellation Request',
          //   value: 29
          // },
          // {
          //   display_value: 'Return Pickup Cancelled',
          //   value: 30
          // },
        ]

        var currentFilters = $location.search();
        $scope.filterModels = {
          to: angular.isDefined(currentFilters.to) ? currentFilters.to : "",
          from: angular.isDefined(currentFilters.from) ? currentFilters.from : "",
          search: angular.isDefined(currentFilters.search) ? currentFilters.search : "",
          order_status: angular.isDefined(currentFilters.order_status) ? currentFilters.order_status : ""
        }

        $scope.isFreePlan = false;
        $scope.isPreloader = false;
        $scope.show_dimension_form = [];
        $rootScope.isRestrictFreePlan = false;
        $rootScope.isBasicPlan = user.is_basic_plan;
        $scope.order_status = $scope.returnStatuses[0];
        $scope.searchText = $stateParams.search;
        $rootScope.show_channel_sync_button = user.show_channel_page;
        if (user.is_free_plan) {
          $scope.isFreePlan = true;
          $rootScope.isRestrictFreePlan = true;
        }

        if($stateParams.order_status){
          $scope.order_status = $scope.returnStatuses.filter(function(x){
            return x.value == $stateParams.order_status;
          })[0];
        }

        var date = new Date();
        $scope.currentDate = date;
        if(!$rootScope.DateFilter){
            $rootScope.DateFilter = {
                'from': '',
                'to': ''
            }
        }
        var eventToTriggerAfterIMEI = '';
        var action = {
          className: 'action',
          width: $('.action').outerWidth(),
          tableClass: 'return-order-table'
        }
        var orderamount = {
          className: 'orderamount',
          width: $('.orderamount').outerWidth(),
        }
        var ordershippingdetails = {
          className: 'ordershippingdetails',
          width: $('.ordershippingdetails').outerWidth(),
        }

        $scope.maxSize = 2;
        $scope.totalItems = 10000000;
        $scope.page = $stateParams.page;
        $scope.itemsPerPage = [
          {value: '15',id: 0},
          {value: '30',id: 1},
          {value: '60',id: 2},
          {value: '100',id: 3}
        ];

        if ($stateParams.perPage == 30) {
          $scope.selectedItems = 1;
        } else if ($stateParams.perPage == 60) {
          $scope.selectedItems = 2;
        } else if ($stateParams.perPage == 100) {
          $scope.selectedItems = 3;
        } else {
          $scope.selectedItems = 0;
        }

        $scope.updateOrderPickupLocation = updateOrderPickupLocation;
        $scope.returnOrdersData = returnOrdersData;
        $scope.cancelOrderModal = cancelOrderModal;
        $scope.showProductPopup = showProductPopup;
        $scope.hideProductPopup = hideProductPopup;
        $scope.printBulkInvoice = printBulkInvoice
        $scope.openLabelPopup = openLabelPopup;
        $scope.filterByStatus = filterByStatus;
        $scope.disableButtons = disableButtons;
        $scope.requestPickup = requestPickup;
        $scope.updateDetail = updateDetail;
        $scope.printInvoice = printInvoice;
        $scope.updateState = updateState;
        $scope.printLabel = printLabel;
        $scope.sortTable = sortTable;
        $scope.searchBy = searchBy;

        setTimeout(function() {
         $('.print').attr('disabled', true);
        }, 2);

        function openLabelPopup($event, order, index, form) {
          loaderFactory.display("Processing Your Request. Please Wait!");
          form = form[index];

          if (form.$invalid) {
            $scope.show_dimension_form[index] = true;
            Notify.alert("Dimension should be greater than  or equal to 0.5 x 0.5 x 0.5 and Weight should be greater than 0.", {status: 'danger', timeout: 7000 });
            loaderFactory.hide();
            return false;
          }

          //cod recon handling
          AppService.get(SR_CONSTANTS.api_urls.all_pending_cod_recon, true)
            .success(function(data) {
              loaderFactory.hide();
              if (data.length) {
                AppService.openCodReconModal(data);
              } else {
                checkForLabelCreation($event, order, index)
              }
            })
            .error(function(error) {
              loaderFactory.hide();
              AppService.isAuth(error, 'danger');
            })
        }

        function requestPickup (shipmentId) {
          loaderFactory.display("Processing Your Request. Please Wait!");
          // $scope.isPreloader = true;
          var shipment_data = {};
          shipment_data.shipment_id = [shipmentId]

          var d = new Date();
          var time = d.getHours();
          if(time >= 13){
            Notify.alert('Courier pick-up generated after 1 pm may not get picked up on same day',{ timeout: '5000'});
          }
          AppService.post('courier/generate/pickup', true, shipment_data)
          .success(function(data){
            if(angular.isDefined(data.response.data.dhl_handover_id)){
              Notify.alert("The Pickup Label and Handover Note for DHL would be sent to your registered email id after 15 minutes.", { timeout: '5000'})
            }
            Notify.alert(data.response.data, {status: 'success', timeout: 7000 })
            loaderFactory.hide();
            $timeout(function(){
              returnOrdersData();
            }, 2);
          })
          .error(function(error){
            loaderFactory.hide();
            AppService.isAuth(error);
          })
        }

        function printBulkInvoice($event) {
          //intercom event
          AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.bulk_invoice_button_clicked);
          ga_service.send('Orders', 'bulk_invoice_clicked');

          var target = angular.element($event.currentTarget);
          eventToTriggerAfterIMEI = target;
          loaderFactory.display("Processing Your Print Request. Please Wait!");

          // $scope.isPreloader = true;
          var data = getSelectedItems('orderId');
          if (!data) {
            loaderFactory.hide();
            // $scope.isPreloader = false;
            return false;
          }
          // Check for HSN
          if (user.gstn == true) {
            var productForHsn = getEmptyHsnProduct();
            if (productForHsn.length) {
              hsnUpdate(productForHsn, 'hsn', ImeiOrinvoice);
              return false;
            } else {
              ImeiOrinvoice();
            }
          } else {
            ImeiOrinvoice();
          }

          function ImeiOrinvoice() {
            //Check for IMEI
            var productForImei = getEmptyIMEIProduct();
            if (productForImei.length) {
              imeiNoUpdate(productForImei, 'Invoice');
            } else {
              printInvoice(data);
            }
          }
        }

        function checkForLabelCreation($event, order, index) {
          loaderFactory.display("Checking Labels. Please Wait!");
          // $scope.isPreloader = true;
          //CHECK FOR BALANCE AMOUNT START
          if ($rootScope.weight == 'NA') {
            Notify.alert(SR_CONSTANTS.alert_messages.whmcs_id_not_created, {status: 'danger', timeout: 7000 });
            loaderFactory.hide();
            // $scope.isPreloader = false;
            return false;
          }
          // CHECK FOR BALANCE AMOUNT END

          var postData = {
            shipment_id: [order.shipment_id],
            courier_id: order.shipments[0].sr_courier_id
          }

          // Check for Hsn
          if (user.gstn == true) {
            loaderFactory.display("Checking HSN numbers. Please Wait!");
            var productForHsn = getEmptyHsnProduct(index);
            if (productForHsn.length) {
              hsnUpdate(productForHsn, 'hsn', ImeiOrinvoice);
              return false;
            } else {
              ImeiOrinvoice()
            }
          } else {
            ImeiOrinvoice()
          }

          function ImeiOrinvoice() {
            //Check for IMEI
            loaderFactory.display("Processing Data. Please Wait!");
            var productForImei = getEmptyIMEIProduct(index);
            if (productForImei.length) {
              imeiNoUpdate(productForImei, 'Label');
            } else {
              // Check For Descrepancy
              var data = {
                shipment_id: [order.shipment_id],
                courier_id: order.shipments[0].sr_courier_id
              }
              var preData = {
                action: 'label',
                data: data
              }
              showWeightDiscrepancyModal(postData, preData.data, order, true);
            }
          }
        }

        function getEmptyHsnProduct(index) {
          var dataToProcess = [];
          if (index >= 0) {
            if ($scope.returnOrders[index].status_code == 1) {
              dataToProcess.push($scope.returnOrders[index]);
            }
          } else {
            //Get Selected Index Data
            var indexData = getSelectedItems('index');
            var indexArry = indexData.ids;
            var length = indexArry.length;
            for (var i = 0; i < length; i++) {
              if ($scope.returnOrders[indexArry[i]].status_code == 1) {
                dataToProcess.push($scope.returnOrders[indexArry[i]])
              }
            }
          }
          var items = [];
          for (var i = 0; i < dataToProcess.length; i++) {
            var products = dataToProcess[i].products;
            var productLength = dataToProcess[i].products.length;
            for (var k = 0; k < productLength; k++) {
              if (!products[k].hsn) {
                products[k].base_channel_code = dataToProcess[i].base_channel_code;
                products[k].channel_order_id = dataToProcess[i].channel_order_id;
                products[k].order_id = dataToProcess[i].id;
                products[k].channel_name = dataToProcess[i].channel_name;
                items.push(products[k]);
              }
            }
          }
          return items;
        }

        function imeiNoUpdate(productForImei, type) {
          // $scope.isPreloader = false;
          loaderFactory.hide();
          var items = {
            "productForImei": productForImei,
            "event": eventToTriggerAfterIMEI,
            'type': type,
            'page': 'returnOrders'
          }

          var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'app/views/Orders/imeiUpdate.html',
            controller: 'updateIMEIController',
            size: 'sm-400',
            resolve: {
              items: function() {
                return items;
              }
            }
          });
        }

        function getSelectedItems(id, isCancel) {
          var nonChannelCancelOrders = 0;
          $scope.hideCancelOnChannel = false;
          $scope.isNonChannelCancelOrder = false;
          var orderId = [];
          $("input:checkbox[name=orderId]:checked").each(function() {
            if (id === 'shipment') {
              orderId.push($(this).data('shipment'));
            } else if (id == 'index') {
              orderId.push($(this).data('index'));
            } else if (id == 'id') {
              orderId.push($(this).data('id'));
            } else {
              orderId.push($(this).val());
              if ($(this).data('baseChannelCode') == "EB" || $(this).data('baseChannelCode') == "SH") { //ebay base channel code or Shopify base channel code
                $scope.isNonChannelCancelOrder = true;
                nonChannelCancelOrders = nonChannelCancelOrders + 1;
              }
              if ($(this).data('baseChannelCode') == "CS") {
                nonChannelCancelOrders = nonChannelCancelOrders + 1;
              }
            }
          });

          if (!orderId.length) {
            return false;
          }
          if (orderId.length == nonChannelCancelOrders) {
            $scope.hideCancelOnChannel = true;
          }
          if (isCancel) {
            return orderId;
          }

          var data = {
            ids: orderId
          }

          return data;
        }

        function printInvoice(data, index) {
          loaderFactory.display("Generating Invoice. Please Wait!");
          var url = SR_CONSTANTS.api_urls.print_invoice;
          if (angular.isDefined(index)) {
            if ($scope.returnOrders[index].is_international == 1) {
              url = "orders/international/print/invoice";
            }
          }
          ga_service.send('Orders', 'print_invoice_clicked');
          AppService.post(url, true, data)
            .success(function(data) {
              loaderFactory.hide();
              // $scope.isPreloader = false;
              if(data.invoice_url){
                AppService.downloadDataWithUrl(data.invoice_url, 'Invoice')
              } else {
                Notify.alert(data.message, {status: 'success', timeout: 5000});
              }
              $("input:checkbox").prop("checked", false);
            })
            .error(function(error) {
              loaderFactory.hide();
              // $scope.isPreloader = false;
              AppService.isAuth(error);
            })
        }

        function updateOrderPickupLocation(pickup_location, orderid) {
          loaderFactory.display("Updating Pickup location. Please Wait!");
          var orderids = '';
          if (orderid == null) {
            var indexData = getSelectedItems('id');
            orderids = indexData.ids;
          } else {
            orderids = [orderid];
          }
          var data = {
            'order_id': orderids,
            'pickup_location': pickup_location
          }
          AppService.patch("orders/address/pickup", true, data)
            .success(function(data) {
              $state.reload();
              loaderFactory.hide();
            })
            .error(function(error) {
              loaderFactory.hide();
              AppService.isAuth(error, 'danger');
            });
        }

        function getEmptyIMEIProduct(index) {
          var dataToProcess = [];
          if (index >= 0) {
            dataToProcess.push($scope.returnOrders[index]);
          } else {
            //Get Selected Index Data
            var indexData = getSelectedItems('index');
            var indexArry = indexData.ids;
            var length = indexArry.length;
            for (var i = 0; i < length; i++) {
              dataToProcess.push($scope.returnOrders[indexArry[i]])
            }
          }
          var items = [];
          for (var i = 0; i < dataToProcess.length; i++) {
            var products = dataToProcess[i].products;
            var productLength = dataToProcess[i].products.length;
            for (var k = 0; k < productLength; k++) {
              if (products[k].custom_field == 'imei' && products[k].custom_field_value == '') {
                products[k].base_channel_code = dataToProcess[i].base_channel_code;
                products[k].channel_order_id = dataToProcess[i].channel_order_id;
                products[k].order_id = dataToProcess[i].id;
                products[k].channel_name = dataToProcess[i].channel_name;
                items.push(products[k]);
              }
            }
          }
          return items;
        }

        function showWeightDiscrepancyModal(awbAsigndata, labelGenerateData, order, isSingleShip) {
          loaderFactory.display("Checking Current Balance. Please Wait!");
          if ($rootScope.weight < 100) {
            loaderFactory.hide();
            openRechargeModal();
            loaderFactory.hide();
            return false;
          }
          loaderFactory.display("Checking Previous Weight Discrepancies. Please Wait!");
          // $scope.isPreloader = true;
          var dataTosend = {
            awbAsigndata: awbAsigndata,
            labelGenerateData: labelGenerateData,
            order: angular.copy(order),
            isCourierCompany: 'true',
            isSingleShip: isSingleShip
          }
          AppService.get(SR_CONSTANTS.api_urls.billing_discrepancy, true)
            .success(function(data) {
              loaderFactory.hide();

              function showWeightDesModal() {
                var modalInstance = $uibModal.open({
                  animation: true,
                  backdrop: 'static',
                  keyboard: false,
                  templateUrl: 'weight-discrepancy.html',
                  controller: 'weightDiscrepancyController',
                  size: 'lg',
                  resolve: {
                    items: function() {
                      return dataTosend;
                    }
                  }
                }).result.catch(function() {
                  $state.reload();
                });
              };
              if (data.data.length && !user.is_weight_dispute) {
                // $scope.isPreloader = false;
                dataTosend.data = data;
                dataTosend.order = order;
                dataTosend.isEditAvailable = false;
                if (angular.isDefined(user.is_auto_accept_notification_seen) && user.is_auto_accept_notification_seen == 0) {
                  var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/modals/accept_terms.html',
                    controller: 'billingAutoPopupController',
                    backdrop: 'static',
                    size: 'recharge'
                  }).result.then(function() {
                    showWeightDesModal();
                  });
                } else {
                  showWeightDesModal();
                }

              } else if (isSingleShip) {
                loaderFactory.display("Checking Serviceability. Please Wait!");
                //open recomendation popup
                var url = SR_CONSTANTS.api_urls.courier_serviceability + '?pickup_postcode=' + order.pickup_code + '&order_id=' + order.id + '&delivery_postcode=' + order.delivery_code + '&weight=' + order.shipments[0].weight + '&cod=0&is_return=1&declared_value=' + order.total;
                AppService.get(url, true)
                  .success(function(data) {
                    if (data.status == '404') {
                      Notify.alert(data.message, {status: 'danger', timeout: 7000 });
                      loaderFactory.hide();
                      return false;
                    } else {
                      var item = {
                        "order": order,
                        "data": data.data,
                        "is_return": 1
                      }
                      var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: 'orderlabel.html',
                        controller: 'orderLabelController',
                        size: 'md',
                        resolve: {
                          items: function() {
                            return item
                          }
                        }
                      }).result.catch(function() {
                        $state.reload();
                      });

                    }
                    loaderFactory.hide();
                  })
                  .error(function(error) {
                    if (error.status_code === 422) {
                      var keys = Object.keys(error.errors);
                      Notify.alert(error.errors[keys[0]][0], {status: 'danger', timeout: 7000 });
                    }
                    if (error.status_code === 400) {
                      loaderFactory.hide();
                      // $scope.isPreloader = false;
                      Notify.alert(data.message, {status: 'danger', timeout: 7000 });
                    } else {
                      AppService.isAuth(error, 'danger');
                    }
                    loaderFactory.hide();
                    // $scope.isPreloader = false;
                  });

              } else {
                loaderFactory.display("Assigning AWB. Please Wait!");
                var url = SR_CONSTANTS.api_urls.assign_awb;
                var $data = dataTosend.awbAsigndata;
                $data.is_return = 1;
                AppService.post(url, true, $data)
                  .success(function(res) {
                    if ($data.courier_id != '' && $data.courier_id) {
                      if (res.awb_assign_status == 1) {
                        var data = res.response.data;
                        data.is_return = 1;
                        AppService.openAssignAwbPopup(data);
                        // labelApiCall(dataTosend.labelGenerateData);
                      } else {
                        loaderFactory.hide();
                        Notify.alert(data, {status: 'success', timeout: 7000 });
                      }
                    } else {
                      loaderFactory.hide();
                      Notify.alert(res.message, {status: 'success', timeout: 7000 });
                    }
                  })
                  .error(function(error) {
                    loaderFactory.hide();
                    AppService.isAuth(error, 'danger');
                  })
              }

            })
            .error(function(error) {
              AppService.isAuth(error, 'danger');
              loaderFactory.hide();
            })
        }

        function disableButtons () {
          setTimeout(function() {
              var selectedOrders = getSelectedItems('shipment', true);
              if(selectedOrders.length >= 1){
                  $('.print').attr('disabled', false);
              }else{
                  $('.print').attr('disabled', true);
              }
          }, 2);
        }

        function printLabel (shipmentId, isSingle) {
          ga_service.send('Orders', 'print_label_clicked');
          var data = {};
          if(isSingle){
            data.shipment_id = [shipmentId];
          } else {
            var shipmentIds = getSelectedItems('shipment', true);
            data.shipment_id = shipmentIds;
          }
          labelApiCall(data)
        }

        function labelApiCall(data) {
          loaderFactory.display("Generating Label. Please Wait!");
          AppService.post(SR_CONSTANTS.api_urls.generate_label, true, data)
            .success(function(data) {
              // $scope.isPreloader = false;
              if (data.name) {
                AppService.downloadPdf(data.data, data.name);
              }
              if (data.label_url) {
                AppService.downloadDataWithUrl(data.label_url, 'label')
              }
              if(data.label_created == 0){
                Notify.alert(data.response, {status: 'danger', timeout: 7000 });
              } else {
                Notify.alert(data.response, {status: 'success', timeout: 7000 });
              }
              loaderFactory.hide();
              $("input:checkbox").prop("checked", false);
            })
            .error(function(error) {
              loaderFactory.hide();
              AppService.isAuth(error, 'danger');
            })
        }

        function openRechargeModal() {
          var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'app/views/Settings/topnavrecharge.html',
            controller: 'rechargeController',
            size: 'recharge'
          }).result.catch(function() {
            $state.reload();
          });
        }

        function searchBy ($event) {
          if($event.keyCode == 13){
            updateState();
          }
        }

        function filterByStatus (status) {
          $scope.order_status = {
            value: status.value,
            display_value: status.display_value
          };
          updateState();
        }

        $scope.sortType = 'base_channel_code';
        $scope.sortReverse = false;

        function sortTable(type) {
          $scope.sortType = type;
          $scope.sortReverse = !$scope.sortReverse;
          returnOrdersData();
        }

        var first_time_call = true;

        function updateDetail ($event, ShipmentId, index, form, shipment_data) {
          //intercom event
          loaderFactory.display("Checking For Errors. Please Wait!");
          AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.dimensions_edited);

          var target = angular.element($event.currentTarget);
          var data = {
            length: parseFloat(target.closest('.edit-dimension').find('.length').val(), 10),
            breadth: parseFloat(target.closest('.edit-dimension').find('.breadth').val(), 10),
            height: parseFloat(target.closest('.edit-dimension').find('.height').val(), 10),
            weight: parseFloat(target.closest('.edit-dimension').find('.weight').val(), 10),
          }

          if (isNaN(data.length) == true) {
            Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value, {status: 'danger', timeout: 7000 });
            loaderFactory.hide();
            return false;
          }
          if (isNaN(data.breadth) == true) {
            Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value, {status: 'danger', timeout: 7000 });
            loaderFactory.hide();
            return false;
          }
          if (isNaN(data.height) == true) {
            Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value, {status: 'danger', timeout: 7000 });
            loaderFactory.hide();
            return false;
          }
          if (isNaN(data.weight) == true) {
            Notify.alert(SR_CONSTANTS.alert_messages.enter_numerical_value, {status: 'danger', timeout: 7000 });
            loaderFactory.hide();
            return false;
          }
          if (form.$invalid) {
            Notify.alert("Dimension should be greater than or equal to 0.5 x 0.5 x 0.5 and Weight should be greater than 0.", {status: 'danger', timeout: 7000 });
            loaderFactory.hide();
            return false;
          }
          var no_of_ones = 0;
          if ($scope.returnOrders[index].shipments[0].length < 0.5) {
            no_of_ones++;
          }
          if ($scope.returnOrders[index].shipments[0].breadth < 0.5) {
            no_of_ones++;
          }
          if ($scope.returnOrders[index].shipments[0].height < 0.5) {
            no_of_ones++;
          }
          if (no_of_ones >= 1) {
            Notify.alert("Dimension should be greater than or equal to 0.5 x 0.5 x 0.5.", {status: 'danger', timeout: 7000 });
            loaderFactory.hide();
            return false;
          } else {
            no_of_ones = 0;
          }

          if ($scope.returnOrders[index].shipments[0].weight == 0) {
            Notify.alert("Weight should be greater than 0.", {status: 'danger', timeout: 7000 });
            loaderFactory.hide();
            return false;
          }


          AppService.post(SR_CONSTANTS.api_urls.save_shipment_details + ShipmentId, true, data)
            .success(function(data) {
              loaderFactory.hide();
              $scope.returnOrders[index].shipments[0].length = parseFloat(shipment_data.length, 10);
              $scope.returnOrders[index].shipments[0].breadth = parseFloat(shipment_data.breadth, 10);
              $scope.returnOrders[index].shipments[0].height = parseFloat(shipment_data.height, 10);
              $scope.returnOrders[index].shipments[0].weight = parseFloat(shipment_data.weight, 10);
              $scope.returnOrders[index].shipments[0].volumetric_weight = parseFloat(data.volumetric_weight, 10);
              $scope.show_dimension_form[index] = false;
              Notify.alert('Weight and dimension details of the order have been saved successfully', {status: 'success', timeout: 7000 })
            })
            .error(function(error) {
              loaderFactory.hide();
              AppService.isAuth(error, 'danger');
            })
        }

        function cancelOrderModal(orderId) {

          var data = {
            orderIds: {
              ids: [orderId]
            },
          };
          if (!data) {
            return false;
          }
          var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'orderCancel.html',
            controller: 'orderCancelController',
            size: 'sm',
            resolve: {
              items: function() {
                return data;
              }
            }
          });
        }

        function showProductPopup($event, listId) {
          $event.stopPropagation();
          var targetdiv = angular.element($event.currentTarget);
          var divposition = targetdiv.parents('tr').position();

          if (Math.round(divposition.top) >= '320') {
            targetdiv.parent().next(".popover").show().removeClass('bottom').addClass('top').css({
              'top': 'auto',
              'bottom': '29px'
            });
          } else {
            targetdiv.parent().next(".popover").show().removeClass('top').addClass('bottom').css({
              'top': '78px',
              'bottom': 'auto'
            });
          }
        }

        function hideProductPopup($event, listId) {
          var targetdiv = angular.element($event.currentTarget);
          targetdiv.parent().next(".popover").hide()
        }

        function returnOrdersData() {
          $scope.isPreloader = true;
          loaderFactory.display("Fetching Your Orders. Please Wait!");
          // $scope.isPreloader = true;
          var url = SR_CONSTANTS.api_urls.get_return_orders;
          var sort = $scope.sortReverse === true ? "ASC" : "DESC";
          var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
          var filters = $location.search();
          if (angular.isDefined(filters.perPage)) {
            filters.per_page = filters.perPage;
          } else {
            filters.per_page = 15;
          }

          $scope.order_status = $scope.returnStatuses.filter(function(x){
            return x.value == $stateParams.order_status;
          })[0];

          var returnsapi = AppService.get_with_params(url, filters, true);
          returnsapi
          .success(function(data) {
            delete filters.per_page;
            if(!data.data.length){
              loaderFactory.hide();
              $scope.isPreloader = false;
            }
            $scope.returnOrders = data.data;
            _.forEach(data.data, function(value, index) {
              var shipment = value.shipments.length == 0 ? false : value.shipments[0];
              if(shipment){
                $scope.returnOrders[index].shipments[0].weight = parseFloat(value.shipments[0].weight, 10);
                $scope.returnOrders[index].shipments[0].height = parseFloat(value.shipments[0].height, 10);
                $scope.returnOrders[index].shipments[0].length = parseFloat(value.shipments[0].length, 10);
                $scope.returnOrders[index].shipments[0].breadth = parseFloat(value.shipments[0].breadth, 10);
                if (!angular.isDefined(shipment.weight) || !angular.isDefined(shipment.height) || !angular.isDefined(shipment.length) || !angular.isDefined(shipment.breadth) || shipment.weight == "0" || shipment.height == "0" || shipment.length == "0" || shipment.breadth == "0") {
                  $scope.show_dimension_form[index] = true;
                } else {
                  $scope.show_dimension_form[index] = false;
                }
              } else {
                $scope.returnOrders[index].shipments[0] = {};
                $scope.returnOrders[index].shipments[0].weight = 0;
                $scope.returnOrders[index].shipments[0].height = 0;
                $scope.returnOrders[index].shipments[0].length = 0;
                $scope.returnOrders[index].shipments[0].breadth = 0;
                $scope.show_dimension_form[index] = true;
              }
            });
            $scope.metaData = data.meta.pagination;
            $scope.totalItems = $scope.metaData.total;
            $scope.showingOrderNo = {
              from: $scope.totalItems == 0 ? 0 : ($scope.page - 1) * perPage + 1,
              to: Math.min($scope.totalItems, $scope.page * perPage)
            }
            AppService.setHeight();
            $scope.$on('returnOrders', function(ngRepeatFinishedEvent) {
              AppService.setWidth(action, orderamount, ordershippingdetails);
              loaderFactory.hide();
              $scope.isPreloader = false;
            });
          })
          .error(function(error) {
            delete filters.per_page;
            AppService.isAuth(error, 'danger');
            loaderFactory.hide();
            $scope.isPreloader = false;
          })
        }

        function updateState(){
          $state.go('.', {
            page: $scope.page,
            perPage: $scope.itemsPerPage[$scope.selectedItems].value,
            order_status: $scope.order_status.value,
            search: $scope.searchText,
            from: $stateParams.from,
            to: $stateParams.to
          }, {
            notify: false,
            reload: false
          });
          $timeout(function(){
            returnOrdersData();
          }, 2);
        }

        //new date picker JS

        var start = $stateParams.from ? moment($stateParams.from , 'YYYY-MMM-DD'): moment().subtract(3, 'month');
        var end = $stateParams.to ? moment($stateParams.to , 'YYYY-MMM-DD'): moment();
        var lock = 0;
        var counter = 0;

        $('#reportrange').daterangepicker({
            startDate: start,
            endDate: end,
            ranges: {
               'All': [moment(user.created_at.date), moment()],
               'Today': [moment(), moment()],
               'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
               'Last 7 Days': [moment().subtract(6, 'days'), moment()],
               'Last 30 Days': [moment().subtract(29, 'days'), moment()],
               'This Month': [moment().startOf('month'), moment().endOf('month')],
               'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            }
        }, cb);

        cb(start, end);
        function cb(start, end){
            if(!counter && start){
                $rootScope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
                $rootScope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
            }
            returnOrdersData();

            if($stateParams.from){
                $('#reportrange span').html($stateParams.from + ' - ' + $stateParams.to);
            }
            else{
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
            }

             if(counter){
                 var s1=start;
                 var e1=end;
                 supx(s1, e1);
             }
            counter++;
            if($scope.finala && lock){
                start = $scope.finala;
                end = $scope.finalb;
            }
        }

        function supx(a, b){
          a = a.format('YYYY-MMM-DD');
          b = b.format('YYYY-MMM-DD');
          $state.go('.', {
            page: $scope.page,
            perPage: $scope.itemsPerPage[$scope.selectedItems].value,
            order_status:$scope.order_status.value,
            search:$scope.searchText,
            from: a,
            to: b
          },{
            notify: false,
            reload: false
          });
          $timeout(function(){
            returnOrdersData();
          }, 2);

          start = a;
          end = b;
          $scope.finala = a;
          $scope.finalb = b;
          lock = 1;
        }

        $document.on("click", function() {
          $('.popover').hide();
        });
      }
  }
})(angular);

/**=========================================================
 * Module: rtoOrdersController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('rtoOrdersController', ['$document', '$rootScope', '$scope', '$http', 'AppService', 'ga_service', '$state', 'Notify', '$uibModal', '$stateParams', '$localStorage', function ($document, $rootScope, $scope, $http, AppService, ga_service, $state, Notify, $uibModal, $stateParams, $localStorage)
        {
            var user = $localStorage.USER;
            if(user){
              activate(user);
            }

            function activate(user){
                $('th').children().removeClass('checkbox');
                var orderid =
                {
                    className : 'orderid',
                    width: $('.orderid').outerWidth(),
                    tableClass: 'rto-acknowledge-wrapper'
                }
                var dimension = {
                    className : 'dimension',
                    width: $('.dimension').outerWidth(),
                }
                var status = {
                    className : 'status',
                    width: $('.status').outerWidth(),
                }

                $scope.maxSize = 2;
                $scope.totalItems = 10000000;
                $scope.page = $stateParams.page;

                var date = new Date();

                $scope.currentDate = date;
                if(!$rootScope.DateFilter){
                    $rootScope.DateFilter =
                    {
                        'from': '',
                        'to': ''
                    }
                }

                $scope.itemsPerPage =
                [{value:15, id:0},
                {value:30, id:1},
                {value:60, id:2},
                {value:100, id:3}
                ];

                if($stateParams.perPage == 30){
                    $scope.selectedItems = 1;
                }
                else if($stateParams.perPage == 60){
                    $scope.selectedItems = 2;
                }
                else if($stateParams.perPage == 100){
                    $scope.selectedItems = 3;
                }
                else{
                    $scope.selectedItems = 0;
                }

                var datatosend = '';
                var rto_data = '';

                switch ($state.current.name) {
                  case 'app.rtoInitiated':
                  orderid.tableClass = 'rto-initialize-wrapper';
                  datatosend = { 'rto_initiated':[1], 'rto_delivered':[0], 'rto_acknowledged':[0] };
                  rto_data = 'rto_initiated_click';
                  break;

                  case 'app.rtoAcknowledged':
                  orderid.tableClass = 'rto-acknowledge-wrapper';
                  datatosend = { 'rto_initiated':[0], 'rto_delivered':[0], 'rto_acknowledged':[1] };
                  rto_data = 'rto_acknowledged_click';
                  break;

                  case 'app.rtoDelivered':
                  orderid.tableClass = 'rto-delivered-wrapper';
                  datatosend = { 'rto_initiated':[0], 'rto_delivered':[1], 'rto_acknowledged':[0] };
                  rto_data = 'rto_delivered_click';
                  break;
                }

                $scope.searchBy = searchBy;
                $scope.sortTable = sortTable;
                $scope.updateState = updateState;
                $scope.updateAcknowledged = updateAcknowledged;

                $scope.searchText = $stateParams.search;
                $scope.sortType = 'awb_code';
                $scope.sortReverse  = false;
                $scope.date_from = $stateParams.date_from;
                $scope.date_to = $stateParams.date_to;

                $scope.startDate =
                {
                    from: ''
                };

                function sortTable(type){
                    $scope.sortType = type;
                    $scope.sortReverse = !$scope.sortReverse;
                    getRtoOrderData();
                }

                function getRtoOrderData(){
                    $scope.isPreloader = true;
                    var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                    var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                    var start = $stateParams.date_from ? moment($stateParams.date_from , 'YYYY-MMM-DD'): moment(user.created_at.date);
                    var end = $stateParams.date_to ? moment($stateParams.date_to , 'YYYY-MMM-DD'): moment();

                    if($scope.startDate.from){
                        var fromdate = $scope.startDate.from,
                        from = fromdate.getFullYear() + '-' + ('0' + (fromdate.getMonth() + 1)).slice(-2) + '-' + ('0' + fromdate.getDate()).slice(-2);
                    }

                    ga_service.send('Tracking', rto_data);
                    AppService.post('shipments/rto/details?page='+ $scope.page +'&per_page='+ perPage + '&search='+ $scope.searchText + '&from='+ start.format('YYYY-MMM-DD') + '&to='+ end.format('YYYY-MMM-DD'), true, datatosend)
                    .success(function(data){
                        if(!data.data.length){
                            $scope.isPreloader = false;
                        }
                        $scope.rtoOrder = data.data;
                        $scope.metaData = data.meta.pagination
                        $scope.totalItems = $scope.metaData.total;
                        $scope.showingOrderNo =
                        {
                            from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                            to: Math.min($scope.totalItems, $scope.page*perPage)
                        }
                        AppService.setHeight();
                        $scope.$on('rtoOrder', function(ngRepeatFinishedEvent){
                            if ($state.current.name == 'app.rtoInitiated'){
                                AppService.setWidth(orderid, dimension);
                            }
                            else{
                                AppService.setWidth(orderid, dimension, status);
                            }
                            $scope.isPreloader = false;
                        });
                    })
                    .error(function(error){
                        AppService.isAuth(error);
                        $scope.isPreloader = false;
                    })
                }


                function updateAcknowledged(awb_code){
                    $scope.isPreloader = true;
                    if(!awb_code){
                        $scope.isPreloader = false;
                        return false;
                    }

                    var data = {
                        'awb_code' : [awb_code],
                    };

                    ga_service.send('RTO', 'rto_acknowledged_click');
                    AppService.post('shipments/rto/acknowledged', true, data)
                    .success(function(data){
                        $scope.isPreloader = false;
                        getRtoOrderData();
                    })
                    .error(function(error){
                        $scope.isPreloader = false;
                        AppService.isAuth(error);
                    })
                }

                function searchBy ($event) {
                  if($event.keyCode == 13){
                    updateState();
                  }
                }

                var start = $stateParams.date_from ? moment($stateParams.date_from , 'YYYY-MMM-DD'): moment().subtract(1, 'month');
                var end = $stateParams.date_to ? moment($stateParams.date_to , 'YYYY-MMM-DD'): moment();

                var lock = 0;
                var counter = 0;

                $('#reportrange').daterangepicker({
                    startDate: start,
                    endDate: end,
                    ranges: {
                       'All': [moment(user.created_at.date), moment()],
                       'Today': [moment(), moment()],
                       'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                       'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                       'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                       'This Month': [moment().startOf('month'), moment().endOf('month')],
                       'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    }
                }, cb);

                cb(start, end);
                function cb(start, end){
                    getRtoOrderData();
                    if(!counter && start){
                        $rootScope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
                        $rootScope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
                    }

                    if($stateParams.date_from){
                        $('#reportrange span').html($stateParams.date_from + ' - ' + $stateParams.date_to);
                    }
                    else{
                        $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
                    }

                     if(counter){
                         var s1=start;
                         var e1=end;
                         supx(s1, e1);
                     }
                    counter++;
                    if($scope.finala && lock){
                        start = $scope.finala;
                        end = $scope.finalb;
                    }
                }

                function supx(a, b){
                    a = a.format('YYYY-MMM-DD');
                    b = b.format('YYYY-MMM-DD');
                    $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value, search:$scope.searchText, date_from: a, date_to: b},{notify:false,reload:false});
                    getRtoOrderData();
                    start = a;
                    end = b;
                    $scope.finala = a;
                    $scope.finalb = b;
                    lock = 1;
                }

                function updateState(){
                  $state.go('.', {
                    page: $scope.page,
                    perPage: $scope.itemsPerPage[$scope.selectedItems].value,
                    search:$scope.searchText,
                    date_from: $stateParams.date_from,
                    date_to: $stateParams.date_to
                  },{
                    notify:false,
                    reload:false
                  });
                  getRtoOrderData()
                }
            }
        }])
})();

(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('sucessMessageController', sucessMessageController);
    sucessMessageController.$inject = ['$rootScope', '$scope', 'AppService',  '$state', 'Notify', '$stateParams', 'items', '$uibModalInstance'];
    function sucessMessageController($rootScope, $scope, AppService, $state, Notify, $stateParams, items, $uibModalInstance)
    {
        activate();
        function activate()
        {   
           // $scope.isPreloader = false;
            $scope.sucessMessage = items.message;
            $scope.heading = items.heading;

            $scope.closeCancelOrderModal = function(){
                $uibModalInstance.dismiss('cancel');
            }
        }
    }
})();
/**=========================================================
 * Module: unprocessableOrdersController
  =========================================================*/
(function() {
    'use strict';
    angular
        .module('app.orders')
        .controller('unprocessableOrdersController', unprocessableOrdersController);
    unprocessableOrdersController.$inject = ['$document', '$rootScope', '$scope', '$http', 'AppService', '$state', 'Notify', '$uibModal', '$stateParams', '$localStorage', 'SR_CONSTANTS', '$location'];

    function unprocessableOrdersController($document, $rootScope, $scope, $http, AppService, $state, Notify, $uibModal, $stateParams, $localStorage, SR_CONSTANTS, $location) {
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }

        function activate(user) {
            var currentFilters = $location.search();
            $scope.filterModels = {
                to: angular.isDefined(currentFilters.to) ? currentFilters.to : "",
                from: angular.isDefined(currentFilters.from) ? currentFilters.from : "",
                search: angular.isDefined(currentFilters.search) ? currentFilters.search : "",
                channel_id: angular.isDefined(currentFilters.channel_id) ? currentFilters.channel_id : "",
                order_status: angular.isDefined(currentFilters.order_status) ? currentFilters.order_status : "",
                payment_method: angular.isDefined(currentFilters.payment_method) ? currentFilters.payment_method : ""
            }


            AppService.get('orders/unprocessableordersfilters', true)
            .success(function(data) {
                $scope.channel_filter_data = data.channels;
                $scope.statuses_filter_data = data.statuses;
                $scope.paymentTypes_filter_data = data.paymentTypes;
            })
            .error(function(error) {
                $scope.isPreloader = false;
                AppService.isAuth(error);
            })

            if (user && (user.is_free_plan || user.is_basic_plan)) {
                $state.go('app.processing');
                return false;
            }

            var action = {
                className: 'action',
                width: $('.action').outerWidth(),
                tableClass: 'unprocessing-order-wrapper'
            };
            var orderdate = {
                className: 'orderdate',
                width: $('.orderdate').outerWidth()
            };
            var orderid = {
                className: 'orderid',
                width: $('.orderid').outerWidth()
            };

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.itemsPerPage = [
              { value: '15', id: 0 },
              { value: '30', id: 1 },
              { value: '60', id: 2 },
              { value: '100', id: 3 }
            ];

            if ($stateParams.per_page == 30) {
                $scope.selectedItems = 1;
            } else if ($stateParams.per_page == 60) {
                $scope.selectedItems = 2;
            } else if ($stateParams.per_page == 100) {
                $scope.selectedItems = 3;
            } else {
                $scope.selectedItems = 0;
            }

            //intercom event
            AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.unProcessable_page_clicked);

            $scope.paginatedData = function() {
                $('th').remove();
                var currentFilters = $location.search();
                currentFilters.per_page = $scope.itemsPerPage[$scope.selectedItems].value;
                currentFilters.page = $scope.page;
                $location.search(currentFilters);
            }

            $scope.sortType = 'base_channel_code';
            $scope.sortReverse = false;

            $scope.changePerPage = function() {
                $('th').remove();
                var currentFilters = $location.search();
                currentFilters.per_page = $scope.itemsPerPage[$scope.selectedItems].value;
                currentFilters.page = $scope.page;
                $location.search(currentFilters);
            }

            $scope.sortTable = function(type) {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                $scope.getUnprocessableOrderData();
            }

            $scope.getUnprocessableOrder = function() {
                $scope.getUnprocessableOrderData();
            }

            $scope.getUnprocessableOrderData = function() {
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC" : "DESC";
                var per_page = $scope.itemsPerPage[$scope.selectedItems].value;
                var filters = $location.search();
                var url = SR_CONSTANTS.api_urls.unprocessable_orders;
                // if ($stateParams.status) {
                //     url += '&status=' + $stateParams.status;
                // }
                AppService.get_with_params(url, filters, true)
                    .success(function(data) {
                        if (!data.data.length) {
                            $scope.isPreloader = false;
                        }
                        $scope.unprocessableOrder = data.data;
                        $scope.metaData = data.meta.pagination;
                        $scope.totalItems = $scope.metaData.total;
                        $scope.showingOrderNo = {
                            from: $scope.totalItems == 0 ? 0 : ($scope.page - 1) * per_page + 1,
                            to: Math.min($scope.totalItems, $scope.page * per_page)
                        };
                        AppService.setHeight();
                        $scope.$on('unprocessableOrder', function(ngRepeatFinishedEvent) {
                            AppService.setWidth(action, orderdate);
                            $scope.isPreloader = false;
                        });
                    })
                    .error(function(error) {
                        AppService.isAuth(error);
                        $scope.isPreloader = false;
                    })
            }
            $scope.getUnprocessableOrderData();


            $scope.bulkMapping = function(isSingle, order) {
                if (isSingle) {
                    var items = [];
                    var length = order.products.length;
                    var products = order.products;
                    for (var k = 0; k < length; k++) {
                        if (products[k].status_code == "4") {
                            products[k].base_channel_code = order.base_channel_code;
                            products[k].channel_order_id = order.channel_order_id;
                            products[k].order_id = order.id;
                            products[k].channel_name = order.channel_name;
                            items.push(products[k]);
                        }
                    }
                } else if (!isSingle) {
                    var items = getDataByStatus("4");
                }
                if (!items.length && !isSingle) {
                    return false;
                }

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'bulkmapping.html',
                    controller: 'orderMappingController',
                    size: 'lg',
                    resolve: {
                        items: function() {
                            return items;
                        }
                    }
                });
            }

            $scope.bulkFullFill = function(isSingle, order) {
                if (isSingle) {
                    var items = [];
                    var length = order.products.length;
                    var products = order.products;
                    for (var k = 0; k < length; k++) {
                        if (products[k].status_code == "3" || products[k].status_code == "8") {
                            products[k].base_channel_code = order.base_channel_code;
                            products[k].channel_order_id = order.channel_order_id;
                            products[k].order_id = order.id;
                            products[k].channel_name = order.channel_name;
                            items.push(products[k]);
                        }
                    }
                } else if (!isSingle) {
                    var items = getDataByStatus("3");
                }
                if (!items.length && !isSingle) {
                    return false;
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'bulkfullfill.html',
                    controller: 'orderFulfillableController',
                    size: 'lg',
                    resolve: {
                        items: function() {
                            return items;
                        }
                    }
                });
            }

            $scope.cancelOrderModal = function() {
                $scope.hideCancelOnChannel = false;
                $scope.isNonChannelCancelOrder = false;

                var nonChannelCancelOrders = 0;
                var orderId = [];
                var orderIds = [];
                $("input:checkbox.order-checkbox").each(function() {
                    orderId.push(this.checked ? $(this).val() : "");
                    if (this.checked) {
                        if ($(this).data('baseChannelCode') == "EB" || $(this).data('baseChannelCode') == "SH") { //ebay base channel code or Shopify base channel code
                            $scope.isNonChannelCancelOrder = true;
                            nonChannelCancelOrders = nonChannelCancelOrders + 1;
                        }
                        if ($(this).data('baseChannelCode') == "CS") {
                            nonChannelCancelOrders = nonChannelCancelOrders + 1;
                        }
                    }


                });
                var length = orderId.length;

                for (var i = 0; i < length; i++) {
                    if (orderId[i] != '') {
                        orderIds.push(orderId[i]);
                    }
                }
                if (orderIds.length == nonChannelCancelOrders) {
                    $scope.hideCancelOnChannel = true;
                }
                if (!orderIds.length) {
                    return false;
                }

                var data = {
                    orderIds: {
                        ids: orderIds
                    },
                    isNonChannelCancelOrder: $scope.isNonChannelCancelOrder,
                    hideCancelOnChannel: $scope.hideCancelOnChannel
                };

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'cancelOrder.html',
                    controller: 'orderCancelController',
                    size: 'sm',
                    resolve: {
                        items: function() {
                            return data;
                        }
                    }
                });
            }


            $scope.hideMoreProduct = function($event, product) {
                if (product.length < 2) {
                    var target = angular.element($event.currentTarget);
                    target.find('.popover').css('display', 'none');
                }
            }

            function getDataByStatus(status, isCancel) {
                var checkedVals = [];
                $("tbody input:checkbox[name=orderId]:checked").each(function() {
                    checkedVals.push($(this).val());
                });
                if (isCancel) {
                    return checkedVals;
                }
                var items = [];
                for (var i = 0; i < $scope.unprocessableOrder.length; i++) {
                    for (var j = 0; j < checkedVals.length; j++) {
                        if (checkedVals[j] && $scope.unprocessableOrder[i].id == checkedVals[j]) {
                            var products = $scope.unprocessableOrder[i].products;
                            for (var k = 0; k < products.length; k++) {
                                if (products[k].status_code == status) {
                                    products[k].base_channel_code = $scope.unprocessableOrder[i].base_channel_code;
                                    products[k].channel_order_id = $scope.unprocessableOrder[i].channel_order_id;
                                    products[k].order_id = $scope.unprocessableOrder[i].id;
                                    products[k].channel_name = $scope.unprocessableOrder[i].channel_name;
                                    items.push(products[k]);
                                }
                            }
                        }
                    }
                }

                if (status == '4') {
                    for (var i = 0; i < items.length; i++) {
                        for (var j = 0; j < items.length; j++) {
                            if (items[j].base_channel_code === items[i].base_channel_code && items[j].channel_sku === items[i].channel_sku && i != j) {
                                items.splice(i, 1);
                                break;
                            }

                        }
                    }
                }
                return items;

            }

            $scope.disableButtons = function() {

                setTimeout(function() {
                    var orderslength = getDataByStatus("", true);
                    if (orderslength.length >= '1') {
                        $('.cancel').attr('disabled', false);
                    } else {
                        $('.cancel').attr('disabled', true);
                    }

                    var unmapped = getDataByStatus("4");
                    if (unmapped.length >= '1') {
                        $('.bulkmapping').attr('disabled', false);
                    } else {
                        $('.bulkmapping').attr('disabled', true);
                    }

                    var unfulfil = getDataByStatus("3");
                    if (unfulfil.length >= '1') {
                        $('.bulkFullFill').attr('disabled', false);
                    } else {
                        $('.bulkFullFill').attr('disabled', true);
                    }
                }, 2);
            }
            $scope.showProductPopup = function($event, listId) {
                $event.stopPropagation();
                var targetdiv = angular.element($event.currentTarget);
                var divposition = targetdiv.parents('tr').position();
                if (Math.round(divposition.top) >= '320') {
                    targetdiv.parent().next(".popover").show().removeClass('bottom').addClass('top').css({ 'top': 'auto', 'bottom': '29px' });
                } else {
                    targetdiv.parent().next(".popover").show().removeClass('top').addClass('bottom').css({ 'top': '78px', 'bottom': 'auto' });
                }
            }

            $document.on("click", function() {

                $('.popover').hide();
            });
            $scope.hideProductPopup = function($event, listId) {
                var targetdiv = angular.element($event.currentTarget);
                targetdiv.parent().next(".popover").hide()
            }

            $scope.swipeAmount = 0;
            $scope.swipeDiv = {
                "left": $scope.swipeAmount
            }
            $scope.swipeLeft = function() {
                // $scope.swipeAmount = $scope.swipeAmout +(20);

            }
            $scope.swipeRight = function() {
                //$scope.swipeAmout -- 20

            }
        }
    }
})();

/**=========================================================
 * Module: updateIMEIController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('updateHsnController', updateHsnController);
    updateHsnController.$inject = [ '$stateParams','$rootScope', '$scope', 'AppService' , '$state', 'Notify', '$uibModalInstance', 'items', 'SR_CONSTANTS'];
    function updateHsnController( $stateParams, $rootScope, $scope, AppService ,$state, Notify, $uibModalInstance, items, SR_CONSTANTS)
    {
        $scope.products = _.uniqBy(items.productForHsn, 'sku');
        $scope.type = items.type;
        $scope.page = items.page;
        activate();
        function activate()
        {
            if(!items.productForHsn.length){
                $uibModalInstance.close('done');
            }
            $scope.saveHsnCode = function()
            {   
                $('.validation-alert').remove();
                var isEmptyHsn = false;
                $scope.isPreloader = true;
                var data = [];
                for (var i = 0; i < $scope.products.length; i++) 
                {   
                    if(!$scope.products[i].hsn )
                    {   
                        isEmptyHsn = true;
                        var html =  '<div class="help-block validation-alert">Field is required </div>'
                        $('.hsn'+ i).after(html);
                    }
                    // var hsnValue = $('.hsn'+ i).val();
                }
               
                if(isEmptyHsn)
                {
                    return false;
                }else{

                    var hsnProducts = angular.copy($scope.products);
                    var hsndata = {};
                    _.forEach(hsnProducts, function(value) {
                        hsndata[value.sku] = value.hsn;
                    });
                    _.forEach(items.productForHsn, function(value) {
                        var productObj = {
                            "hsn": hsndata[value.sku],
                            "id": value.id
                        };
                        data.push(productObj);
                    });
                }
                var postData = 
                {
                    data: data
                }

                AppService.post(SR_CONSTANTS.api_urls.update_product_hsn, true, postData)
                .success(function(data)
                {
                    $uibModalInstance.close('done');
                })
                .error(function(error) 
                {   
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
             }


            //JIRA MD-408 1st point
            $uibModalInstance.result.finally(function(){
                $('.generate-btn').attr('disabled', false);
                $('.cancel').attr('disabled', false);
            });

            $scope.SkipHsn = function()
            {
                $uibModalInstance.close('SkipHsn');
            }

            $scope.cancel = function()
            {
                $uibModalInstance.dismiss('cancel');
            };
   
        }
    }
})();
/**=========================================================
 * Module: updateIMEIController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('updateIMEIController', updateIMEIController);
    updateIMEIController.$inject = [ '$stateParams','$rootScope', '$scope', 'AppService' , '$state', 'Notify', '$uibModalInstance', 'items', 'SR_CONSTANTS'];
    function updateIMEIController( $stateParams, $rootScope, $scope, AppService ,$state, Notify, $uibModalInstance, items, SR_CONSTANTS)
    {   
        var products = items.productForImei;
        var extendedProductByQuantity = [];
        var customValueArry = [];
        for(var i = 0; i < products.length; i++) 
        {   
            var productQuantityLength = products[i].quantity;
            for (var j = 0; j < productQuantityLength; j++) 
            {   
                extendedProductByQuantity.push(angular.copy(products[i]));
                customValueArry.push(angular.copy(products[i].custom_field_value[j]));
            }
        }

        for (var i = 0; i < extendedProductByQuantity.length; i++) 
        {
            
            extendedProductByQuantity[i].custom_imei_value = customValueArry[i];
        }

        $scope.products = extendedProductByQuantity;
        $scope.type = items.type;
        $scope.page = items.page;
        activate();
        function activate()
        {               
            $scope.saveIMEI = function()
            {   
                $('.validation-alert').remove();
                var isEmptyIMEI = false;
                $scope.isPreloader = true;
                var data = [];
                var inputIMES = [];
                for (var i = 0; i < $scope.products.length; i++) 
                {   
                    if(!$('.imei'+ i).val().trim() )
                    {   
                        isEmptyIMEI = true;
                        var html =  '<div class="help-block validation-alert">Field is required </div>'
                        $('.imei'+ i).after(html);
                    }
                    var imeiValue = $('.imei'+ i).val();
                    var imeiObj = 
                    {
                        imei: imeiValue,
                        sku: $scope.products[i].sku
                    }

                    inputIMES.push(imeiObj);
                    var productObj = 
                    {
                        // "sku": $scope.products[i].sku,
                        "imei": imeiValue,
                        "order_product_id": $scope.products[i].id
                    }   
                    data.push(productObj); 
                }
               
                if(isEmptyIMEI)
                {
                    return false;
                }
                var postData = 
                {
                    data: data
                }

                AppService.patch(SR_CONSTANTS.api_urls.update_product_imei, true, postData)
                .success(function(data)
                {    
                    //SET IMEI VALUES TO PROCESSING ORDER DATA
                    var dataToProcess = $rootScope.processingOrder;
                    for( var i = 0; i < dataToProcess.length; i++ )
                    {
                        var  products =  dataToProcess[i].products;
                        for( var k =0; k< products.length; k++ )
                        {
                            if(products[k].custom_field == 'imei' && products[k].custom_field_value == '')
                            {   
                                for (var j = 0; j < inputIMES.length; j++) 
                                {
                                    if(products[k].sku == inputIMES[j].sku)
                                    {
                                        $rootScope.processingOrder[i].products[k].custom_field_value = inputIMES[j].imei;
                                    }
                                }
                            }
                        }
                    }
                    $uibModalInstance.dismiss('cancel');
                    setTimeout(function () 
                    {
                        items.event.trigger('click');
                    }, 0);
                })
                .error(function(error) 
                {   
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
             }

            $scope.saveIMEIProduct = function()
            {
                $('.validation-alert').remove();
                var isEmptyIMEI = false;
                $scope.isPreloader = true;
                var data = [];
                for (var i = 0; i < $scope.products.length; i++) 
                {   
                    if(!$('.imei'+ i).val().trim())
                    {   
                        isEmptyIMEI = true;
                       var html =  '<div class="help-block validation-alert">Field is required </div>'
                        $('.imei'+ i).after(html);
                    }
                    var imeiValue = $('.imei'+ i).val();
                    var productObj = 
                    {
                        "imei": imeiValue,
                        "order_product_id": $scope.products[i].id
                    }   
                    data.push(productObj); 
                }
               
                if(isEmptyIMEI)
                {
                    return false;
                }
                var postData = 
                {
                    data: data
                }

                AppService.patch(SR_CONSTANTS.api_urls.update_product_imei, true, postData)
                .success(function(data)
                {    
                    $uibModalInstance.dismiss('cancel');
                    $state.go($state.current, {}, {reload: true});
                })
                .error(function(error) 
                {   
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

            //JIRA MD-408 1st point
            $uibModalInstance.result.finally(function(){
                $('.generate-btn').attr('disabled', false);
                $('.cancel').attr('disabled', false);
            });

            $scope.cancel = function()
            {
                $uibModalInstance.dismiss('cancel');
            }

            
   
        }
    }
})();
/**=========================================================
 * Module: UpdateReattemptController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('updateReattemptController', updateReattemptController);
    updateReattemptController.$inject = [ '$stateParams','$rootScope', '$window', '$scope', 'AppService' , '$state', 'Notify', '$uibModalInstance', 'items', 'loaderFactory','$timeout' ];
    function updateReattemptController( $stateParams, $rootScope, $window, $scope, AppService ,$state, Notify, $uibModalInstance, items, loaderFactory,timeout)
    {   
        activate();

        function activate() {       
           
            $scope.reattempt_details = {};
            $scope.reattempt_details.date = new Date();
            $scope.reattempt_details.shipment_id = null;
            $scope.reattempt_details.action_by   = 1;

            $scope.options = {
                                //customClass: getDayClass,
                                minDate: new Date(),
                                showWeeks: true,
                                maxDate: new Date(),
                              };

            if(items.ndr_last_date)  {

                $scope.options.maxDate = new Date(items.ndr_last_date);
            }

            $scope.getUser = getUserDetails;
    

            $scope.getUser();

            $scope.cancel = function() {  
                $uibModalInstance.dismiss('cancel');
            }

            $scope.updateData = function(url) {

                console.log('updateData...');
                console.log($scope.reattempt_details);

                $scope.reattempt_details.shipment_id = items.shipment_id;
                $scope.reattempt_details.action_by   = 1;
                
                $scope.isPreloader = true ;

               // loaderFactory.display("Data is  Saving !");

                AppService.post(url , true, $scope.reattempt_details)
                .success(function(data) {

                    $scope.isPreloader = false;
                    
                    if(data.status == true) {
                        //loaderFactory.hide();
                        $uibModalInstance.dismiss('cancel');
                        Notify.alert("Data Saved successfully !");
                        $state.reload();
                    } else {
                        Notify.alert("Something went wrong !");
                    }
                    


                }).error(function(error){
                    $scope.isPreloader = false;

                    if(error.status_code === 422) {

                        console.log(error);

                        AppService.alertValidation(error.errors, true);
                        Notify.alert(error.errors.message);

                        /*if(error.errors.hasOwnProperty('preferred_date')) {
                            if($scope.seller_info.others == undefined) {
                                setErrorToProduct( "The other category name is required." , 'others');
                            }
                        }*/
                    } else {
                        AppService.isAuth(error);
                    }

                    //loaderFactory.hide();
                });
            }


            function getUserDetails() {
                
                //var request = {'order_id':items.order_id};
                var url = "shipments/ndr/customer/address/"+items.order_id;

                $scope.isPreloader = true;

                AppService.get(url)
                .success(function(data) {

                    $scope.isPreloader = false;
                    // loaderFactory.hide();
                    console.log(data);

                    if(data.order != undefined) {
                        //Object.keys
                        $scope.reattempt_details.address1 = data.order.customer_address;
                        $scope.reattempt_details.address2 = data.order.customer_address_2;
                        $scope.reattempt_details.phone = Number(data.order.customer_phone);

                    }
                    

                    /*customer_address: "test address"
                    customer_address_2: "test"
                    customer_city: "Gurgaon"
                    customer_country: "India"
                    customer_name: "Thirtieth october"
                    customer_phone: "8657410075"
                    customer_pincode: "122003"
                    customer_state: "Haryana"*/


                }).error(function(error){

                    $scope.isPreloader = false;
                    AppService.isAuth(error);

                    /*if(error.status_code === 422) {

                        AppService.alertValidation(error.errors, true);
                        Notify.alert("Please correct below given errors !");

                        if(error.errors.hasOwnProperty('product_type')) {
                            if($scope.seller_info.others == undefined) {
                                setErrorToProduct( "The other category name is required." , 'others');
                            }
                        }
                    } else {
                    }

                    loaderFactory.hide();*/
                });
            }


      }
    }
})();
/**=========================================================
 * Module: UpdateReattemptController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('updateReattemptController', updateReattemptController);
    updateReattemptController.$inject = [ '$stateParams','$rootScope', '$window', '$scope', 'AppService' , '$state', 'Notify', '$uibModalInstance', 'items', 'loaderFactory','$timeout' ];
    function updateReattemptController( $stateParams, $rootScope, $window, $scope, AppService ,$state, Notify, $uibModalInstance, items, loaderFactory,timeout)
    {   
        activate();

        function activate() {       
           
            $scope.reattempt_details = {};
            $scope.reattempt_details.date = new Date();
            $scope.reattempt_details.shipment_id = null;
            $scope.reattempt_details.action_by   = 1;

            $scope.options = {
                                //customClass: getDayClass,
                                minDate: new Date(),
                                showWeeks: true,
                                maxDate: new Date(),
                              };

            if(items.ndr_last_date != undefined )  {

                $scope.options.maxDate = new Date(items.ndr_last_date);
            }

            $scope.getUser = getUserDetails;
    

            $scope.getUser();

            $scope.cancel = function() {  
                $uibModalInstance.dismiss('cancel');
            }

            $scope.updateData = function(url) {

                console.log('updateData...');
                console.log($scope.reattempt_details);

                $scope.reattempt_details.shipment_id = items.shipment_id;
                $scope.reattempt_details.action_by   = 1;
                
                $scope.isPreloader = true ;

               // loaderFactory.display("Data is  Saving !");

                AppService.post(url , true, $scope.reattempt_details)
                .success(function(data) {

                    $scope.isPreloader = false;
                    
                    if(data.status == true) {
                        //loaderFactory.hide();
                        $uibModalInstance.dismiss('cancel');
                        Notify.alert("Data Saved successfully !");
                        $state.reload();
                    } else {
                        Notify.alert("Something went wrong !");
                    }
                    


                }).error(function(error){
                    $scope.isPreloader = false;

                    if(error.status_code === 422) {

                        console.log(error);

                        AppService.alertValidation(error.errors, true);
                        Notify.alert(error.errors.message);

                        /*if(error.errors.hasOwnProperty('preferred_date')) {
                            if($scope.seller_info.others == undefined) {
                                setErrorToProduct( "The other category name is required." , 'others');
                            }
                        }*/
                    } else {
                        AppService.isAuth(error);
                    }

                    //loaderFactory.hide();
                });
            }


            function getUserDetails() {
                
                //var request = {'order_id':items.order_id};
                var url = "shipments/ndr/customer/address/"+items.order_id;

                $scope.isPreloader = true;

                AppService.get(url)
                .success(function(data) {

                    $scope.isPreloader = false;
                    //loaderFactory.hide();
                    console.log(data);

                    if(data.order != undefined) {
                        //Object.keys
                        $scope.reattempt_details.address1 = data.order.customer_address;
                        $scope.reattempt_details.address2 = data.order.customer_address_2;
                        $scope.reattempt_details.phone = Number(data.order.customer_phone);

                    }
                    

                    /*customer_address: "test address"
                    customer_address_2: "test"
                    customer_city: "Gurgaon"
                    customer_country: "India"
                    customer_name: "Thirtieth october"
                    customer_phone: "8657410075"
                    customer_pincode: "122003"
                    customer_state: "Haryana"*/


                }).error(function(error){

                    /*if(error.status_code === 422) {

                        AppService.alertValidation(error.errors, true);
                        Notify.alert("Please correct below given errors !");

                        if(error.errors.hasOwnProperty('product_type')) {
                            if($scope.seller_info.others == undefined) {
                                setErrorToProduct( "The other category name is required." , 'others');
                            }
                        }
                    } else {
                        AppService.isAuth(error);
                    }

                    loaderFactory.hide();*/
                });
            }


      }
    }
})();
/**=========================================================
 * Module: weightDiscrepancyController
  =========================================================*/
(function()
{
    'use strict';
    angular
        .module('app.orders')
        .controller('weightDiscrepancyController', weightDiscrepancyController);
    weightDiscrepancyController.$inject = [ '$stateParams','$rootScope', '$scope', 'AppService' , '$state', 'Notify', '$uibModalInstance', 'items', '$uibModal', 'SR_CONSTANTS', '$localStorage'];
    function weightDiscrepancyController( $stateParams, $rootScope, $scope, AppService ,$state, Notify, $uibModalInstance, items, $uibModal, SR_CONSTANTS, $localStorage)
    {
        $scope.descrepancy = items.data;
        $scope.descrepancyAwb = $scope.descrepancy.data.map(function(value, index){
            return value.awb_code;
        });

        var chargedWeight = 0;
        var applied_weight = 0;
        var length = $scope.descrepancy.data.length;
        var data = $scope.descrepancy.data;
        for (var i = 0; i < length ; i++)
        {
            chargedWeight +=   parseFloat(data[i].charged_weight);
            applied_weight +=   parseFloat(data[i].applied_weight);
        }

        var is_free_plan = $localStorage.USER.is_free_plan;
        $scope.close_available = is_free_plan?($scope.descrepancy.data.length < 5 && chargedWeight-applied_weight < 2):($scope.descrepancy.data.length < 5 && chargedWeight-applied_weight < 5);


        function showSelectShippingPartnerModal(){
            if(!items.isEditAvailable){
                items.order.shipments[0].weight = parseFloat(items.order.shipments[0].weight);
                items.order.shipments = items.order.shipments[0];
            }
            $scope.isPreloader = true;

            var order = items.order;
            var url = '';
            if(order.is_international == 1){
                url = 'courier/international/serviceability?order_id=' + order.id;
            }else {
                url = SR_CONSTANTS.api_urls.courier_serviceability + '?pickup_postcode=' + order.pickup_code + '&order_id=' + order.id + '&delivery_postcode=' + order.delivery_code + '&weight=' + order.shipments.weight + '&cod=' + order.cod + '&declared_value=' + order.total
            }
            AppService.get(url, true)
                .success(function (data) {
                    if (data.status == '404') {
                        Notify.alert(data.message);
                        $scope.isPreloader = false;
                        return false;
                    } else if (!data.data.available_courier_companies.length) {
                        Notify.alert(SR_CONSTANTS.alert_messages.courier_company_not_available);
                        return false;
                    } else {
                        if (items.isCourierCompany == 'true') {
                            var item = {
                                "order": items.order,
                                "data": data.data,
                                "isEditWeight": true
                            };
                            var modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: items.isEditAvailable?'orderlabel.html' :'selectShippingPartner.html',
                                controller: 'orderLabelController',
                                size: 'md',
                                resolve: {
                                    items: function () {
                                        return item
                                    }
                                }
                            });
                        }
                        else if (items.isCourierCompany == 'reasign' && items.isEditAvailable) {
                            var courier_companies = data.data;
                            $scope.isPreloader = true;
                            var postData = {
                                'shipment_id': items.order.shipments.id
                            };
                            AppService.post(SR_CONSTANTS.api_urls.get_single_reassign_data, true, postData)
                                .success(function (data) {
                                    var asignedValue = data.data;
                                    asignedValue.courier_list = asignedValue.courier_options.available_courier_companies.map(courierWithPrice);
                                    if (asignedValue.dimensions == null) {
                                        asignedValue.length = 10;
                                        asignedValue.breadth = 10;
                                        asignedValue.height = 10;
                                    } else {
                                        asignedValue.length = asignedValue.dimensions.L;
                                        asignedValue.breadth = asignedValue.dimensions.B;
                                        asignedValue.height = asignedValue.dimensions.H;
                                    }
                                    var data = {
                                        order: items.order,
                                        isCourierCompany: items.isCourierCompany,
                                        asignedValue: asignedValue,
                                        data: data.data.courier_options,
                                        isEditWeight: true
                                    };
                                    var modalInstance = $uibModal.open({
                                        animation: true,
                                        templateUrl: 'orderlabel.html',
                                        controller: 'orderLabelController',
                                        size: 'md',
                                        resolve: {
                                            items: function () {
                                                return data
                                            }
                                        }
                                    });
                                })
                                .error(function (error) {
                                    $scope.isPreloader = false;
                                    AppService.isAuth(error);
                                });
                        }
                    }
                    $scope.isPreloader = false;
                })
                .error(function (error) {
                    if (error.status_code === 422) {
                        var keys = Object.keys(error.errors);
                        Notify.alert(error.errors[keys[0]][0]);
                    }
                    else {
                        AppService.isAuth(error);
                    }
                    $scope.isPreloader = false;
                });
        }

        $scope.deductWeight = function()
        {
            var data = {"awb_code": $scope.descrepancyAwb}
            $scope.isPreloader = true;
            AppService.post('weightdispute/accept', true, data)
            .success(function(data)
            {
                if(angular.isDefined(items.fromBillingPage) && items.fromBillingPage){
                    $uibModalInstance.close('done');
                }else{
                    $uibModalInstance.dismiss('cancel');
                    items.isSingleShip? showSelectShippingPartnerModal(): asignAndGenerateLabel();
                }
            })
            .error(function(error)
            {
                $uibModalInstance.dismiss('cancel');
                $scope.isPreloader = false;
                AppService.isAuth(error);
            })
        };

        $scope.cancelDiscrepancyModal = function()
        {
            if(!angular.isDefined(items.fromBillingPage)) {
                $scope.isPreloader = true;
                var chargedWeight = 0;
                var applied_weight = 0;
                var length = $scope.descrepancy.data.length;
                var data = $scope.descrepancy.data;
                for (var i = 0; i < length; i++) {
                    chargedWeight += parseFloat(data[i].charged_weight);
                    applied_weight += parseFloat(data[i].applied_weight);
                }
                if ($scope.descrepancy.data.length < 5 && chargedWeight - applied_weight < 5) {
                    items.isSingleShip ? showSelectShippingPartnerModal() : asignAndGenerateLabel();
                }
            }
            $uibModalInstance.dismiss('cancel');
        };

        function asignAndGenerateLabel()
        {
            AppService.post(SR_CONSTANTS.api_urls.assign_awb, true, items.awbAsigndata)
            .success(function(data) {
                if(items.awbAsigndata.courier_id != '')
                {
                    if(data.awb_assign_status)
                    {
                        AppService.openAssignAwbPopup(data.response.data);
                        labelApiCall(items.labelGenerateData);
                    }
                    else
                    {
                        $scope.isPreloader = false;
                        Notify.alert(data.response.data);
                    }
                }
                else
                {
                    $scope.isPreloader = false;
                    Notify.alert(data.message);
                    $state.go('app.manifested');
                }
            })
            .error(function(data)
            {
                $scope.isPreloader = false;
                AppService.isAuth(data);
            })
        }

        function courierWithPrice(obj) {
            obj.courierWithprice = obj.courier_name + "  Rs "+ obj.rate;
            return obj;
        }

        function labelApiCall(data)
        {
            AppService.post(SR_CONSTANTS.api_urls.generate_label, true, data)
            .success(function(data)
            {
                $scope.isPreloader = false;
                if(data.label_created)
                {
                    $uibModalInstance.dismiss('cancel');
                    window.open(data.label_url);
                    $state.go('app.manifested');
                }
                else
                {
                    Notify.alert(data.response);
                }
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                AppService.isAuth(error);
            })
        }
    }
})();

(function () {
    'use strict';
    angular
    .module('app.setting')
    .controller('add_marketing_banners', add_marketing_banners);

    add_marketing_banners.$inject = ['$rootScope', '$scope', '$stateParams', '$state', '$sce', 'Notify', 'AppService', '$localStorage', '$window'];
    function add_marketing_banners($rootScope, $scope, $stateParams, $state, $sce, Notify, AppService, $localStorage, $window) {

    	$scope.updateDesktopBanner = update_desktop_banner;
    	$scope.updateMobileBanner = update_mobile_banner;
    	$scope.saveBanner = save_banner;
    	$scope.remove_desktop_banner = remove_desktop_banner;
    	$scope.remove_mobile_banner = remove_mobile_banner;
    	$scope.banner_desktop_img = '';
    	$scope.banner_mobile_img = '';

    	function update_desktop_banner(){
            $scope.isPreloader = true;
    		$scope.banner_desktop_img = '';
    		$scope.desktop_banner_file_path = '';    		
			var formData = new FormData();
				formData.append("banner_img", $( "input[name ='banner.image']" )[0].files[0] === undefined ? '': $( "input[name ='banner.image']" )[0].files[0] );

			AppService.postFormData('pocx/company-settings/upload-image', formData , true)
			.then(function(res){
                $scope.isPreloader = false;
            	$scope.banner_desktop_img = res.data.img_link;
				$scope.desktop_banner_file_path = res.data.file_path;

			})
			.catch(function(error){
                $scope.isPreloader = false;
                AppService.isAuth(error.data);
			})    		
    	}

    	function update_mobile_banner(){
            $scope.isPreloader = true;
    		$scope.banner_mobile_img = '';
    		$scope.mobile_banner_file_path = '';    		
			var formData = new FormData();
				formData.append("banner_img", $( "input[name ='banner.mobile_image']" )[0].files[0] === undefined ? '': $( "input[name ='banner.mobile_image']" )[0].files[0] );

			AppService.postFormData('pocx/company-settings/upload-image', formData , true)
			.then(function(res){
                $scope.isPreloader = false;
            	$scope.banner_mobile_img = res.data.img_link;
				$scope.mobile_banner_file_path = res.data.file_path;
			})
			.catch(function(error){
                $scope.isPreloader = false;
                AppService.isAuth(error.data);
			})    		
    	}

    	function save_banner(){
            $(".wizard-horizontal").find('.validation-alert').remove();
    		$scope.isPreloader = true;
    		// if($scope.banner_desktop_img.length <= "5" || $scope.banner_mobile_img.length <= "5"){
    		// 	Notify.alert("Both Desktop and Mobile Banner are required");
    		// 	$scope.isPreloader = false;
    		// 	return;
    		// }
    		var banner = {};
    		banner.alt_text = $("input[ name = 'banner.alt_text' ]").val();
    		banner.link = $("input[ name = 'banner.link']").val();
    		banner.image = $scope.desktop_banner_file_path ? $scope.desktop_banner_file_path : '';
    		banner.mobile_image = $scope.mobile_banner_file_path ? $scope.mobile_banner_file_path : '';
    		var data = {'banner' : banner};
			AppService.post('pocx/company-settings/store-banners', true, data)
			.then(function(res){
				$scope.isPreloader = false;
                Notify.alert("Marketing banner added successfully",  {status: 'success'});
                $state.go('app.marketing_banners');
			})
			.catch(function(error){
                error = error.data;
				$scope.isPreloader = false;
				if(error.status_code === 422){
					AppService.alertValidation(error.errors, true);
					Notify.alert("Please correct below given errors !");
				}else{
					AppService.isAuth(error);
				}
			})
    	}

    	function remove_desktop_banner(){
    		$scope.banner_desktop_img = '';
    		$scope.desktop_banner_file_path = '';
    	}
        
        function remove_mobile_banner(){
    		$scope.banner_mobile_img = '';
    		$scope.mobile_banner_file_path = '';
        }
    }
})();

(function () {
    'use strict';
    angular
    .module('app.setting')
    .controller('marketing_banners', marketing_banners);

    marketing_banners.$inject = ['$rootScope', '$scope', '$stateParams', '$state', '$sce', 'Notify', 'AppService', '$localStorage', '$window'];
    function marketing_banners($rootScope, $scope, $stateParams, $state, $sce, Notify, AppService, $localStorage, $window) {

        function get_banners() {
            AppService.get('pocx/company-settings/get-banners', true)
                .then(function (res) {
                	$scope.isPreloader = false;
                    $scope.pocx_banners = res.data.data;
                })
                .catch(function (error) {
                    $scope.isPreloader = false;
                });
        }
        get_banners();

        $scope.delete_banner = function(index) {
        	$scope.isPreloader = true;
            AppService.post('pocx/company-settings/delete-banner/' + index, true)
                .then(function (res) {
                    $scope.pocx_banners = res.data.data;
                	$scope.isPreloader = false;
                })
                .catch(function (error) {
                    $scope.isPreloader = false;
                });
        }




    }
})();

(function () {
    'use strict';
    angular
    .module('app.setting')
    .controller('menu_links_controller', menu_links_controller);

    menu_links_controller.$inject = ['$rootScope', '$scope', '$stateParams', '$state', '$sce', 'SR_CONSTANTS', 'Notify', 'AppService', '$localStorage', '$window', 'UrlValidator'];
    function menu_links_controller($rootScope, $scope, $stateParams, $state, $sce,SR_CONSTANTS, Notify, AppService, $localStorage, $window, UrlValidator) {

        $scope.row_index = 1;
        $scope.add_another_row = add_row;
        $scope.remove_label_row = remove_row;
        $scope.save_links = save_menu_links;
        $scope.fetch_menu_links = fetch_menu_links;

        fetch_menu_links();

        function append_row_html(index){
            var tableRow = '<tr class="product-row bb" id="row_'+index+'">'+
                                '<td class="va-top">'+
                                    '<div>'+
                                        '<input type="text" id="label_'+index+'" class="form-control" placeholder="Enter Label">'+
                                    '</div>'+
                                '</td>'+
                                '<td class="va-top">'+
                                    '<div>'+
                                        '<input type="text" id="link_'+index+'" class="form-control" placeholder="Enter Link (http://www.xyz.com)">'+
                                    '</div>'+
                                '</td>'+
                                '<td class="pt-lg va-top">'+
                                    '<button class="btn p-sm ml-sm btn-blue row-remove" id="delete_row_'+index+'">'+
                                        '<i class="fa fa-minus"></i>'+
                                    '</button>'+
                                '</td>'+
                            '</tr>';
            $("#label_link_table").append(tableRow);
            document.getElementById("delete_row_"+$scope.row_index).addEventListener("click", function(){
                $scope.remove_label_row(index);
            });            
        }

        function add_row(){ //add row with label link input //max 6
            var prev_index = $scope.row_index-1;
            if(!$("#label_"+prev_index).val()){
                Notify.alert('Label cannot be empty');
                return;
            }
            if(!$("#link_"+prev_index).val()){
                Notify.alert('Link cannot be empty');
                return;
            }            
            if($scope.row_index >= 6){
                Notify.alert('Max 6 labels can be added!');
                return;
            }
            append_row_html($scope.row_index);
            $scope.row_index++;
        }

        function remove_row(index){
            if(index == 0){
                return;
            }
            $("#row_"+index).remove();
            var next_row = index+1;
            for(var j = next_row;j<$scope.row_index;j++){ //decrease ids of next elements by 1
                $("#label_"+next_row).attr('id',"label_"+index);
                $("#link_"+next_row).attr('id',"link_"+index);
                $("#delete_row_"+next_row).attr('id',"delete_row_"+index);
                $("#row_"+next_row).attr('id',"row_"+index);
            }
            $scope.row_index--;
        }

        function fetch_menu_links(){
            $scope.isPreloader = true;
            AppService.get('pocx/company-settings/get-menu', true)
                .then(function (res) {
                    $scope.isPreloader = false;
                    $scope.existing_menu_links = res.data.data;
                    $scope.existing_menu_links.forEach(function (item,index){
                        if(index > 0){
                            append_row_html(index);
                            $scope.row_index++;
                        }
                        $("#label_"+index).val(item.label);
                        $("#link_"+index).val(item.link);
                    });
                })
                .catch(function (error) {
                    $scope.isPreloader = false;
                });            
        }

        function fetch_user_values(){
            var lable_data = [];
            for (var i = 0; i < $scope.row_index; i++) {
                if($('#label_'+i).val() && $('#link_'+i).val()){
                    var obj = {};
                    obj['label'] = $('#label_'+i).val();
                    obj['link'] = $('#link_'+i).val();
                    lable_data.push(obj);
                }
            }
            return lable_data;
        }

        function validate_user_data(){
            var valid = true;
            var prev_index = $scope.row_index-1;
            if(!$("#label_"+prev_index).val()){
                Notify.alert('Label cannot be empty');
                valid = false;
            }
            if(!$("#link_"+prev_index).val()){
                Notify.alert('Link cannot be empty');
                valid = false;
            } 

            for (var i = 0; i < $scope.row_index; i++) {
                if(!UrlValidator.isValid($('#link_'+i).val())){
                    var errorHtml = '<div class="help-block validation-alert">Invalid URL. The correct format is http://www.xyz.com</div>';
                    $(errorHtml).insertAfter("#link_"+i);
                    valid = false;
                }
            }
            return valid;
        }

        function save_menu_links(){
            $(".wizard-horizontal").find('.validation-alert').remove();
            if(!validate_user_data()){
                return;
            }

            var header_menu = fetch_user_values();
            var data = {
                'header_menu' : header_menu
            }
            $scope.isPreloader = true;
            AppService.post('pocx/company-settings/store-menu', true, data)
                .then(function (res) {
                    $scope.isPreloader = false;
                    Notify.alert("Data Updated Successfully!",  {status: 'success'});
                })
                .catch(function (error) {
                    $scope.isPreloader = false;
                    Notify.alert("There was some error, Please try again after some time!",  {status: 'error'});
                });
        }
    }
})();

(function () {
    'use strict';
    angular
    .module('app.setting')
    .controller('post_nps_controller', post_nps_controller);

    post_nps_controller.$inject = ['$rootScope', '$scope', '$stateParams', '$state', '$sce', 'SR_CONSTANTS', 'Notify', 'AppService', '$localStorage', '$window', '$location'];
    function post_nps_controller($rootScope, $scope, $stateParams, $state, $sce,SR_CONSTANTS, Notify, AppService, $localStorage, $window,$location) {

        function get_nps_stats() {
            AppService.get('pocx/nps-stats', true)
                .then(function (res) {
                    $scope.nps_stats = res.data;
                })
                .catch(function (error) {
                    // $scope.isPreloader = false;
                    // AppService.isAuth(error);
                });
        }

        $scope.maxSize = 2;
        $scope.totalItems = 10000000;
        $scope.page = $stateParams.page;

        $scope.itemsPerPage = [
            {value: '15',id: 0},
            {value: '30',id: 1},
            {value: '60',id: 2},
            {value: '100',id: 3}
        ];

        if ($stateParams.perPage == 30) {
            $scope.selectedItems = 1;
        } else if ($stateParams.perPage == 60) {
            $scope.selectedItems = 2;
        } else if ($stateParams.perPage == 100) {
            $scope.selectedItems = 3;
        } else {
            $scope.selectedItems = 0;
        }

        function get_nps_responses() {
            $scope.perPage = $scope.itemsPerPage[$scope.selectedItems].value;
            var filters = $location.search();
            if (angular.isDefined(filters.perPage)) {
              filters.per_page = filters.perPage;
            } else {
              filters.per_page = 15;
            }

            $scope.isPreloader = true;
            AppService.get('pocx/nps-responses?page='+$scope.page+'&per_page='+$scope.perPage, true)
                .then(function (res) {
                    $scope.nps_responses = res.data;
                    $scope.metaData = res.data.meta.pagination;
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo = {
                      from: $scope.totalItems == 0 ? 0 : ($scope.page - 1) * $scope.perPage + 1,
                      to: Math.min($scope.totalItems, $scope.page * $scope.perPage)
                    }
                    $scope.isPreloader = false;

                })
                .catch(function (error) {
                    $scope.isPreloader = false;
                    // AppService.isAuth(error);
                });
        }

        $scope.paginatedData = function() {
            get_nps_responses();
        }        

        $scope.changePerPage = function(){
            $scope.perPage = $scope.itemsPerPage[$scope.selectedItems].value;
            get_nps_responses();
        }

        $scope.export_nps_responses = function (){
            $scope.isPreloader = true;
            AppService.get('pocx/nps-export', true)
                .then(function (res) {
                    $scope.isPreloader = false;
                    Notify.alert('Export will be emailed to you shortly.', {status: 'success', timeout: 3000 });
                })
                .catch(function (error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error.data);
                });
        }
        get_nps_stats();
        get_nps_responses();
    }
})();

(function () {
    'use strict';
    angular
    .module('app.setting')
    .controller('PostOrderSettingsController', PostOrderSettingsController);

    PostOrderSettingsController.$inject = ['$rootScope', '$scope', '$stateParams', '$state', '$sce', 'Notify', 'AppService', '$localStorage', '$window'];
    function PostOrderSettingsController($rootScope, $scope, $stateParams, $state, $sce, Notify, AppService, $localStorage, $window) {
    	
    	$scope.company_logo = '';
    	$scope.slug_success = false;
    	fetch_current_settings();

		$scope.updateLogo = function(){
		  var formData = new FormData();
		  formData.append("logo", $( "input[name ='logo']" )[0].files[0] === undefined ? '': $( "input[name ='logo']" )[0].files[0] );

		  AppService.postFormData('settings/logo', formData , true)
		  .then(function(data){
		      $scope.company_logo = data.logo_url;
		  })
		  .catch(function(error){
		      AppService.isAuth(error.data);
		  })
		}

		$scope.removeLogo = function(event){
		  AppService.deleteData('settings/logo', true)
		  .success(function(data){
		      $scope.company_logo = '';
		  })
		  .error(function(error){
		      AppService.isAuth(error);
		  })
		}        

		function fetch_current_settings(){
			$scope.isPreloader = true;
			AppService.get('pocx/company-settings/get-details', true)
			.success(function(data){
				$scope.isPreloader = false;
				$scope.privacy_link = data.data.privacy_link;
				$scope.email_id = data.data.support_email;
				$scope.phone_no = data.data.support_contact;
				$scope.slug = data.data.slug;
				$scope.company_logo = data.data.logo;
				$scope.website = data.data.website;
			})
			.error(function(error){
			AppService.isAuth(error);
				$scope.isPreloader = false;
			})			
		}

		$scope.settings_submit = function($event){
			$(".wizard-horizontal").find('.validation-alert').remove();
			$scope.isPreloader = true;
			var footer = {
				'support_contact' : $scope.phone_no,
				'support_email' : $scope.email_id,
				'privacy_link' : $scope.privacy_link
			}

			var data = {
			  'slug' : $scope.slug,
			  'website' : $scope.website,
			  'footer' : footer
			}

			AppService.post('pocx/company-settings', true, data)
			.success(function(data){
				$scope.isPreloader = false;
				Notify.alert("Post Order Settings Updated Successfully!",  {status: 'success'});
			})
			.error(function(error){
				$scope.isPreloader = false;
				if(error.status_code === 422){
					AppService.alertValidation(error.errors, true);
				Notify.alert("Please correct below given errors !");
				}else{
					AppService.isAuth(error);
				}
			})
		}

		$scope.check_slug = function($event){
			$scope.slug_success = false;
			$(".wizard-horizontal").find('.validation-alert').remove();
			$scope.isPreloader = true;
			AppService.get('pocx/company-settings/check-slug?slug='+$scope.slug, true)
			.success(function(data){
				$scope.isPreloader = false;
				$scope.slug_success = true;
			})
			.error(function(error){
				$scope.isPreloader = false;
				if(error.status_code === 422){
					AppService.alertValidation(error.errors, true);
					Notify.alert("Please correct below given errors !");
				}else{
					AppService.isAuth(error);
				}
			})
		}
    }
})();

(function () {
    'use strict';
    angular
    .module('app.setting')
    .controller('slug_popup_controller', slug_popup_controller);

    slug_popup_controller.$inject = ['$rootScope', '$scope', '$stateParams', '$state', '$sce', 'Notify', 'AppService', '$localStorage', '$window'];
    function slug_popup_controller($rootScope, $scope, $stateParams, $state, $sce, Notify, AppService, $localStorage, $window) {

        


    }
})();

/**=========================================================
 * Module: LinkModalController
  =========================================================*/

angular.module('app.products').controller('LinkModalController',

    ["$scope", "$uibModalInstance", "items", "AppService", "$state", "Notify", function ($scope, $uibModalInstance, items, AppService, $state, Notify) {
        $scope.isSelectedProduct = false;
        $scope.isEdit = false;
        $scope.items = items;
        $scope.product = '';

        if($scope.items.isEdit === true)
        {
            $scope.isEdit = true;
        }
        $scope.products = [];
        $scope.myConfig =
        {
            // create: true,
            valueField: 'id',
            labelField: 'search',
            searchField: 'search',
            maxItems: 1,
            loadThrottle: 600,
            closeAfterSelect: true,
            // inputClass: "",
            placeholder: 'Search Product',
            load: function( value, callback )
            {
                if(value.length < 3)
                {
                    return false;
                }
                var data = {
                    query: value
                };
                AppService.post(SR_CONSTANTS.api_urls.search_listings, true, data )
                .success(function(data){
                    var products = data;
                    if(!$scope.products.length)
                    {
                        var obj = {};
                        var arry = []
                        obj.search  = "No result for input text";
                        obj.id  = "1";
                        arry.push(obj);
                        $scope.products = arry;
                    }

                    callback($scope.products);
                })
                .error(function(error, status)
                {
                    AppService.isAuth(error);
                }).finally(function()
                {
                    AppService.isAuth(error);
                });
            },
            onChange: function( value )
            {
                var length = $scope.products.length;
                $scope.isSelectedProduct = false;
                for(var i=0; i< length; i++)
                {
                    if(value == $scope.products[i].id)
                    {
                        $scope.product = $scope.products[i];
                        $scope.isSelectedProduct = true;
                        $scope.$apply();
                        break;
                    }
                }
            }
        };

        $scope.price =
        {
            value: $scope.items.Price
        }

        $scope.linkProduct = function ()
        {
            //intercom event
            AppService.intercomEventAndPing('Mapped A Single Product');
            if(!$scope.product)
            {
                Notify.alert("Please Search And Select a product");
                return;
            }
            $scope.isPreloader = true;
            var data  =
            {
                product_id: $scope.product.id,
                listing_id: $scope.items.id,
            }

            AppService.post('listings/link', true, data )
            .success(function(data)
            {
                $uibModalInstance.dismiss('cancel');
                $scope.isPreloader = false;
                Notify.alert("Successfully linked" ,  {status: 'success'});
                $state.go($state.current, {}, {reload: true});
            })
            .error(function(error, status)
            {
                $scope.isPreloader = false;
                AppService.isAuth(error);
            }).finally(function()
            {
                $scope.isPreloader = false;
                AppService.isAuth(error);
            });
        };

        $scope.update = function()
        {
            $scope.isPreloader = true;
            var data =
            {
                price: $scope.price.value,
            }
            AppService.put('listings/'+$scope.items.id+'/update', true, data )
            .success(function(data)
            {
                $uibModalInstance.dismiss('cancel');
                $scope.isPreloader = false;
                Notify.alert("Successfully updated" ,  {status: 'success'});
                $state.go($state.current, {}, {reload: true});
            })
            .error(function(error, status)
            {
                $scope.isPreloader = false;
                AppService.isAuth(error);
            }).finally(function()
            {
                $scope.isPreloader = false;
                AppService.isAuth(error);
            });
        }

        $scope.cancel = function () {
            $uibModalInstance.dismiss('cancel');
        };
}]);

/**=========================================================
 * Module: addProductController
  =========================================================*/
(function() {
    'use strict';
    angular.module('app.products').controller('addProductController', addProductController);
    addProductController.$inject = ['$scope', 'AppService', '$state', '$uibModalInstance', 'items', 'Notify','$compile'];
    function addProductController($scope, AppService, $state, $uibModalInstance, items, Notify, $compile) {
        activate();
        function activate()
        {

            $scope.isPreloader = true;
            $scope.product =
            {
                "sku"            : "",
                "name"           : "",
                "tax_code"       : "Select Tax",
                "type"           : "Single",
                "qty"            : "",
                "low_stock"      : "",
                "category_code"  : "",
                "category"       : {code: "Select Category", hsn: ""},
                "description"    : "",
                "brand"          : "",
                "size"           : "",
                "weight"         : "",
                "length"         : "",
                "width"          : "",
                "height"         : "",
                "ean"            : "",
                "upc"            : "",
                "isbn"           : "",
                "color"          : "",
                "custom_field"   : "",
                "cost_price"     : "",
                "mrp"            : "",
                "status"         : true,
                "image_url"      : "",
                "hsn"            : ""

            }

            $scope.isFullDetail = false;
            $scope.getTaxAndCategory = function()
            {
                AppService.get('products/create', true)
                .success(function (data)
                {
                    $scope.categories = data.categories;
                    $scope.categories.unshift($scope.product.category);
                    $scope.tax_codes = data.tax_codes;
                    $scope.tax_codes.unshift($scope.product.tax_code);
                    $scope.isPreloader = false;

                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

            $scope.category_changed = function(category){
                $scope.product.hsn =  category && category.hsn? category.hsn: "";
                $scope.product.category_code =  category && category.hsn? category.code: "";
            };

            $scope.checkForCombo = function()
            {
                if( $scope.product.type == "Combo" )
                {
                    $('.initial-quantity').prop('disabled', true)
                    $('.product-row').addClass('show').removeClass('hide');
                }
                else
                {
                    $('.initial-quantity').prop('disabled', false)
                    $('.product-row').addClass('hide').removeClass('show');

                }
            }

            var rowIndexArry = [0];
            var index = 0;
            $scope.addComboRow = function($event)
            {
                //code to detect more than one row of
                var notNullValue = 0;
                var notNullArry = [];

                for (var i =0; i < rowIndexArry.length ; i++)
                {
                    if( rowIndexArry[i] != 'null' )
                    {
                        notNullValue++;
                        notNullArry.push(i);
                    }
                }

                var indexForButton = notNullValue == 1 ?  notNullArry[0] : index;
                var indexForValidation = notNullArry[notNullArry.length-1];
                if( !$('.com-sku' + indexForValidation ).val() )
                {
                    Notify.alert('Please Input Componenet SKU');
                    return false;
                }
                if( !$('.com-quantity' +indexForValidation ).val() )
                {
                    Notify.alert('Please Input Componenet Quantity');
                    return false;
                }

                $('.add-full-row').addClass('show').removeClass('hide');
                $('.add-row' + indexForButton ).addClass('hide').removeClass('show');
                $('.remove-row' + indexForButton ).addClass('show').removeClass('hide');
                index++;
                rowIndexArry.push(index);

                var comboROWHTML =
                    $('<div class="row p0 m0 pt-sm product-row"><div class="col-md-6 p0 pr-sm products-wrapper">'+
                        '<input type="text" data-sku ="" ng-keyup="getProduct($event, $index, 1)" class="form-control input-sm com-sku'+ index +'" placeholder="Search Component SKU">'+
                            '<div class="options product-dorpdown" style="z-index:1000; position: absolute; width:100%;" >'+
                            '</div>'+
                    '</div>'+
                    '<div class="col-md-5 p0">'+
                        '<input type="text" class="form-control input-sm col-md-6 com-quantity'+ index +'" placeholder="Component Qty">'+
                    '</div>'+
                    '<div class="col-md-1 p0 add-row'+index +' hide">'+
                        '<button class="btn p-sm ml-sm btn-blue" ng-click="addComboRow($event)"><i class="fa fa-plus"></i></button>'+
                    '</div>'+
                    '<div class="col-md-1 p0 remove-row'+ index + '">'+
                        '<button class="btn p-sm ml-sm btn-blue" ng-click="removeComboRow($event, '+index+')"><i class="fa fa-minus"></i></button>'+
                    '</div> </div>').appendTo('.combo-product-wrapper');
                    $compile(comboROWHTML)($scope);
            }


            $scope.removeComboRow = function($event, index)
            {
                var target = angular.element($event.currentTarget);
                target.closest('.product-row').remove();
                rowIndexArry[index] = 'null';
                var notNullValue = 0;
                var notNullArry = [];
                for (var i =0; i < rowIndexArry.length ; i++)
                {
                    if( rowIndexArry[i] != 'null' )
                    {
                        notNullValue++;
                        notNullArry.push(i);
                    }
                    if(notNullValue == 2)
                    {
                        break;
                    }
                }

                if(notNullValue == 1 )
                {
                    $('.add-full-row').addClass('hide').removeClass('show');
                    $('.add-row' + notNullArry[0] ).addClass('show').removeClass('hide');
                    $('.remove-row' + notNullArry[0] ).addClass('hide').removeClass('show');
                }
            }

            $scope.getProduct = function($event, index, only_components)
            {
                $('.options').html('');
                var target = angular.element($event.currentTarget);
                if(target.attr('data-sku'))
                {
                    if($event.keyCode == 8)
                    {
                        target.attr('data-sku', '');
                        target.val('');
                    }
                    else
                    {
                        return false;
                    }
                }

                var value = target.val();

                if(value.length < 3)
                {
                    return false;
                }
                $('.validation-alert').remove();
                var data =
                {
                    query: value,
                    only_components : only_components
                };
                AppService.post(SR_CONSTANTS.api_urls.search_listings, true, data )
                .success(function(data){
                    var html =  '';
                    var products = data;
                    for(var i=0; i<products.length; i++)
                    {
                       html +=  '<div data-p-weight="'+products[i].weight+'" data-p-breadth="'+products[i].dimensions.width+'" data-p-height="'+products[i].dimensions.height+'" data-p-length="'+products[i].dimensions.length+'" data-sku="'+ products[i].sku + '" data-hsn="'+ products[i].hsn + '" data-units='+ products[i].quantity + ' data-selling-price='+ products[i].selling_price  + ' class="product-wrapper " '+ 'data-name="' +products[i].name  +'" >'+ products[i].search  +'</div>'
                    }
                    target.closest('.products-wrapper').find('.options').html(html);

                    $(".product-wrapper").bind("click", (function ()
                    {
                        var currentObject = $(this);
                        var currentInput = $(this).closest('.products-wrapper').find('input');
                        //Check Existing SKU
                        for (var i = 0; i < rowIndexArry.length; i++)
                        {
                            if(rowIndexArry[i] != 'null')
                            {
                                if($('.com-sku'+ i).attr('data-sku') == currentObject.data('sku'))
                                {
                                    currentInput.val('');
                                    Notify.alert("SKU Already added");
                                    return false;
                                }
                            }
                        }

                        currentInput.val(currentObject.data('name'));
                        $(this).closest('.products-wrapper').find('input').attr("data-sku", currentObject.data('sku'));

                        $(this).closest('.products-wrapper').find('.options').html('');
                    }));
                    $(".products-wrapper").mouseleave(function(){
                       $(this).find('.product-dorpdown').hide();
                    });
                    $(".products-wrapper").bind('mouseenter', function(){
                       $(this).find('.product-dorpdown').show();
                    });
                    $(".products-wrapper .productId").keypress(function(){
                       $('.product-dorpdown').show();
                    });

                })
                .error(function(error, status)
                {
                    AppService.isAuth(error);
                }).finally(function()
                {
                    AppService.isAuth(error);
                });
            }

            $scope.addProduct = function()
            {
                //intercom event
                AppService.intercomEventAndPing('Clicked Add Product');

                $('.add-product').prop('disabled', true);
                $('.validation-alert').remove();
                $scope.isPreloader = false;
                var components = [];
                if($scope.product.type == 'Combo')
                {
                    for (var i = 0; i < rowIndexArry.length; i++)
                    {
                        if(rowIndexArry[i] != 'null')
                        {
                            if(! $('.com-sku'+ i).attr('data-sku'))
                            {
                                $('.add-product').prop('disabled', false);
                                Notify.alert("Component SKU can not be Empty");
                                $('.add-product').prop('disabled', false);
                                return false;
                            }
                            if( $('.com-quantity'+ i).val() == '')
                            {
                                Notify.alert("Please Enter Quantity");
                                $('.add-product').prop('disabled', false);
                                return false;
                            }

                            if( isNaN($('.com-quantity'+ i).val()) )
                            {
                                Notify.alert("Please Enter Quantity as Number");
                                $('.add-product').prop('disabled', false);
                                return false;
                            }

                            var componentObj =
                            {
                                sku: $('.com-sku' + i).attr('data-sku'),
                                qty: $('.com-quantity'+ i).val()
                            }
                            components.push(componentObj);
                        }

                    }
                }

                var data =
                {
                    "sku"            : $scope.product.sku,
                    "name"           : $scope.product.name,
                    "tax_code"       : $scope.product.tax_code == 'Select Tax' ? '' : $scope.product.tax_code,
                    "type"           : $scope.product.type,
                    "qty"            : $scope.product.qty,
                    "low_stock"      : $scope.product.low_stock,
                    "category_code"  : $scope.product.category_code == 'Select Category' ? '' : $scope.product.category_code,
                    "description"   : $scope.product.description,
                    "brand"         : $scope.product.brand,
                    "size"          : $scope.product.size,
                    "weight"        : $scope.product.weight,
                    "length"        : $scope.product.length,
                    "width"         : $scope.product.width,
                    "height"        : $scope.product.height,
                    "ean"           : $scope.product.ean,
                    "upc"           : $scope.product.upc,
                    "isbn"          : $scope.product.isbn,
                    "color"         : $scope.product.color,
                    "imei_serialnumber"  : $scope.product.custom_field,
                    "cost_price"    : $scope.product.cost_price,
                    "mrp"           : $scope.product.mrp,
                    "status"        : $scope.product.status == true ? 1 : 0,
                    "image_url"     : $scope.product.image_url,
                    "components"    : components,
                    "hsn"           : $scope.product.hsn

                }

                AppService.post('products', true, data)
                .success(function (data)
                {
                    $scope.isPreloader = false;
                    $('.add-product').prop('disabled', false);
                    $uibModalInstance.dismiss('cancel');
                    $state.go($state.current, {}, {reload: true});
                })
                .error(function(error)
                {
                    $('.add-product').prop('disabled', false);
                    $scope.isPreloader = false;
                     if(error.status_code == 422)
                    {
                        AppService.alertValidation(error.errors);
                    }
                    else
                    {
                         AppService.isAuth(error);
                    }
                })
            }

            $scope.cancel = function()
            {
                $uibModalInstance.dismiss('cancel');
            }

        }
    }
})();

(function() {
    'use strict';
    angular
    .module('app.upload')
    .controller('DownloadController',
        ['$rootScope', '$state', '$scope', 'AppService', 'Notify', 'SR_CONSTANTS', '$stateParams', '$location',
        function($rootScope, $state, $scope, AppService, Notify, SR_CONSTANTS, $stateParams, $location){
            $scope.isdisable = false;

            $scope.downloadCSV = downloadCSV;
            $scope.downloadOrder = downloadOrder;

            function downloadCSV(url, fileName, isPostRequest, status, ndr, withid){
                if(isPostRequest){
                    downloadfileWithPost(url, fileName, status, ndr);
                }
                else if (withid){
                    downloadfileWithId(url, withid, status);
                }
                else{
                    downloadfile(url, fileName, status);
                }
                $scope.btnDisable = 1;
            }

            function downloadOrder(){
                $scope.btnDisable = 1;
                var value = $('.status-filter').val();
                var statusArry = [];
                if(value){
                    statusArry.push(value);
                }
                var orderId = [];
                $("input:checkbox[name=orderId]:checked").each(function(){
                    orderId.push(parseInt($(this).val()));
                });
                var data =
                {
                    status: statusArry,
                    order_id: orderId,
                    from: $stateParams.date_from,
                    to: $stateParams.date_to,
                    search: $stateParams.search,
                    payment_method: $stateParams.payment_method
                }
                AppService.post(SR_CONSTANTS.api_urls.export_orders, true, data)
                .success(function(data){
                    afterDownload(data, 'orders.csv');
                    $scope.btnDisable=0;
                 })
                .error(function(error){
                    AppService.isAuth(error);
                    $scope.btnDisable=0;
                })
            }

            function downloadfileWithPost(url, fileName, status, ndr){
                $scope.isdisable = true;
                var channelOrderId = getSelectedItems();
                fileName = fileName + '.csv' ;
                if($scope.filter && $scope.filter.hasOwnProperty('courier_name') && $scope.filter.courier_name == 'Select Courier Company'){
                    $scope.filter.courier_name = '';
                }
                //alert(typeof(ndr));return;
                if(typeof(ndr) === 'undefined'){
                  if (status[0] == '6') {
                        var trackingAwb = $("#tracking-awb").val();
                        var trackingStatus = $("#tracking-status").val();
                        if(status[1] == 0){
                          trackingStatus = $stateParams.order_status;
                        }
                        if( !trackingStatus && fileName == 'order-tracking.csv'){
                            trackingStatus = [6,7,15,16];
                        }
                        var data =
                        {
                          'status': trackingStatus == '' ? []: Array.isArray(trackingStatus) ? trackingStatus:  [trackingStatus],
                          'from': $rootScope.DateFilter.from,
                          'to': $rootScope.DateFilter.to,
                          'awb_code':trackingAwb,
                          'order_id': channelOrderId
                        }
                        if(status[1] == 0){
                          data.is_return = 1;
                        }
                    } else {
                        var data =
                        {
                            status: status == '' ? [] : status,
                            order_id: channelOrderId
                        }
                    }
                }
                else if (ndr){
                    var data = {
                        'status': status == '' ? [] : status,
                        'to': $scope.$parent.searchParams.to,
                        'from': $scope.$parent.searchParams.from,
                        'awb_code':$scope.$parent.searchParams.searchText,
                        'courier_name':$scope.$parent.filter.courier_name
                    };


                }   else {
                    var data = {
                        'to': $scope.DateFilter.to,
                        'from': $scope.DateFilter.from,
                        'courier_name' : $scope.filter.courier_name,
                        'company_name' : $scope.filter.company_name,
                        'awb_number' : $scope.filter.awb_number,
                        'order_status' : $scope.filter.order_status == "" ? [] : $scope.filter.order_status,
                        'export' : '1'
                    }
                }
                AppService.post(url, true, data)
                .success(function(data){
                    afterDownload(data, fileName);
                    $scope.btnDisable=0;
                    $scope.isdisable = false;
                })
                .error(function(error){
                    AppService.isAuth(error);
                    $scope.btnDisable=0;
                    $scope.isdisable = false;
                });
            }

            function downloadfile(url, fileName, status){
                $scope.isdisable = true;
                var fileName = $('#'+ fileName).data('name')
                fileName = fileName + '.csv' ;
                var filters = {}
                switch (status) {
                  case 1:
                    filters.to = $scope.DateFilter.to;
                    filters.from = $scope.DateFilter.from;
                    filters.awb_number = $scope.filter.awb_number;
                    filters.company_name = $scope.filter.company_name;
                    filters.courier_name = $scope.filter.courier_name;
                    filters.order_status = $scope.filter.order_status;
                    filters.dispute_status = $scope.filter.dispute_status;
                    break;
                  case 2:
                    filters.to = $scope.DateFilter.to;
                    filters.from = $scope.DateFilter.from;
                    filters.search = $stateParams.search;
                    break;
                  case 'recharge-logs':
                    filters.to = $scope.DateFilter.to;
                    filters.from = $scope.DateFilter.from;
                    break;
                  case 'remittance-logs':
                    filters.to = $scope.DateFilter.to;
                    filters.from = $scope.DateFilter.from;
                    break;
                  case 'NDR':
                    filters = $location.search();
                    break;
                }

                AppService.get_with_params(url, filters, true)
                .success(function(data){
                    afterDownload(data, fileName);
                    $scope.btnDisable=0;
                    $scope.isdisable = false;
                })
                .error(function(error){
                    AppService.isAuth(error);
                    $scope.btnDisable=0;
                    $scope.isdisable = false;
                });
            }

            function downloadfileWithId(url, withId, status){
                $scope.isdisable = true;
                var fileName = "Errorfile.csv";
                if (status === 1) {
                    url = url + "/" + withId
                }
                AppService.get(url, true)
                .success(function(data){
                    afterDownload(data, fileName);
                    $scope.btnDisable=0;
                    $scope.isdisable = false;
                })
                .error(function(error){
                    AppService.isAuth(error);
                    $scope.btnDisable=0;
                    $scope.isdisable = false;
                });
            }

            function afterDownload(data, fileName){
                if(data.download_url){
                    AppService.downloadDataWithUrl(data.download_url, fileName)
                }else {
                    var blob = new Blob([data], {type: 'text/csv'});
                    var link = document.createElement("a");
                    if (link.download !== undefined) { // feature detection
                        // Browsers that support HTML5 download attribute
                        var url = URL.createObjectURL(blob);
                        link.setAttribute("href", url);
                        link.setAttribute("download", fileName);
                        link.style.visibility = 'hidden';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }
                }
            }

            function getSelectedItems(){
                var orderId = [];
                $("input:checkbox[name=orderId]:checked").each(function(){
                    orderId.push(parseInt($(this).val()));
                });
                $("input:checkbox").prop( "checked", false );
                return orderId;
            }

        }
    ])
})();

angular.module('app.products').directive('fileModel', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModel);
            var modelSetter = model.assign;

            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                    $('.selected-file').val($('#fileUpload')[0].files[0].name)
                });
            });
        }
    };
}]);


angular.module('app.products').directive('fileModelInternational', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        scope: {
            fileModelInternational: '=',
            documentId: '=',
            documentTypeId: '=',
            uploadDocument: '&'
        },
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModelInternational);
            var modelSetter = model.assign;

            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                    scope.uploadDocument({
                        file: element[0].files[0],
                        document_id: scope.documentId,
                        document_type_id: scope.documentTypeId
                    });
                });
            });
        }
    };
}]);




angular.module('app.products').directive('fileModelCompSettings', ['$parse', function ($parse) {
    return {
        restrict: 'A',
        scope: {
            fileModelCompSettings: '=',
            fileType: '@',
            uploadDocument: '&'
        },
        link: function(scope, element, attrs) {
            var model = $parse(attrs.fileModelCompSettings);
            var modelSetter = model.assign;
            element.bind('change', function(){
                scope.$apply(function(){
                    modelSetter(scope, element[0].files[0]);
                    scope.uploadDocument({
                        document: element[0].files[0],
                        fileType: scope.fileType
                    });
                });
            });
        }
    };
}]);

(function() {
    'use strict';
    angular.module('app.products').controller('InventoryController', InventoryController);
    InventoryController.$inject = ['$document', '$rootScope', '$scope', '$state', '$uibModal', 'AppService', 'Notify', '$stateParams', '$localStorage'];
    function InventoryController($document, $rootScope, $scope, $state, $uibModal, AppService, Notify, $stateParams, $localStorage) {
        activate();
        ////////////////
        function activate()
        {
            var user = $localStorage.USER;
            if(user) {
                $rootScope.isBasicPlan = user.is_basic_plan;
                $rootScope.toggleOff = !user.inventory_sync_status;
            }
            // if(user.is_free_plan)
            // {
            //     $state.go('app.processing');
            // }
            //intercom event
            AppService.intercomEventAndPing('Clicked Inventory');

            var totalqty = {
                className : 'totalqty',
                width: $('.totalqty').outerWidth(),
                tableClass: 'inventoryList'
            }
            var orderdate = {
                className : 'orderdate',
                width: $('.orderdate').outerWidth(),
            }
            

            //Quantity Edit popover//
            $scope.showQuentyPopup = function($event, listId)
            {
               var targetdiv = angular.element($event.currentTarget);
               var divposition = targetdiv.parent().position();
                if(Math.round(divposition.top) >= '380'){
                targetdiv.find(".popover").removeClass('bottom').addClass('top').css('top','-157px');
                }
                else{
                    targetdiv.find(".popover").removeClass('top').addClass('bottom').css('top','11px');;
                }
            }

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.sortType = 'updated_on';
            $scope.sortReverse  = false;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }
            
            getInventoryData();
            $scope.paginatedData = function()
            {                   
                $("th").remove();
                $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.isPreloader = true;
            $scope.categoryDetails =
            {
                name: '',
                code: '',
                tax_code: '',
            }

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getInventoryData();
            }

            $scope.changePerPage = function()
            {   
                $("th").remove();
                setTimeout(function() {
                    $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
                }, 2);
            }

            function getInventoryData()
            {   
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC";
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('inventory?page='+ $scope.page +'&per_page='+ perPage + '&sort_by=' +$scope.sortType +'&sort=' +sort , true)
                .success(function (data)
                {
                    if(!data.data.length)
                    {
                        $scope.isPreloader = false;
                    }
                    $scope.inventoryList = data.data;
                    $scope.metaData = data.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo = 
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    AppService.setHeight();
                    $scope.$on('inventoryList', function(ngRepeatFinishedEvent)
                    {
                        AppService.setWidth(totalqty, orderdate);
                        $scope.isPreloader = false;
                    });

                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                    $scope.isPreloader = false;
                })
            }

            var currentId ='';
            $scope.openEditQuantity = function($event, listId)
            {   
                //intercom event
                AppService.intercomEventAndPing('Clicked Edit Inventory');

                $event.stopPropagation()
                var target = angular.element($event.currentTarget);
                var editInfo = target.closest('.editQuantityWrapper').find('.quantity-info');
                
                if(editInfo.hasClass('hide'))
                {   
                    $('.quantity-info').removeClass('show').addClass('hide');
                    currentId = listId;
                    editInfo.removeClass('hide').addClass('show');
                }
                else
                {
                    $('.quantity-info').removeClass('show').addClass('hide');
                }
            }


            $scope.updateQuantity = function($event)
            {   
                var target = angular.element($event.currentTarget);
                var editInfo = target.closest('.editQuantityWrapper');
                var quantity = editInfo.find('.new-quantity').val();
                var action = editInfo.find('.select-action').val();

                if(!action)
                {
                    Notify.alert("Please select the action type you would like to perform.",  {status: 'danger'});
                    return;
                }

                var data =
                {
                    quantity: quantity,
                    action: action
                }

                AppService.put('inventory/' + currentId +"/update", true, data)
                .success(function (data)
                {
                    $scope.isPreloader = false;
                    $state.go($state.current, {}, {reload: true});
                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                })
            }

            $scope.openModal = function()
            {
                $scope.items = 
                {

                    type: 'inventory'
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop  : 'static',
                    keyboard  : false,
                    templateUrl: 'importfile.html',
                    controller: 'UploadController',
                    size: 'sm-400',
                    resolve: {
                        items: function ()
                        {
                         return $scope.items;
                        }
                    }
                });
            }

            $scope.syncInventory = function(argument)
            {
                AppService.get('products/sync', true)
                .success(function(data)
                {   
                    Notify.alert("Inventory Synchronization Started",  {status: 'success' });
                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                })
            }
            
            $document.on("click", function()
            {   
                $('.quantity-info').removeClass('show').addClass('hide');
            });

            $scope.cancel = function()
            {
                $('.quantity-info').removeClass('show').addClass('hide');
            }

        }
    }

})();
/**=========================================================
 * Module: ListingController
  =========================================================*/

(function() {
    'use strict';
    angular
        .module('app.products')
        .controller('ListingsController', ListingsController);
    ListingsController.$inject = ['$rootScope','$stateParams', '$scope', 'AppService', '$uibModal', 'Notify', '$state', '$localStorage', 'loaderFactory'];
    function ListingsController($rootScope, $stateParams, $scope, AppService, $uibModal, Notify, $state, $localStorage, loaderFactory) {
        $scope.$scope = $scope;
        activate();
        function activate() {
            $scope.open = open;
            $scope.searchBy = searchBy;
            $scope.openModal = openModal;
            $scope.sortTable = sortTable;
            $scope.syncListing = syncListing;
            $scope.getListings = getListings;
            $scope.updateState = updateState;
            $scope.updateDetail = updateDetail;
            $scope.unLinkListing = unLinkListing;
            $scope.changePerPage = changePerPage;
            $scope.paginatedData = paginatedData;

            $('.listingtable-mapped').html('')
            var user = $localStorage.USER;
            //intercom event
            AppService.intercomEventAndPing('Clicked Listings');
            $scope.isData= true;
            var table = {
                filter_by: 'link_status',
                filter: '',
            }

            if($stateParams.filter == 'mapped'){
                table.filter = 1;
                $scope.isMapped = 'active';
                $scope.isUnMapped = '';
                $scope.selectedView = 'mapped';
                $scope.listingtable = 'listingtable-mapped';
                $scope.downloadCsvUrl = "listings/export/mapped";
            }
            else if($stateParams.filter == '' || user.is_free_plan || user.is_basic_plan || !user.inventory_sync_status){
                $scope.listingtable = 'listingtable';
                table.filter = '';
                table.filter_by= '';
            }
            else {
                $stateParams.filter = 'unmapped';
                $scope.selectedView = 'unmapped';
                $scope.isMapped = '';
                $scope.isUnMapped = 'active';
                table.filter = 0;
                $scope.listingtable = 'listingtable-unmapped';
                $scope.downloadCsvUrl = "listings/export/unmapped";
            }

            var action = {
                className : 'action',
                width: $('.action').outerWidth(),
                tableClass: $scope.listingtable
            }

            $scope.show_dimension_form = [];
            $scope.isPreloader = true;
            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;
            $scope.searchText = $stateParams.search;
            $scope.channelId = {};
            $scope.channelId.id = $stateParams.channel_id;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            if ($stateParams.perPage == 30){
                $scope.selectedItems = 1;
            } else if ($stateParams.perPage == 60){
                $scope.selectedItems = 2;
            } else if ($stateParams.perPage == 100){
                $scope.selectedItems = 3;
            } else {
                $scope.selectedItems = 0;
            }

            getListingData();
            getChannels();



            function paginatedData(){
                $("th").remove();
                updateState();
            }

            $scope.sortType = 'base_channel_code';
            $scope.sortReverse  = false;

            function getChannels () {
              AppService.get('channels', true)
              .success(function(data){
                  var defaultChannel = {
                      name: 'All Channels',
                      id: ''
                  }

                  $scope.channelList = data.data;
                  if($scope.channelList.length != 1){
                      $scope.channelList.unshift(defaultChannel);
                  }
                  if($stateParams.channel_id != ''){
                    $scope.channelId = $scope.channelList.filter(function(x){
                      return x.id == $stateParams.channel_id;
                    })[0];
                  } else {
                    $scope.channelId = $scope.channelList[0]
                  }
                  loaderFactory.hide();
              })
              .error(function(error){
                  AppService.isAuth(error);
                  loaderFactory.hide();
              })
            }

            function changePerPage(){
                $("th").remove();
                updateState();
            }

            function updateState(){
                $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value,search:$scope.searchText,channel_id:$scope.channelId.id}, {reload: true});
            }

            function searchBy ($event) {
              if($event.keyCode == 13){
                updateState();
              }
            }

            function sortTable(type){
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getListingData();
            }


            function getListings(){
                getListingData();
            }


            function syncListing(){
                AppService.get('listings/fetch', true)
                .success(function(data){
                    Notify.alert("Listing Synchronization Started",  {status: 'success' });
                })
                .error(function(error){
                    AppService.isAuth(error);
                })
            }

            function getListingData(){
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                if($scope.sortType === undefined){
                    $scope.sortType = '';
                }

                AppService.get('listings?page='+ $scope.page +'&per_page='+ perPage + '&sort_by=' +$scope.sortType +'&sort=' +sort +'&filter=' +table.filter +'&filter_by='+ table.filter_by + '&search=' + $scope.searchText + '&channel_id=' + $scope.channelId.id, true)
                .success(function(data){
                    if(!data.data.length){
                        $scope.isPreloader = false;
                    }
                    $scope.listings = data.data;
                    $scope.metaData = data.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo = {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    AppService.setHeight();
                    $scope.$on('listingtable', function(ngRepeatFinishedEvent){
                        AppService.setWidth(action);
                        $scope.isPreloader = false;
                    });
                })
                .error(function(error){
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

            // $scope.getFilteredData = function(filter)
            // {
            //     table.filter = filter;
            //     getListingData()
            // }

            $scope.dynamicPopover = {
                templateUrl: 'importfile.html',
            };

            function open(row, isEdit, size){

                //intercom event
                AppService.intercomEventAndPing('Clicked Map');

                $scope.items = row;
                $scope.items.isEdit = isEdit;
                var modalInstance = $uibModal.open({
                    animation: $scope.animationsEnabled,
                    templateUrl: '/app/views/Products/productmapping.html',
                    controller: 'LinkModalController',
                    resolve: {
                        items: function ()
                        {
                         return $scope.items;
                        }
                    }
                });
            }


            function openModal(){
                $scope.items = {
                    type: 'listing'
                };
                var modalInstance = $uibModal.open({
                    backdrop  : 'static',
                    keyboard  : false,
                    animation: true,
                    templateUrl: 'importfile.html',
                    controller: 'UploadController',
                    size: 'sm-400',
                    resolve: {
                        items: function ()
                        {
                         return $scope.items;
                        }
                    }
                });
            }


            function unLinkListing(listingId){
                AppService.get('listings', true)
                .success(function(data){
                    $scope.isPreloader = false;
                    $scope.listings = data.data;
                })
                .error(function(error){
                    AppService.isAuth(error);
                })
            }


            function updateDetail(event, id, index, dimensions, weight){
                var data = {
                    length: dimensions.length,
                    width: dimensions.width,
                    height: dimensions.height,
                    weight: weight
                }
                var storeddata = $localStorage.USER;
                loaderFactory.display('Please Wait!');
                AppService.put('listings/'+id, true, data)
                .success(function(data){
                    if(storeddata.is_free_plan || storeddata.is_basic_plan || !storeddata.inventory_sync_status){
                      Notify.alert('This will update weight and dimensions for these products under processing status.')
                      $state.go($state.current, {}, {reload: true});
                    } else {
                      $state.go('app.listings', {filter: 'mapped'})
                    }
                    $scope.show_dimension_form[index] = false;
                    loaderFactory.hide();
                })
                .error(function(error){
                    AppService.isAuth(error);
                    loaderFactory.hide();
                })
            }
         }
    }
})();


angular.module('app.products').directive('customOnChange', function() {
  return {
    restrict: 'A',
    link: function (scope, element, attrs) {
      var onChangeHandler = scope.$eval(attrs.customOnChange);
      element.bind('change', onChangeHandler);
    }
  };
});
/**=========================================================
 * Module: ProductController
  =========================================================*/

(function() {
    'use strict';
    angular.module('app.products').controller('ProductController', ProductController);
    ProductController.$inject = ['$scope', 'uiGridConstants', 'AppService', '$state'];

    function ProductController($scope, uiGridConstants, AppService, $state) {
        var vm = this;
        activate();
        function activate() {
            AppService.setHeight();
            var id = $state.params.id;
            vm.getProductDetail = function()
             { 
                AppService.get('products/'+ id)
                .success(function (data) {
                   
                   vm.productDetail = data.data;
                })
                .error(function(error)
                {   
                    AppService.isAuth(error);

                })
            }

        }
    }
})();

/**=========================================================
 * Module: ProductsController
  =========================================================*/

(function() {
    'use strict';
    angular.module('app.products').controller('ProductsController', ProductsController);
    ProductsController.$inject = ['$rootScope', '$stateParams', '$scope', 'AppService','$state', '$sce', 'Notify', '$uibModal', '$localStorage'];
    function ProductsController($rootScope, $stateParams, $scope, AppService, $state, $sce, Notify, $uibModal, $localStorage) {
        activate();
        function activate() {

            var user = $localStorage.USER;
            if(user) {
                $rootScope.isBasicPlan = user.is_basic_plan;
                $rootScope.toggleOff = !user.inventory_sync_status;
            }
            // if(user.is_free_plan)
            // {
            //     $state.go('app.processing');
            // }
            //intercom event
            AppService.intercomEventAndPing('Clicked Master Catalog');

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.sortType = '';
            $scope.sortReverse  = false;
            $scope.isPreloader = true;
            var table =
            {
                filter_by: 'status',
                filter: '',
            }

           if($stateParams.filter == 'all')
            {
                 $stateParams.filter = 'all';
                $scope.isAll = 'active';
                $scope.isActive = '';
                $scope.isInactive = '';
                table.filter = '';
                $scope.producttable = 'producttable-all';
                $scope.downloadCsvUrl = "products/export/all";
            }
            else if($stateParams.filter == 'inactive')
            {
                $scope.isAll = '';
                $scope.isActive = '';
                $scope.isInactive = 'active';
                table.filter = '0';
                $scope.producttable = 'producttable-inactive';
                $scope.downloadCsvUrl = "products/export/inactive";
            }
            else
            {
                table.filter = '1';
                $scope.isAll = '';
                $scope.isActive = 'active';
                $scope.isInactive = '';
                 $scope.producttable = 'producttable-active';
                $scope.downloadCsvUrl = "products/export/active";
            }
            var dimension = {
                className : 'dimension',
                width: $('.dimension').outerWidth(),
                tableClass: $scope.producttable
            }
            

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getProductData();
            }

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }

            getProductData();
            $scope.paginatedData = function()
            {   
                $("th").remove();
                $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.changePerPage = function()
            {   
                $("th").remove();
                setTimeout(function() {
                    $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
                }, 2);
            }

            function getProductData()
            {
                var sort = $scope.sortReverse === true ? "ASC": "DESC";
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('products?page='+ $scope.page +'&per_page='+ perPage + '&sort_by=' +$scope.sortType +'&sort=' +sort + '&filter=' + table.filter + '&filter_by=' + table.filter_by, true)
                .success(function (data)
                {
                    if(!data.data.length)
                    {
                        $scope.isPreloader = false;
                    }
                    $scope.productList = data.data;
                    $scope.metaData = data.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    AppService.setHeight();

                    $scope.$on('productLists', function(ngRepeatFinishedEvent)
                    {
                        AppService.setWidth(dimension);
                        $scope.isPreloader = false;
                    });
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            };

            $scope.getFilteredData = function(filter)
            {
                table.filter = filter;
                getProductData()
            }

            $scope.productPage = function(data)
            {
                $state.go('app.product', { 'id':data})
            }

            $scope.dynamicPopover =
            {
                templateUrl: 'importfile.html',
            };

            $scope.addProduct = function ()
            {   
                //intercom event
                AppService.intercomEventAndPing('Open Add Product Popup');
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: '/app/views/Products/addProduct.html',
                    controller: 'addProductController',
                    size: 'lg',
                    resolve: {
                        items: function ()
                        {
                         return $scope.items;
                        }
                    }
                });
            }

            $scope.openModal = function()
            {
                $scope.items = {
                    type: 'products'
                };

                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop  : 'static',
                    keyboard  : false,
                    templateUrl: 'importfile.html',
                    controller: 'UploadController',
                    size: 'sm-400',
                    resolve: {
                        items: function ()
                        {
                         return $scope.items;
                        }
                    }
                });
            }

        }

    }
})();

(function() {
    'use strict';
    angular
    .module('app.upload')
    .controller('UploadController', UploadController)

    UploadController.$inject = ['$rootScope', '$state', '$scope', 'AppService', 'Notify','$sce','$uibModalInstance', 'items','$interval', 'SR_CONSTANTS', '$localStorage'];

    function UploadController($rootScope, $state, $scope, AppService, Notify, $sce, $uibModalInstance, items, $interval, SR_CONSTANTS, $localStorage){
        $scope.items = items;
        var stopCheckStatus = '';
        $scope.isUpload = true;
        $scope.waitngMessage = SR_CONSTANTS.alert_messages.uploading;
        var uploadId = '';
        $scope.isWaitingForQueue = false;
        $scope.isPreloader = true;
        $scope.isProcessing = false;
        $scope.isShowError = true;
        $scope.isShowCancel = true;
        $scope.file = {
            upload: ''
        };
        var user = $localStorage.USER;

        AppService.get('settings/international/status', true)
        .success(function(data){
            $scope.isPreloader = false;
            var user = $localStorage.USER;
            user.international_status = data.status;
            $rootScope.isInernationalActivated = data.status == 1;
        })
        .error(function(error){
            AppService.isAuth(error);
        });

        $scope.cancel = cancel;
        $scope.uploadData = uploadData;
        $scope.downloadErrorFile = downloadErrorFile;
        $scope.downloadSampleFile = downloadSampleFile;

        function uploadData(url){
            var eventName = '';
            //intercom event
            if(url == SR_CONSTANTS.api_urls.products_import)
            {
                eventName = SR_CONSTANTS.intercom_events.uploaded_product_sheet;
            }
            else if(url == SR_CONSTANTS.api_urls.listings_import)
            {
                eventName = SR_CONSTANTS.intercom_events.uploaded_listing_sheet;
            }
            else if(url == SR_CONSTANTS.api_urls.inventory_import)
            {
                eventName = SR_CONSTANTS.intercom_events.uploaded_inventory_sheet;
            }
            else if(url == SR_CONSTANTS.api_urls.orders_import)
            {
                eventName = SR_CONSTANTS.intercom_events.uploaded_order_sheet;
            }
            else if(url == SR_CONSTANTS.api_urls.update_ndr_sheet)
            {
               eventName = SR_CONSTANTS.intercom_events.uploaded_ndr_sheet;
            }
            else if(url == SR_CONSTANTS.api_urls.channel_products_import)
            {
               eventName = SR_CONSTANTS.intercom_events.uploaded_channel_products;
            }

            AppService.intercomEventAndPing(eventName);

            var file = $('#fileUpload')[0].files[0];
            if(file == undefined){
                Notify.alert(SR_CONSTANTS.alert_messages.no_file_import,  {status: 'danger'});
                return;
            }

            $scope.isShowError = true;
            $scope.isPreloader = true;
            $scope.isUpload = false;
            $scope.waitingStep = true;

            var formData = new FormData();
            formData.append("file", file);
            AppService.importFile(formData, url)
            .success(function(data){
                $scope.isShowCancel = false;
                uploadId = data.id;
                stopCheckStatus = $interval(checkUploadStatus, 3000);
            })
            .error(function(error){
                $uibModalInstance.dismiss('cancel');
                $scope.isPreloader = false;
                AppService.isAuth(error);
            })

        };

        function cancel(){
           $uibModalInstance.dismiss('cancel');
        };

        function downloadErrorFile(){
            downloadfile('errors/' +uploadId + '/download', 'errorfile', true)
        }

        function downloadSampleFile(url, fileName){
            downloadfile(url, fileName, false);
        }

        function downloadfile(url, fileName, isError){
            $scope.isPreloader = true
            var fileName;
            if(isError){
                fileName = fileName + '.csv';
            }
            else {
                fileName = $('#'+ fileName).data('name');
                fileName = fileName + '.csv';
            }

            AppService.get(url)
            .success(function(data){
                $scope.isPreloader = false;
                if(data.download_url){
                    AppService.downloadDataWithUrl(data.download_url, fileName)
                }else {
                    var blob = new Blob([data], {type: 'text/csv'});
                    var link = document.createElement("a");
                    if (link.download !== undefined) { // feature detection
                        // Browsers that support HTML5 download attribute
                        var url = URL.createObjectURL(blob);
                        link.setAttribute("href", url);
                        link.setAttribute("download", fileName);
                        link.style.visibility = 'hidden';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }
                }
             })
            .error(function(error){
                $scope.isPreloader = false;
                AppService.isAuth(error);
            })
        }

        function checkUploadStatus(){
            AppService.get('errors/' +uploadId + '/check')
            .success(function(data){
                var data = data.data;
                if(data.status == '0'){
                    $scope.waitngMessage = SR_CONSTANTS.alert_messages.waiting_for_queue;
                }
                else if(data.status == '1'){
                    $scope.waitngMessage = SR_CONSTANTS.alert_messages.processing;
                }
                else if(data.status == '2'){
                    $interval.cancel(stopCheckStatus);
                    if(data.errors == '0'){
                        $scope.isPreloader = false;
                        $scope.waitingStep = false;
                        $scope.isShowCancel = true;
                        $uibModalInstance.dismiss('cancel');
                        Notify.alert(SR_CONSTANTS.alert_messages.successfully_uploaded);
                    }
                    else {
                        $scope.errorData = data;
                        $scope.isPreloader = false;
                        $scope.waitingStep = false;
                        $scope.isShowError = false;
                        $scope.isShowCancel = true;
                    }
                    $state.go($state.current, {}, {reload: true});
                }
                else if(data.status == '3') {
                    $interval.cancel(stopCheckStatus);
                    $scope.waitngMessage = data.message;
                    $scope.isPreloader = false;
                    $scope.isShowCancel = true;
                }
            })
            .error(function(error){
                AppService.isAuth(error);
            })
        }
    }
})();

(function() {
    'use strict';
    angular
        .module('app.services')
        .factory('AppService', ['$interval', '$document', '$rootScope', '$http', '$state', '$auth', 'Notify', '$timeout', '$localStorage', '$uibModal', 'SR_CONSTANTS', '$location', '$q',
        function($interval, $document, $rootScope, $http, $state, $auth, Notify, $timeout, $localStorage, $uibModal, SR_CONSTANTS, $location, $q) {
            var token = {
                'Authorization': "Bearer " + $auth.getToken(),
                // 'Content-Type' : 'application/json'
            };

            var isAuth = function(error) {
                if (error === null) {
                    Notify.alert('Please check Your Internet Connectivity', { timeout: null });
                } else if (error.status_code === 503) {
                    delete $localStorage.USER;
                    delete $localStorage.channelErrorShown;
                    $auth.logout();
                    setUserContextForSentry($localStorage, SR_CONSTANTS);
                    $state.go('auth.login', { 'under_maintenance': true });
                } else if (error.status_code === 401) {
                    delete $localStorage.USER;
                    delete $localStorage.channelErrorShown;
                    $auth.logout();
                    setUserContextForSentry($localStorage, SR_CONSTANTS);
                    // console.log($state);
                    var redirect_url = $location.path();
                    var redirect_params = $location.search();
                    if($state.current.name != "auth.mailer" && $state.current.name != "auth.calculator"){
                      $state.go('auth.login', { redirect_url: redirect_url, redirect_params: redirect_params });
                    } else {
                      Notify.alert(error.message);
                    }
                } else if (error.hasOwnProperty('message')) {
                    Notify.alert(error.message);
                }
            };
            var submitCompanyDetail = function(data) {
                return $http.post(SR_CONSTANTS.APIBaseUrl + 'auth/step/company', data, {});
            };

            var getCompanyDetail = function(token) {
                return $http.get(SR_CONSTANTS.APIBaseUrl + 'auth/step/companies', {
                    headers: token
                });
            };

            var GetBaseChannels = function() {
                return $http.get(SR_CONSTANTS.APIBaseUrl + 'channels', {
                    headers: token
                });
            };

            var GetChannelSetting = function() {
                return $http.get(SR_CONSTANTS.APIBaseUrl + 'auth/step/companies', {});
            };

            var get = function($apiBase, $isAuthenticated) {
                getRoleType();
                if ($isAuthenticated == 'undefined') {
                    return $http.get(SR_CONSTANTS.APIBaseUrl + $apiBase, {});
                } else {
                    return $http.get(SR_CONSTANTS.APIBaseUrl + $apiBase, {
                        headers: token,
                        withCredentials:true
                    });
                }
            };

            //Puru Start

            var weightDisputeHistory = function(awbCode, $isAuthenticated) {
                getRoleType();
                var deferred = $q.defer();
                if ($isAuthenticated == 'undefined') {
                    var data = {
                        method: 'GET',
                        url: SR_CONSTANTS.APIBaseUrl + 'weightdispute/history',
                        cache: true,
                        params : {
                            "awb_code" : awbCode
                        }
                    }
                } else {
                    var data = {
                        method: 'GET',
                        url: SR_CONSTANTS.APIBaseUrl + 'weightdispute/history',
                        cache: true,
                        params : {
                            "awb_code" : awbCode
                        },
                        headers: token
                    }
                }

                $http(data)
                .then(function(res) {
                    deferred.resolve({ "data": res.data, "status": res.status })
                });

                return deferred.promise;
            }

            //Puru End

            var get_with_params = function($apiBase, data, $isAuthenticated) {
                getRoleType();
                if ($isAuthenticated == 'undefined') {
                    return $http.get(SR_CONSTANTS.APIBaseUrl + $apiBase, { params: data });
                } else {
                    return $http.get(SR_CONSTANTS.APIBaseUrl + $apiBase, {
                        params: data,
                        headers: token,
                        withCredentials:true
                    });
                }
            };

            var post = function($apiBase, $isAuthenticated, data, isSync) {
                getRoleType('application/json');
                if ($isAuthenticated == 'undefined') {
                    return $http.post(SR_CONSTANTS.APIBaseUrl + $apiBase, data, {});
                } else {
                    return $http.post(SR_CONSTANTS.APIBaseUrl + $apiBase, data, {
                        headers: token,
                        withCredentials:true
                    });
                }
            };

            var patch = function($apiBase, $isAuthenticated, data) {
                getRoleType('application/json');
                if ($isAuthenticated == 'undefined') {
                    return $http.patch(SR_CONSTANTS.APIBaseUrl + $apiBase, data, {});
                } else {
                    return $http.patch(SR_CONSTANTS.APIBaseUrl + $apiBase, data, {
                        headers: token
                    });
                }
            };

            var put = function($apiBase, $isAuthenticated, data) {
                getRoleType('application/json');
                if ($isAuthenticated == 'undefined') {
                    return $http.put(SR_CONSTANTS.APIBaseUrl + $apiBase, data, {});
                } else {
                    return $http.put(SR_CONSTANTS.APIBaseUrl + $apiBase, data, {
                        headers: token
                    });
                }
            };

            var postFormData = function(url, data) {
                getRoleType();
                // token['Content-Type'] = undefined;
                return $http.post(SR_CONSTANTS.APIBaseUrl + url, data, {
                    transformRequest: angular.identity,
                    headers: token
                });
            };

            var importFile = function(data, url) {
                getRoleType();
                return $http.post(SR_CONSTANTS.APIBaseUrl + url, data, {
                    transformRequest: angular.identity,
                    headers: token
                });
            };

            var getPdf = function($apiBase, $isAuthenticated) {
                if ($isAuthenticated == 'undefined') {
                    return $http.get(SR_CONSTANTS.APIBaseUrl + $apiBase, {});
                } else {
                    return $http.get(SR_CONSTANTS.APIBaseUrl + $apiBase, {
                        headers: token,
                        responseType: 'arraybuffer'
                    });
                }
            };

            var getBlob = function($apiBase, $isAuthenticated) {
                if ($isAuthenticated == 'undefined') {
                    return $http.get(SR_CONSTANTS.APIBaseUrl + $apiBase, {});
                } else {
                    return $http.get(SR_CONSTANTS.APIBaseUrl + $apiBase, {
                        headers: token,
                        responseType: 'blob'
                    });
                }
            };

            var getPdfPost = function($apiBase, $isAuthenticated, data) {
                if ($isAuthenticated == 'undefined') {
                    return $http.post(SR_CONSTANTS.APIBaseUrl + $apiBase, data, {
                        headers: token,
                        responseType: 'arraybuffer'
                    });
                } else {
                    return $http.post(SR_CONSTANTS.APIBaseUrl + $apiBase, data, {
                        headers: token,
                        responseType: 'arraybuffer'
                    });
                }

            };

            var alertValidation = function(errorObj, isCompanyPage) {
                var keyArry = Object.keys(errorObj);
                var length = keyArry.length;
                //angular.element('.validation-alert').remove();
                for (var i = 0; i < length; i++) {
                    if(Array.isArray(errorObj[keyArry[i]])){
                        var errorHtml = '<div class="help-block validation-alert">' + errorObj[keyArry[i]][0] + '</div>';
                    }
                    else{
                        var errorHtml = '<div class="help-block validation-alert">' + errorObj[keyArry[i]] + '</div>';
                    }

                    $("input[name='" + keyArry[i] + "']").closest('.error-append').after(errorHtml);
                    $("input[name='" + keyArry[i] + "']").addClass('ng-invalid').removeClass('ng-valid');

                    $("select[name='" + keyArry[i] + "']").closest('.error-append').after(errorHtml);
                    $("select[name='" + keyArry[i] + "']").addClass('ng-invalid').removeClass('ng-valid');

                    if (isCompanyPage) {
                        $("input[name='" + keyArry[i] + "']").addClass('red-border');
                    }
                }
            };

            $rootScope.tablewidth = false;
            var windowW = $(window).width();
            var setHeight = function() {
                var totalWidth = 0;
                $('.fixed-table thead th').each(function(index) {
                    totalWidth += parseInt($(this).outerWidth(), 10);
                });
                if (windowW >= 1000) {
                    // setTimeout(function() {
                    var windowh = $(window).height();
                    var navh = $(".navbar").outerHeight();
                    var headereh = $(".header-wrapper").outerHeight();
                    var actionbtnh = $(".panel-heading").outerHeight();
                    actionbtnh = actionbtnh > 0 ? actionbtnh : 0;
                    var tableheadh = $(".fixed-table > thead, .report-table > thead").outerHeight();
                    var footerh = $(".panel-footer").outerHeight();
                    var other = $(".company-info").outerHeight();
                    other = typeof other == null || 'undefined' ? 0 : other;
                    var divh = windowh - (navh + headereh + actionbtnh + footerh + tableheadh + other);
                    if ($(".table").hasClass("report-table")) {
                        divh = divh - 12;
                    }

                    if(totalWidth > (windowW-70)){
                        divh -= 17;
                    } else {
                        divh -= 0;
                    }
                    $rootScope.tablewidth = divh;
                    $(".fixed-table > tbody, .report-table > tbody").css("height", divh + 'px');
                }
            };
            var setWidth = function() {
                var argumentsObj = arguments;
                // var tableW = $('.'+argumentsObj[0].tableClass).width();
                var totalWidth = 0;
                $('.'+argumentsObj[0].tableClass + ' thead th').each(function(index) {
                    totalWidth += parseInt($(this).outerWidth(), 10);
                });
                var widthToSubtract = 0;
                if(totalWidth < (windowW-70)) {
                    for (var i = 0; i < argumentsObj.length; i++) {
                        $('.' + argumentsObj[i].className).width(argumentsObj[i].width);
                        widthToSubtract += argumentsObj[i].width;
                    };
                    var totalTableColum = $('.' + argumentsObj[0].tableClass + ' thead th').length - $('.' + argumentsObj[0].tableClass + ' thead th.ng-hide').length;
                    var tablecolumn = $('.' + argumentsObj[0].tableClass + ' thead th').length - $('.' + argumentsObj[0].tableClass + ' thead th.ng-hide').length - argumentsObj.length;
                    var checkboxWidth = 30;
                    if ($('.' + argumentsObj[0].tableClass + ' thead th').children().hasClass('checkbox')) {
                        tablecolumn--;
                        checkboxWidth = 45;
                        var tablew = $('.' + argumentsObj[0].tableClass).parent().width() - widthToSubtract - checkboxWidth - totalTableColum * 21;
                        var tablecolumnWidth = tablew / tablecolumn;
                    } else {
                        var tablew = $('.' + argumentsObj[0].tableClass).parent().width() - widthToSubtract - checkboxWidth- totalTableColum * 21;
                        var tablecolumnWidth = tablew / tablecolumn;
                    }

                    $('.' + argumentsObj[0].tableClass + ' thead th').each(function() {
                        totalWidth += parseInt($(this).outerWidth(), 10);
                        if (!$(this).attr('check-all') && !$(this).children().hasClass('orderdate') && !$(this).children().hasClass('fixedcol1') && !$(this).children().hasClass('fixedcol2') && !$(this).children().hasClass('fixedcol3') && !$(this).children().hasClass('charged-weight') && !$(this).children().hasClass('entered-weight') && !$(this).children().hasClass('action') && !$(this).children().hasClass('ordersla') && !$(this).children().hasClass('dimension') && !$(this).children().hasClass('ordershippingdetails') && !$(this).children().hasClass('status') && !$(this).children().hasClass('totalqty') && !$(this).children().hasClass('description') && !$(this).children().hasClass('billid') && !$(this).children().hasClass('statmemtbalance') && !$(this).children().hasClass('statementbalance') && !$(this).children().hasClass('orderid')) {
                            //$(this).children().css('width', +tablecolumnWidth-21 +'px');
                            $(this).children().css('width', +tablecolumnWidth + 'px');
                        }
                    });

                    $('.' + argumentsObj[0].tableClass + ' tbody td').each(function() {
                        if (!$(this).children().hasClass('checkbox') && !$(this).children().hasClass('orderdate') && !$(this).children().hasClass('fixedcol1') && !$(this).children().hasClass('fixedcol2') && !$(this).children().hasClass('fixedcol3') && !$(this).children().hasClass('action') && !$(this).children().hasClass('ordersla') && !$(this).children().hasClass('dimension') && !$(this).children().hasClass('ordershippingdetails') && !$(this).children().hasClass('status') && !$(this).children().hasClass('totalqty') && !$(this).children().hasClass('description') && !$(this).children().hasClass('billid') && !$(this).children().hasClass('statmemtbalance') && !$(this).children().hasClass('statementbalance') && !$(this).children().hasClass('orderid') && !$(this).children().hasClass('dimension_inner') && !$(this).children().hasClass('charged-weight') && !$(this).children().hasClass('entered-weight')) {
                            //$(this).children().css('width', +tablecolumnWidth-21 +'px');
                            $(this).children().css('width', +tablecolumnWidth + 'px');
                        }
                    });
                    if(totalWidth > (windowW-70)) {
                      if($rootScope.tablewidth){
                        $(".fixed-table > tbody, .report-table > tbody").css("height", ($rootScope.tablewidth - 17) + 'px');
                      }
                      $('.'+argumentsObj[0].tableClass).css('display','table');
                    }
                } else {
                    $('.'+argumentsObj[0].tableClass).css('display','table');
                }
            };

            var getCourierList = function(data) {
                return $http.get(SR_CONSTANTS.APIBaseUrl + 'courier/serviceability/' + data.pickup_code + "/" + data.delivery_code + '/' + data.cod, {
                    headers: token,
                });
            };

            var deleteData = function($apiBase, $isAuthenticated, data) {
                if ($isAuthenticated == 'undefined') {
                    return $http.delete(SR_CONSTANTS.APIBaseUrl + $apiBase, data, {});
                } else {
                    return $http.delete(SR_CONSTANTS.APIBaseUrl + $apiBase, data, {
                        headers: token
                    });
                }
            };

            var dynamicTable = function(reportData) {
                var tableHtml = '';
                if (reportData == '') {
                    return tableHtml;
                }
                var length = reportData.length;
                var orderProperty = Object.keys(reportData[0]);
                var orderPropertyLength = orderProperty.length;
                for (var j = 0; j < orderPropertyLength; j++) {
                    if (j == 0) {
                        tableHtml += '<thead>' +
                            '<tr>'
                    }

                    tableHtml += '<th href="#">' +
                        '<div style="width:120px;">' +
                        orderProperty[j].replace((/_/g), " ")

                    +
                    '</div>' +
                    '</th>';

                    if (j == orderPropertyLength) {
                        tableHtml += '</tr>' +
                            ' </thead>'
                    }
                }

                tableHtml += '<tbody>'
                for (var i = 0; i < length; i++) {
                    tableHtml += //'<tbody>'+
                        '<tr class="br">'
                    for (var j = 0; j < orderPropertyLength; j++) {

                        tableHtml +=

                            '<td>' +
                            '<div style="width:120px;">' +
                            reportData[i][orderProperty[j]] +
                            '</div>' +
                            '</td>'

                    }
                    tableHtml += '</tr>'
                        //'</tbody>'
                }
                tableHtml += '</tbody>'
                return tableHtml;
            };

            var getRoleType = function(contentType) {
                token['Role-Type'] = typeof $localStorage.USER != 'undefined' ? $localStorage.USER.role_type : '';
                token['Content-Type'] = typeof contentType == 'undefined' ? undefined : contentType;
            };

            var dynamicFilters = function(data) {
                var filterHtml = '';
                var length = data.length;
                for (var i = 0; i < length; i++) {
                    if (data[i].type == 'text') {
                        filterHtml += '<div class="col-md-2">' +
                            '<p class="input-group m0 w-100">' +
                            '<input type="text" ng-model="' + data[i].field + '" ng-change="searchBy( ' + data[i].field + ')" placeholder="' + data[i].field.replace((/_/g), " ") + '" class="text-capitalize form-control input-sm ng-pristine ng-valid ng-empty ng-touched ' + data[i].field + '">' +
                            '<span class="input-group-btn">' +
                            '</span>' +
                            '</p>' +
                            '</div>'
                    } else if (data[i].type == 'dropdown') {
                        //Purujit Edited
                        var ddText = data[i].field.replace(/\_/g, ' ');
                        filterHtml += '<div class="col-md-2 pr0">' +
                            '<select ng-model="' + data[i].field + '" ng-change="selectFilter()" class="text-capitalize form-control input-sm ng-pristine ng-valid ng-empty ng-touched ' + data[i].field + '">' +
                            '<option Selected="selected" value=""> Select ' + ddText + '</option>'
                        var dataValue = data[i].values;

                        if (Array.isArray(data[i].values)) {
                            var dataLength = data[i].values.length;
                            for (var j = 0; j < dataLength; j++) {
                                var key = Object.keys(dataValue[j]);
                                key = key[0];
                                filterHtml += '<option value="' + dataValue[j] + '"> ' + dataValue[j] + ' </option>'
                            }
                        } else {
                            for (var key in dataValue) {
                                if (dataValue.hasOwnProperty(key)) {
                                    filterHtml += '<option value="' + key + '"> ' + dataValue[key] + ' </option>'
                                }
                            }
                        }

                        filterHtml += '</select>' +
                            '</div>'
                    }
                }

                return filterHtml;

            };

            var count = '';
            var timeTohit = '';
            var intercomEventAndPing = function(message) {
                Intercom('trackEvent', message);
            };
            var downloadDataWithUrl = function(url, filename) {
                // Construct the a element
                if (!url) {
                    return;
                }
                var link = document.createElement("a");
                link.download = filename;
                // link.target = "_blank";
                // Construct the uri
                link.href = url;
                document.body.appendChild(link);
                // console.log(link)
                link.click();
                // Cleanup the DOM
                document.body.removeChild(link);
                // delete link;
            };

            var downloadBlob = function(data, filename){
              if (!data) {
                  return;
              }
              var link = document.createElement("a");
              var objUrl = URL.createObjectURL(data)
              link.download = filename;
              // link.target = "_blank";
              // Construct the uri
              link.href = objUrl;
              document.body.appendChild(link);
              // console.log(link)
              link.click();
              // Cleanup the DOM
              document.body.removeChild(link);
            }

            var openAssignAwbPopup = function(data) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop: 'static',
                    keyboard: false,
                    templateUrl: 'orderLabelled.html',
                    controller: 'asssignedLabelController',
                    size: 'sm-400',
                    resolve: {
                        items: function() {
                            return data;
                        }
                    }
                });
            };

            var openCodReconModal = function(data) {
                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop: 'static',
                    keyboard: false,
                    templateUrl: 'codRecon.html',
                    controller: 'codReconController',
                    size: 'md',
                    resolve: {
                        items: function() {
                            return data;
                        }
                    }
                }).result.catch(function(){
                    $state.reload();
                });
            };

            var applyTableFilter = function(data) {
                var filters = ['payment_method', 'channel_id', 'courier_id', 'shipment_status','order_status', 'search', 'from', 'to', 'page', 'per_page','pickup_address_id','order_id'];
                var currentFilters = $location.search();

                _.forEach(filters, function(value) {
                    if (angular.isDefined(data[value])) {
                        if (data[value] != null) {
                            currentFilters[value] = data[value];
                        } else if (data[value] == null) {
                            if (angular.isDefined(currentFilters[value])) {
                                delete currentFilters[value];
                            }
                        }
                    }
                });

                $location.search(currentFilters);
            };

            var downloadPdf = function(url, filename) {
                // Construct the a element
                if (!url) {
                    return;
                }
                var link = document.createElement("a");
                link.download = filename;
                link.target = "_blank";
                // Construct the uri
                link.href = 'data:application/octet-stream;base64,'+url;
                document.body.appendChild(link);
                link.click();
                // Cleanup the DOM
                document.body.removeChild(link);
                // delete link;
            };

            var showDisputePopup = function()
            {
                $http.get(SR_CONSTANTS.APIBaseUrl + SR_CONSTANTS.api_urls.check_weight_dispute, {
                        headers: token
                })
                .success(function(data) {
                    if(data.discrepancy_exists === 1) {
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: 'app/views/modals/disputed_check.html',
                            controller: 'weightDiscrepancyConfirmationController',
                            backdrop  : 'static',
                            size: 'md',
                            resolve: {
                                items: function() {
                                    return '';
                                }
                            }
                        })
                    }
                })
                .error(function(error) {
                    Notify.alert(error.message);
                });
            };

            return {
                isAuth: isAuth,
                submitCompanyDetail: submitCompanyDetail,
                getCompanyDetail: getCompanyDetail,
                GetBaseChannels: GetBaseChannels,
                GetChannelSetting: GetChannelSetting,
                get: get,
                get_with_params: get_with_params,
                post: post,
                patch: patch,
                put: put,
                postFormData: postFormData,
                importFile: importFile,
                getPdf: getPdf,
                getBlob: getBlob,
                getPdfPost: getPdfPost,
                alertValidation: alertValidation,
                setHeight: setHeight,
                setWidth: setWidth,
                getCourierList: getCourierList,
                deleteData: deleteData,
                dynamicTable: dynamicTable,
                dynamicFilters: dynamicFilters,
                intercomEventAndPing: intercomEventAndPing,
                downloadDataWithUrl: downloadDataWithUrl,
                openAssignAwbPopup: openAssignAwbPopup,
                openCodReconModal: openCodReconModal,
                applyTableFilter: applyTableFilter,
                downloadPdf : downloadPdf,
                downloadBlob : downloadBlob,
                weightDisputeHistory : weightDisputeHistory,
                showDisputePopup : showDisputePopup
            }

        }
    ])

})();

(function () {
  'use strict';
  angular
  .module('app.services')
  .directive('onFinishRender', ["$timeout", function ($timeout){
    return {
      restrict: 'A',
      link: function (scope, element, attr) {
          if (scope.$last === true) {
            var eventname = attr.eventname ? attr.eventname : 'ngRepeatFinished'
            $timeout(function () {
              scope.$emit(eventname);
              if(!!attr.onFinishRender){
                $parse(attr.onFinishRender)(scope);
              }
            }, 100);
          }
        }
    }
  }])
})();

(function () {
    'use strict';
    angular
    .module('app.services')
    .factory('ga_service', ['$localStorage', '$cookies',

    function($localStorage, $cookies){
      var source = $cookies.get('UTM') != undefined ? ($cookies.getObject('UTM').utm_source ? $cookies.getObject('UTM').utm_source : '') : ''; 
    	function send_with_value(eventCategory, eventAction, eventValue){
    		ga('send', 'event', {
                    eventCategory: eventCategory,
                    eventAction: eventAction,
                    eventLabel: $localStorage.USER.email,
                    eventValue: eventValue
                  });
            gtag('event', eventAction, {
                                        'event_category' : eventCategory,
                                        'value': eventValue
                                        });
    	}

    	function send(eventCategory, eventAction, eventLabel){
    		ga('send', 'event', {
                    eventCategory: eventCategory,
                    eventAction: eventAction,
                    eventLabel: eventLabel ? eventLabel : source
                  });
    	}

        function send_with_newEmail(eventCategory, eventAction, eventValue){
            ga('send', 'event', {
                    eventCategory: eventCategory,
                    eventAction: eventAction,
                    eventLabel: eventValue
                  });
            gtag('event', eventAction, {
                                        'event_category' : eventCategory,
                                        'event_label': eventValue
                                        });
        }

        function send_ecommerce_data(txn_id,amount){ //upon successful plan change
            //load the ecommerce plugin
            ga('require', 'ecommerce');

            ga('ecommerce:addTransaction', {
              'id': txn_id,                 
              'affiliation': $localStorage.USER.company_name,
              'revenue': amount,
              'currency' : 'INR'
            });

            var plan_id = $localStorage.USER.plan_id;

            ga('ecommerce:addItem', {
              'id': txn_id,
              'name' : plan_id.toString(),
              'quantity': 1,
              'currency' : 'INR'
            });

            //sending data
            ga('ecommerce:send');
        }

    	return {
	    	send: send,
	    	send_with_value: send_with_value,
        send_with_newEmail : send_with_newEmail,
        send_ecommerce_data : send_ecommerce_data
	    }
    }])

 })();

// (function() {
// 'use strict';
//
//   angular
//   .module('app.services')
//
// }());

(function () {
    'use strict';
    angular.module('app.setting').controller('InternationalProcessFlowController', InternationalProcessFlowController);

    InternationalProcessFlowController.$inject = ['$rootScope', '$scope', '$stateParams', '$state', 'SR_CONSTANTS', 'Notify', 'AppService', '$localStorage', '$uibModal', 'appConstant'];
    function InternationalProcessFlowController($rootScope, $scope, $stateParams, $state, SR_CONSTANTS, Notify, AppService, $localStorage, $uibModal, appConstant) {

        var user = $localStorage.USER;
        if(typeof user !== 'undefined'){
            $rootScope.isBasicPlan = user.is_basic_plan;
            $rootScope.isInernationalActivated = user.international_status == 1;
            $rootScope.international_plans = _.indexOf(appConstant.internationalPlans, user.plan_id) > -1 ;
            // $rootScope.international_plans = (user.plan_id == 4) || (user.plan_id == 3);
            if(user.is_free_plan)
            {
                $scope.isFreePlan = true;
                $rootScope.isRestrictFreePlan = true;
            }
            if(user.international_documents_uploaded && $stateParams.skip_allowed && $rootScope.international_plans){
                $state.go('app.international_details');
            }
            if($rootScope.international_plans){
                AppService.get("courier/international/serviceability?check_pickup="+ true, true)
                    .success(function (data) {
                        $scope.loading = false;
                        if(data.redirect_to_settings){
                            $state.go('app.companyAddressDetails');
                        }
                        if(data.is_serviceable){
                            $scope.upload_documents_available = true;
                        }else if(data.status == "404"){
                            Notify.alert(data.message);
                        }else{
                            var modalInstance = $uibModal.open({
                                animation: true,
                                templateUrl: 'app/views/modals/non-servicable-pincode.html',
                                controller: 'genericModalController',
                                size: 'md',
                                backdrop: 'static'
                            })
                        }
                    })
                    .error(function (error) {
                        $scope.isPreloader = false;
                        AppService.isAuth(error);
                    });
            }
        }

        function activate_plan_upgrade() {

            AppService.get('settings/plans/all', true)
                .success(function (data) {
                    var activePlanID = data.data.find(isActive);
                    $scope.adv_plan = _.find(data.data, function(o) { return o.id === 3; });
                    $scope.pro_plan = _.find(data.data, function(o) { return o.id === 4; });
                    $scope.planData = [$scope.adv_plan, $scope.pro_plan];

                    $scope.activePlanScore = activePlanID.id;
                    $scope.isProPlus = $scope.activePlanScore == 5;
                })
                .error(function (error) {
                    AppService.isAuth(error);
                });

            $scope.updatePlan = function (id, planName, price, plan) {
                var items =
                    {
                        id: id,
                        is_active: $scope.activePlanScore,
                        planName: planName,
                        price: price,
                        plans: plan
                    };

                AppService.intercomEventAndPing('upgardePlan Clicked');

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'upgradeplan.html',
                    controller: 'updatePlanController',
                    size: 'recharge',
                    resolve: {
                        items: function () {
                            return items;
                        }
                    }
                });
            };

            $scope.selfUpdateModal = function (id, planName, price, plan) {
                if ($scope.activePlanScore != 1) {  //id of current plan  is not of that of lite plan
                    $scope.updatePlan(id, planName, price, plan);
                } else {
                    var items =
                        {
                            id: id,
                            is_active: $scope.activePlanID,
                            planName: planName,
                            price: price,
                            plans: plan
                        };

                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: 'app/views/modals/selfUpdgradePlan.html',
                        controller: 'updatePlanController',
                        size: 'recharge',
                        resolve: {
                            items: function () {
                                return items;
                            }
                        }
                    });
                }
            };

            function isActive(plan) {
                if (plan.is_active) {
                    return plan.id;
                }
            }
        }

        if(!$rootScope.international_plans){
            activate_plan_upgrade();
        }

        $scope.upload_documents_available = false;
        $scope.loading = true;
        $scope.isPreloader = false;

        $scope.upgrade_for_international = function(){
            $scope.isPreloader = true;

            AppService.get("courier/international/serviceability?check_pickup="+ true, true)
                .success(function (data) {
                    $scope.isPreloader = false;
                    $scope.loading = false;
                    if(data.redirect_to_settings){
                        $state.go('app.companyAddressDetails');
                    }
                    if(data.is_serviceable){
                        $state.go('app.user_plandetails')
                    }else if(data.status == "404"){
                        Notify.alert(data.message);
                    }else{
                        var modalInstance = $uibModal.open({
                            animation: true,
                            templateUrl: 'app/views/modals/non-servicable-pincode.html',
                            controller: 'genericModalController',
                            size: 'md',
                            backdrop: 'static'
                        })
                    }
                })
                .error(function (error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                });
        };


    }
})();




(function () {
    'use strict';
    angular.module('app.setting').controller('InternationalActivateCouriersController', InternationalActivateCouriersController);

    InternationalActivateCouriersController.$inject = ['$rootScope', '$scope', '$http', '$stateParams', '$state', 'SR_CONSTANTS', 'Notify', 'AppService', '$localStorage', '$uibModal', 'ga_service'];
    function InternationalActivateCouriersController($rootScope, $scope, $http, $stateParams, $state, SR_CONSTANTS, Notify, AppService, $localStorage, $uibModal, ga_service) {

        $scope.search_type = 0;
        $scope.couriers = [];
        $scope.selectedCompany = {};
        $scope.loader = [];



        // $scope.emailPattern = (function() {
        //     var regexp = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        //     return {
        //         test: function(value) {
        //             if( $scope.search_type === 0 ) {
        //                 return true;
        //             }
        //             return regexp.test(value);
        //         }
        //     };
        // })();

        function updateStatus(index, data){
            AppService.patch("admin/" + $scope.selectedCompany.company_id + "/couriers", true, data)
                .success(function (data) {
                    $scope.isPreloader = false;
                    $scope.couriers[index] = data;
                    $scope.loader[index] = false;

                })
                .error(function (error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                });
        }

        $scope.acceptCourier = function(index, courier_status_id){
            $scope.loader[index] = true;
            var data = {
                id: courier_status_id,
                status: 1
            };
            updateStatus(index, data);
        };

        $scope.rejectCourier = function(index, courier_status_id){
            $scope.loader[index] = true;
            var data = {
                id: courier_status_id,
                status: 3
            };
            updateStatus(index, data);
        };

        $scope.onSelect = function($item, $model, $label){
            $scope.isPreloader = true;
            $scope.selectedCompany = $item;
            AppService.get("admin/" + $item.company_id + "/couriers", true)
                .success(function (data) {
                    $scope.isPreloader = false;
                    $scope.couriers = data;
                })
                .error(function (error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                });
        };


        $scope.getCompany = function (value) {
            var url = '';
            $scope.couriers = [];
            if($scope.search_type == 0){
                url = 'admin/company/search?company_name='+value;
            }else{
                url = 'admin/company/search?user_email='+value;
            }
            return $http.get(SR_CONSTANTS.APIBaseUrl + url).then(function(response){
                return response.data.users;
            });
        };


    }
})();

(function () {
    'use strict';
    angular.module('app.setting').controller('InternationalCouriersController', InternationalCouriersController);

    InternationalCouriersController.$inject = ['$rootScope', '$scope', '$stateParams', '$state', 'SR_CONSTANTS', 'appConstant', 'AppService', '$localStorage', '$uibModal', 'ga_service'];
    function InternationalCouriersController($rootScope, $scope, $stateParams, $state, SR_CONSTANTS, appConstant, AppService, $localStorage, $uibModal, ga_service) {

        var user = $localStorage.USER;
        if(user){
            $rootScope.international_plans = _.indexOf(appConstant.internationalPlans, user.plan_id) > -1 ;
            // $rootScope.international_plans = (user.plan_id == 4) || (user.plan_id == 3);
            if(!$rootScope.international_plans){
                $state.go("app.international");
            }
            $rootScope.isBasicPlan = user.is_basic_plan;
            $rootScope.isInernationalActivated = user.international_status == 1;
            if(user.is_free_plan)
            {
                $scope.isFreePlan = true;
                $rootScope.isRestrictFreePlan = true;
            }
        }

        $scope.isPreloader = true;

        AppService.get("courier/international/statuses", true)
            .success(function (data) {
               $scope.courier_companies = data;
            })
            .error(function (error) {
                $scope.isPreloader = false;
                AppService.isAuth(error);
            });

        $scope.show_credentials_modal = function(courier){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'app/views/modals/international_parameters.html',
                controller: 'IntDetailsModal',
                size: 'md',
                resolve: {
                    items: function () {
                        return {
                            is_settings_page: false,
                            courier: courier
                        }
                    }
                }
            });
        };
    }
})();

(function () {
    'use strict';
    angular.module('app.setting').controller('InternationalDetailsController', InternationalDetailsController);

    InternationalDetailsController.$inject = ['$rootScope', '$scope', '$stateParams', '$state', 'appConstant', 'Notify', 'AppService', '$localStorage', '$uibModal', 'ga_service', '$window'];
    function InternationalDetailsController($rootScope, $scope, $stateParams, $state, appConstant, Notify, AppService, $localStorage, $uibModal, ga_service, $window) {

        var user = $localStorage.USER;
        if(typeof user !== 'undefined'){
            $rootScope.international_plans = _.indexOf(appConstant.internationalPlans, user.plan_id) > -1 ;
            // $rootScope.international_plans = (user.plan_id == 4) || (user.plan_id == 3);
            if(!$rootScope.international_plans){
                $state.go("app.international");
            }
            $rootScope.isBasicPlan = user.is_basic_plan;
            $rootScope.isInernationalActivated = user.international_status == 1;
            if(user.is_free_plan)
            {
                $scope.isFreePlan = true;
                $rootScope.isRestrictFreePlan = true;
            }
        }
        $scope.active_state = $state.current.name == 'app.international_details';
        $scope.is_editable = false;
        $scope.no_ad_code_but_file = false;
        $scope.isPreloader = true;
        $scope.display_download_files = false;
        $scope.international_form = {};
        $scope.organization = {};
        $scope.company = {};
        $scope.first_dropdown = {};
        $scope.second_dropdown = {};
        $scope.document = {
            first: {},
            second: {}
        };
        $scope.no_file = [];



        $scope.show_document_modal = function (document, document_collection) {
            var modalInstance = $uibModal.open({
                animation: true,
                backdrop  : 'static',
                keyboard  : false,
                templateUrl: 'app/views/modals/document_modal.html',
                controller: 'documentModalController',
                size: 'md',
                resolve: {
                    items: function ()
                    {
                        return {
                            document: document,
                            isEditable: $scope.is_editable
                        };
                    }
                }
            }).result.then(function(data){
                if(data === 'document_deleted'){
                    _.remove(document_collection, document);
                };
            });

        };


        $scope.submit_international_form = function(form){
            $scope.isPreloader = true;
            var is_error = false;
            $scope.no_file = [false, false, false, false];
            form.$setSubmitted();
            if($scope.international_details.iec_code.documents.length == 0){
                $scope.no_file[0] = true;
                is_error = true;
            }
            if($scope.international_details.ad_code.value && $scope.international_details.ad_code.documents.length == 0){
                $scope.no_file[1] = true;
                is_error = true;
            }
            if(!$scope.international_details.ad_code.value && $scope.international_details.ad_code.documents.length > 0){
                $scope.no_ad_code_but_file = true;
                is_error = true;
            }
            if($scope.international_details.dropdowns[0].documents.length == 0 ){
                $scope.no_file[2] = true;
                is_error = true;
            }
            if($scope.international_details.dropdowns[1].documents.length == 0 ){
                $scope.no_file[3] = true;
                is_error = true;
            }
            if(is_error){
                $scope.isPreloader = false;
                return;
            }

            var data = {
                page: "international",
                document_type_id: [$scope.document.first.value, $scope.document.second.value],
                ad_code: $scope.international_details.ad_code.value,
                // ad_code_document: $scope.international_details.ad_code.url,
                iec_code: $scope.international_details.iec_code.value,
                // iec_code_document: $scope.international_details.iec_code.url,
                organization_type: $scope.organization.selected.organization_id
            };

            AppService.post('settings/company', true , data)
                .success(function(data)
                {
                    Notify.alert("Details have been saved.");
                    $scope.isPreloader = false;
                    $scope.is_editable = false;
                    $scope.display_download_files = true;
                    var user = $localStorage.USER;
                    user.international_documents_uploaded = true;
                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                })

        };

        $scope.download_all = function(){
            $scope.isPreloader = true;
            AppService.get('settings/international/document/download', true)
                .success(function(data)
                {
                    $scope.isPreloader = false;
                    AppService.downloadDataWithUrl(data.file_url, 'all_documents.zip');

                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                })

        };

        $scope.pathinfo = function (filename) {
            var a = filename.split(".");
            if( a.length === 1 || ( a[0] === "" && a.length === 2 ) ) {
                return "";
            }
            return a.pop();
        };

        $scope.uploadDocument = function(file, document_id, document_type_id)
        {
            $scope.isPreloader = true;

            var formData = new FormData();
            formData.append("file", file === undefined ? '': file);
            formData.append("document_id", document_id );
            formData.append("document_type_id", document_type_id );
            formData.append("organization_id", $scope.organization.selected.organization_id );

            AppService.postFormData('settings/international/document/upload', formData , true)
                .success(function(data)
                {
                    var document = {
                        url: data.document_url,
                        document_log_id: data.id
                    }
                    if(document_id == 25){
                        $scope.international_details.iec_code.documents.push(document);
                    }else if(document_id == 26){
                        $scope.international_details.ad_code.documents.push(document);
                    }else if(document_id == $scope.document.first.value){
                        if(!$scope.international_details.dropdowns[0].documents[0]){
                            $scope.international_details.dropdowns[0]={
                                documents: [document]
                            }
                        }else{
                            $scope.international_details.dropdowns[0].documents.push(document)
                        }
                    }else if(document_id == $scope.document.second.value){
                        if(!$scope.international_details.dropdowns[1].documents[0]){
                            $scope.international_details.dropdowns[1]={
                                documents: [document]
                            }
                        }else{
                            $scope.international_details.dropdowns[1].documents.push(document)
                        }
                    }
                    $scope.isPreloader = false;

                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                })
        };

        $scope.organization_changed = function(){
            $scope.organization.selected = _.find($scope.organizations, function(obj) {
                return obj.organization_id == $scope.organization.id;
            });

            if($scope.organization.selected.dropdowns.length === 1){
                $scope.first_dropdown  =  angular.copy($scope.organization.selected.dropdowns[0]);
                $scope.second_dropdown =  angular.copy($scope.organization.selected.dropdowns[0]);
                _.remove($scope.second_dropdown.document_types, function(currentObject) {
                    return currentObject.value === 1;
                });
                _.remove($scope.first_dropdown.document_types, function(currentObject) {
                    return currentObject.value === 2;
                });
                $scope.second_dropdown.dropdown_id = 2;
            }else{
                $scope.first_dropdown  =  angular.copy($scope.organization.selected.dropdowns[0]);
                $scope.second_dropdown =  angular.copy($scope.organization.selected.dropdowns[1]);
            }
            
            $scope.document.first.value = $scope.first_dropdown.document_types[0].value;
            $scope.document.second.value = $scope.second_dropdown.document_types[0].value;
        };

        $scope.document_changed = function(is_first_dropdown){
            if($scope.organization.selected.dropdowns.length === 1){
                if(is_first_dropdown){
                    $scope.second_dropdown =  angular.copy($scope.organization.selected.dropdowns[0]);
                    _.remove($scope.second_dropdown.document_types, function(currentObject) {
                        return currentObject.value === $scope.document.first.value;
                    });
                }else{
                    $scope.first_dropdown  =  angular.copy($scope.organization.selected.dropdowns[0]);
                    _.remove($scope.first_dropdown.document_types, function(currentObject) {
                        return currentObject.value === $scope.document.second.value;
                    });
                }
                $scope.second_dropdown.dropdown_id = 2;
            }
        };

        AppService.get("settings/international/document/types ", true)
            .success(function (data) {
                $scope.organizations = data;
                AppService.get("settings/company", true)
                    .success(function (data) {
                        $scope.international_details = data.data.international;


                        if($scope.international_details.dropdowns.length == 0){
                            $scope.international_details.dropdowns[0] ={
                                display_name: "",
                                documents:[],
                                name: "",
                                value: ""
                            };
                            $scope.international_details.dropdowns[1] = {
                                display_name: "",
                                documents:[],
                                name: "",
                                value: ""
                            };
                        }else if($scope.international_details.dropdowns.length == 1){
                            $scope.international_details.dropdowns[1] = {
                                display_name: "",
                                documents:[],
                                name: "",
                                value: ""
                            };
                        }

                        if(!$scope.international_details.organization_type.id){
                            $scope.display_download_files = false;
                            $scope.organization.id = $scope.organizations[0].organization_id;
                            $scope.organization_changed();
                            $scope.is_editable = true;
                        }else{
                            $scope.organization.id = $scope.international_details.organization_type.id;
                            $scope.organization.selected = _.find($scope.organizations, function(obj) {
                                return obj.organization_id == $scope.international_details.organization_type.id;
                            });

                            if($scope.organization.selected.dropdowns.length === 1){
                                $scope.first_dropdown  =  angular.copy($scope.organization.selected.dropdowns[0]);
                                $scope.second_dropdown =  angular.copy($scope.organization.selected.dropdowns[0]);
                                $scope.second_dropdown.dropdown_id = 2;
                            }else{
                                $scope.first_dropdown  =  angular.copy($scope.organization.selected.dropdowns[0]);
                                $scope.second_dropdown =  angular.copy($scope.organization.selected.dropdowns[1]);
                            }

                            $scope.document.first.value = $scope.international_details.dropdowns[0].value;
                            $scope.document.second.value = $scope.international_details.dropdowns[1].value;

                            // $scope.international_details.dropdowns[0].documents = [];
                            // $scope.international_details.dropdowns[1].documents = [];

                            $scope.display_download_files = true;
                            $scope.is_editable = false;
                        }
                        $scope.isPreloader = false;
                    })
                    .error(function (error) {
                        $scope.isPreloader = false;
                        AppService.isAuth(error);
                    });

            })
            .error(function (error) {
                $scope.isPreloader = false;
                AppService.isAuth(error);
            });
    }
})();

(function () {
    'use strict';
    angular.module('app.setting').controller('MasterCatalogSettingsController', MasterCatalogSettingsController);

    MasterCatalogSettingsController.$inject = ['$rootScope', '$scope', '$stateParams', '$state', 'SR_CONSTANTS', 'Notify', 'AppService', '$localStorage', '$uibModal', 'ga_service'];
    function MasterCatalogSettingsController($rootScope, $scope, $stateParams, $state, SR_CONSTANTS, Notify, AppService, $localStorage, $uibModal, ga_service) {

        $scope.isPreloader = true;
        // $scope.inventoryToggle = undefined;
        $scope.last_changed_at = "";
        $scope.is_toggle_used = "";
        AppService.intercomEventAndPing(SR_CONSTANTS.intercom_events.manage_catalog_clicked);
        ga_service.send('manage catalog', 'manage_catalog_clicked');

        function get_inventory_sync(status) {
            AppService.get(SR_CONSTANTS.api_urls.get_inventory_sync_status, true)
                .success(function (data) {
                    $scope.inventoryToggle = angular.isDefined(status)? status: (data.inventory_sync_status === 1);
                    $scope.last_changed_at = data.last_changed_at;
                    $scope.is_toggle_used = data.is_toggle_used;
                    if (data.last_changed_at) {
                        var last_changed_at = moment(data.last_changed_at);
                        $scope.last_changed_at = last_changed_at.format('Do MMMM YYYY, h:mm a')
                    }
                    $scope.isPreloader = false;
                    $localStorage.USER.inventory_sync_status = data.inventory_sync_status;
                    $rootScope.toggleOff = !data.inventory_sync_status;
                })
                .error(function (error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                });
        }
        get_inventory_sync();

        $scope.toggle_changed = function(status){
            
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: (!status) ? 'toggle-on.html': 'toggle-off.html',
                controller: 'toggleInventoryModalController',
                size: 'lg',
                backdrop: 'static',
                resolve: {
                        items: function () 
                        {
                         return status;
                        }
                    }
            }).result.then(function(data){
                if(data == "stateB"){
                    var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: status ? 'toggle-on-2.html': 'toggle-off-2.html',
                    controller: 'toggleInventoryModalController',
                    size: 'md',
                    backdrop: 'static',
                    resolve: {
                            items: function () 
                            {
                             return status;
                            }
                        }
                    }).result.then(function(data){
                        $scope.isPreloader = true;
                        data == 'done'? get_inventory_sync(status): get_inventory_sync();
                    });
                }else{
                    $scope.isPreloader = true;
                    get_inventory_sync();
                }
            });
        }
    }
})();
;(function () {
  'use strict';

  angular
  .module('app.setting')
  .controller('activitiesController', ActivitiesController);

  ActivitiesController.$inject = ['$scope', '$state', '$stateParams', 'Notify', 'AppService', '$localStorage', 'SR_CONSTANTS', '$timeout', 'loaderFactory'];

  function ActivitiesController($scope, $state, $stateParams, Notify, AppService, $localStorage, SR_CONSTANTS, $timeout, loaderFactory) {
    var user = $localStorage.USER;
    var vm = this;
    if(user){
      activate(user);
    }

    function activate (user) {
      const url = SR_CONSTANTS.api_urls.activity_logs;
      vm.is_seller = user.is_seller;
      vm.activityLogs = [];

      vm.updateState = updateState;
      vm.exportReport = exportReport;
      vm.getActivityLogs = getActivityLogs;
      vm.refreshContent = refreshContent;

      vm.logTypes = [
        {id: '1', name: 'Orders Import'},
        {id: '2', name: 'Channel Fetch Orders'},
        {id: '3', name: 'Bulk Assign'},
        {id: '4', name: 'Bulk Pickup'},
        {id: '5', name: 'Channel Catalog'},
        {id: '6', name: 'Master Catalog'}
      ];

      vm.maxSize = 2;
      vm.totalItems = 10000000;

      vm.itemsPerPage = [
        {value: '15',id: 0},
        {value: '30',id: 1},
        {value: '60',id: 2},
        {value: '100',id: 3}
      ];

      if ($stateParams.perPage == 30) {
        vm.selectedItems = 1;
      } else if ($stateParams.perPage == 60) {
        vm.selectedItems = 2;
      } else if ($stateParams.perPage == 100) {
        vm.selectedItems = 3;
      } else {
        vm.selectedItems = 0;
      }

      var fixedcolumn1 = {
        className: 'fixedcol1',
        width: $('.fixedcol1').outerWidth(),
        tableClass: 'activity-logs-table'
      }

      var fixedcolumn2 = {
        className: 'fixedcol2',
        width: $('.fixedcol2').outerWidth()
      }

      var fixedcolumn3 = {
        className: 'fixedcol3',
        width: $('.fixedcol3').outerWidth()
      }

      vm.filters = {
        page: $stateParams.page,
        per_page: vm.itemsPerPage[vm.selectedItems].value,
        type: $stateParams.type
      }
      vm.is_bulk = [1,2,5,6].indexOf(vm.filters.type - 0) == -1;


      function updateState(filters) {
        var data = {
          page: vm.filters.page,
          perPage: vm.itemsPerPage[vm.selectedItems].value,
          type: vm.filters.type
        }
        var params = {
          notify: false,
          reload: false
        }

        $state.go('.', data);
        data.per_page = data.perPage;
        delete data.perPage;
        $timeout(getActivityLogs(data),200);
      }

      function refreshContent () {
        _.debounce(function() {
          AppService.setWidth(fixedcolumn1, fixedcolumn2, fixedcolumn3);
        }, 0);
      }

      function exportReport(isBulk, fileUrl, logData) {
        if(isBulk){
          AppService.downloadDataWithUrl(fileUrl, 'logs')
        } else {
          if (logData.errors == 0) {
            Notify.alert('No Error Report was generated as there were no errors for this action.');
            return;
          }
          downloadfile('errors/' +logData.id + '/download', 'errorfile', true)
        }
      }

      function downloadfile(url, fileName, isError){
          loaderFactory.display('Fetching your activity logs files');
          var fileName;
          fileName = fileName + '.csv';

          AppService.get(url)
          .success(function(data){
              if(data.download_url){
                  AppService.downloadDataWithUrl(data.download_url, fileName)
              }else {
                var blob = new Blob([data], {type: 'text/csv'});
                var link = document.createElement("a");
                if (link.download !== undefined) { // feature detection
                  // Browsers that support HTML5 download attribute
                  var url = URL.createObjectURL(blob);
                  link.setAttribute("href", url);
                  link.setAttribute("download", fileName);
                  link.style.visibility = 'hidden';
                  document.body.appendChild(link);
                  link.click();
                  document.body.removeChild(link);
                }
              }
              loaderFactory.hide();
           })
          .error(function(error){
            loaderFactory.hide();
            $scope.isPreloader = false;
            AppService.isAuth(error);
          })
      }

      function getActivityLogs(filters) {
        loaderFactory.display('Fetching your activity logs!');
        var params = filters ? filters : vm.filters;
        var perPage = vm.itemsPerPage[vm.selectedItems].value;
        vm.is_bulk = [1,2,5,6].indexOf(params.type - 0) == -1;

        AppService.get_with_params(url, params, true)
        .then(function(res){
          vm.activityLogs = res.data.data;
          if(vm.activityLogs.length == 0){
            loaderFactory.hide();
          }
          vm.metaData = res.data.meta.pagination;
          vm.totalItems = vm.metaData.total;
          vm.showingOrderNo = {
            from: vm.totalItems == 0 ? 0 : (vm.filters.page - 1) * perPage + 1,
            to: Math.min(vm.totalItems, vm.filters.page * perPage)
          }
          AppService.setHeight();
          $scope.$on('activityLogs', function(ngRepeatFinishedEvent) {
            AppService.setWidth(fixedcolumn1, fixedcolumn2, fixedcolumn3);
            loaderFactory.hide();
          });
        })
        .catch(function(error){
          loaderFactory.hide();
          AppService.isAuth(error);
        });
      }
    }
  }
})();

(function() {
    'use strict';
    angular.module('app.setting').controller('CategoriesController', CategoriesController);

    CategoriesController.$inject = ['$rootScope', '$scope', '$state', 'AppService', 'Notify', '$stateParams', '$localStorage'];
    function CategoriesController($rootScope, $scope, $state, AppService, Notify, $stateParams, $localStorage) {
        if($localStorage.USER){
          activate();
        }
        ////////////////
        function activate() {

            var user = $localStorage.USER;
            // if(user.is_free_plan)
            // {
            //     $state.go('app.processing');
            // }

            var action = {
                className : 'action',
                width: $('.action').outerWidth(),
                tableClass: 'categoryList-table'
            }
             AppService.setHeight();

            $scope.$on('categoryList', function(ngRepeatFinishedEvent)
            {
               AppService.setWidth(action);
            });

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;
            $scope.sortType = 'name';
            $scope.sortReverse  = true;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }

            getCategoriesData();
            $scope.paginatedData = function()
            {
                $("th").remove();
                $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.getCategory = function()
            {
                getCategoriesData();
            }

            $scope.changePerPage = function()
            {
                $("th").remove();
                setTimeout(function() {
                    $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
                }, 2);
            }

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getCategoriesData();
            }

            $scope.getCategories = function()
            {
                getCategoriesData();
            }

            function getCategoriesData(perPage)
            {
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;

                AppService.get('categories?page='+ $scope.page +'&per_page='+ perPage + '&sort_by=' +$scope.sortType +'&sort=' +sort, true)
                .success(function(data)
                {
                    $scope.isPreloader = false;
                    $rootScope.categoryList = data.data;
                    $scope.metaData = data.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

        }
    }
})();

(function () {
    'use strict';
    angular
    .module('app.setting')
    .controller('ChannelsController', ChannelsController);

    ChannelsController.$inject = ['$rootScope', '$scope', '$stateParams', '$state', '$sce', 'Notify', 'AppService', '$localStorage', '$window', '$compile'];
    function ChannelsController($rootScope, $scope, $stateParams, $state, $sce, Notify, AppService, $localStorage, $window, $compile) {

        $scope.isFreePlan = false;
        $rootScope.isRestrictFreePlan = false;
        $scope.isEbay = false;
        var user = $localStorage.USER;
        $scope.channelLimit = user.channel_limit;
        $rootScope.show_channel_sync_button = user.show_channel_page;
        if(typeof user !== 'undefined'){
            $rootScope.isBasicPlan = user.is_basic_plan;
            if(user.is_free_plan) {
                $scope.isFreePlan = true;
                $rootScope.isRestrictFreePlan = true;
            }
        };
        $scope.getUserChannelList = getUserChannelList;
        $scope.getBaseChannels = getBaseChannels;
        $scope.backHistory = backHistory;
        $scope.sortTable = sortTable;

        function backHistory(){
            window.history.back();
        }

        $('th').children().removeClass('checkbox')
        var eventName = '';

        if($state.current.name == 'app.channel'){
            eventName = 'Clicked Channels';
        }

        if($state.current.name == 'app.channels' || $state.current.name == 'app.add_channel'){
            eventName = 'Clicked Add Channel';
        }

        if($state.current.name == 'app.edit_channel'){
            eventName = 'Clicked Edit Channel';
        }

        $scope.sortType = 'name';
        $scope.sortReverse  = false;

        function sortTable(type){
            $scope.sortType = type;
            $scope.sortReverse = !$scope.sortReverse;
            getUserChannelList();
        }

        AppService.intercomEventAndPing(eventName);
        $scope.channelInfoShow = true;
        $scope.tax = {};
        $scope.tax.tax_mode= 1;

        $scope.successfullyEbayLogin = false;
        if($state.params.id == 8 && $state.params.username != undefined)
        {
            $scope.eBayConnected = true ;
            $scope.channelInfoShow = true;
            $scope.successfullyEbayLogin = true;
        }
        else if($state.params.id == 8 || $state.params.id == 11 && $state.params.username == undefined)
        {
            $scope.channelInfoShow = false;
            $scope.uclink = false;
        }
        else
        {
            $scope.channelInfoShow = true;
        }

        $scope.orderStatus =
        {
            val: ''
        }

        var action =
        {
            className : 'action',
            width: $('.action').outerWidth(),
            tableClass: 'channelList-tables'
        }

        $scope.isAddSetting = true;
        $scope.disabled = 'disabled';
        $scope.isCustomeChannel = 'hide';
        $scope.channel =
        {
            orderChecked: false,
            inventryChecked: false,
            catalogChecked: false
        };

        function getUserChannelList(){
            $scope.isPreloader = true;
            var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
            if($scope.sortType === undefined){
                $scope.sortType = '';
            }
            var getPage = function(){
                AppService.get('channels?sort_by=' +$scope.sortType +'&sort=' +sort, true)
                .success(function (data)
                {
                    if(!data.data.length)
                    {
                        $scope.isPreloader = false;
                    }
                    $scope.channelList = data.data;
                    AppService.setHeight();
                    $scope.$on('channelList', function(ngRepeatFinishedEvent)
                    {
                        AppService.setWidth(action);
                        $scope.isPreloader = false;
                    });
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error, 'danger');

                })
            };
            getPage();
        }

        //BASE CHANNEL LIST

        function getBaseChannels(){
            $scope.isPreloader = true;
            AppService.get('channels/all')
            .success(function(data)
            {
                $scope.isPreloader = false;
                $scope.baseChannel = data.data;
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                AppService.isAuth(error, 'danger');
            })
        }

        //USER CHANNEL DETAILS
        var isDisableTestBox = false;
        $scope.getUserChannelDetail = function()
        {
            $scope.isPreloader = true;
            var id = $stateParams.id;
            AppService.get('channels/create/'+id)
            .success(function(data)
            {
                $scope.isPreloader = false;
                $scope.channelInfo = data.data;
                if($scope.channelInfo.code !='CS'){
                    $scope.isCustomeChannel = '';
                }
                if($scope.channelInfo.code == 'AZ'){
                    isDisableTestBox = true;
                }
                if($scope.channelInfo.code == 'EBUS' || $scope.channelInfo.code == 'EB' || $scope.channelInfo.code == 'EBUK'){
                    $scope.isEbay = true
                    $scope.channelInfoShow = true;
                    $scope.uclink = false;
                }
                $scope.channel.channelName = $scope.channelInfo.name;
                appendAuth();
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                AppService.isAuth(error, 'danger');
                $state.go('app.channels');
            })
        }


        var authHtml = '';
        function appendAuth(isEdit)
        {

            if(!angular.isUndefined($scope.channelInfo.auth_sample.api_info))
            {
                var authData = $scope.channelInfo.auth_sample.api_info.settings;
            }
            else
            {
                var authData = {};
            }

            var length = authData.length;
            for(var i=0; i< length; i++)
            {
                var inputValue = '';
                if(isEdit)
                {
                    inputValue = $scope.channelData.auth[authData[i].code];
                    $scope.channel.update_zero_inventory = $scope.channelData.settings.update_zero_inventory;
                }
                else if(authData[i].hasOwnProperty('value'))
                {
                    inputValue = authData[i].value;
                }

                if(authData[i].hasOwnProperty('type'))
                {
                    if(authData[i].type == 'button')
                    {
                        authHtml += '<div class="col-md-8" ng-hide="eBayConnected">'+
                                '<div class="form-group">'+
                                   '<label class="col-md-4 control-label">' + authData[i].name +'</label>'+
                                      ' <div class="col-md-8">'
                                      if(!$scope.eBayConnected)
                                      {
                                            authHtml += '<button ng-click="getebaySessionId(' +"'"+ authData[i].link +"'"+ ', '+authData[i].country_code+')" class="form-control btn btn-blue b0" id ="' + authData[i].code +'">' + inputValue + '</button>'
                                      }

                                      authHtml += '</div>'+
                                '</div>'+
                             '</div>'+
                            '<div class="clearfix"></div> </br>'

                    }
                    else if(authData[i].type == 'link')
                    {
                        authHtml += '<div class="col-md-8" ng-hide="uclink">'+
                                '<div class="form-group">'+
                                   '<label class="col-md-12 mb-lg control-label">' + authData[i].name +'</label>'+
                                      ' <div class="col-md-8">'
                                            authHtml += '<a ng-click="downloadfile()" class="form-control btn btn-blue b0" id ="' + authData[i].code +'" >' + inputValue + '</a>'
                                      authHtml += '</div>'+
                                '</div> '+
                            '<div class="clearfix"></div></br>'
                    }
                    else if (authData[i].type == 'checkbox')
                    {

                        authHtml += '<div class="col-md-8" ng-show="channelInfoShow">'+
                                '<div class="form-group">'+
                                   '<label class="col-md-4 control-label">' + authData[i].name +'</label>'+
                                      ' <div class="col-md-8">'
                                            authHtml += '<label class="switch"><input type="checkbox" value ="' +authData[i].value +'" class="form-control" id ="' + authData[i].code +'" ng-model="channel.'+authData[i].code +'" /><span></span></label>'
                                      authHtml += '</div>'+
                                '</div>'+
                             '</div>'+
                            '<div class="clearfix"></div> </br>'
                    }
                    else if(authData[i].type == 'select') {

                        authHtml+= '<div class="col-md-8" ng-show="channelInfoShow">'+
                            '<div class="form-group">'+
                               '<label class="col-md-4 control-label pt">' + authData[i].name +'</label>'+
                                  '<div class="col-md-8">'+
                                    '<select class="form-control" name="' + authData[i].code + '" id="' + authData[i].code + '" ng-model="channel.' + authData[i].code + '">' +
                                        '<option value="">' + authData[i].placeholder + '</option>';
                        angular.forEach(authData[i].values, function(value, key){
                            if(isEdit && (inputValue == key)){
                            authHtml+= '<option ng-selected="true" value="' + key + '">' + value + '</option>'
                            }else{
                                authHtml+= '<option value="' + key + '">' + value + '</option>'
                            }
                        });
                        authHtml+='</select>'+
                                '</div>'+
                             '</div>'+
                            '<div class="clearfix"></div></br>';
                    }
                }
                else
                {

                    authHtml += '<div class="col-md-8">'+
                                '<div class="form-group">'+
                                   '<label class="col-md-4 control-label pt">' + authData[i].name +'</label>'+
                                      ' <div class="col-md-8">'
                                        if( isDisableTestBox && i != 0 )
                                        {
                                            authHtml += '<input type="text" disabled value ="' +inputValue +'" class="form-control" id ="' + authData[i].code +'" placeholder="' +authData[i].placeholder + '"/>'
                                        }
                                        else
                                        {
                                            authHtml += '<input type="text" value ="' +inputValue +'" class="form-control" id ="' + authData[i].code +'" placeholder="' +authData[i].placeholder + '"/>'
                                        }
                                      authHtml += '</div>'+
                                '</div>'+
                             '</div>'+
                            '<div class="clearfix"></div> </br>'
                }
            }

           $('.auth-append').html($compile(authHtml)($scope));
        }



        var updateChannelId = '';
        $scope.addSetting = function($event)
        {
            $('.validation-alert').remove();
            $('input').removeClass('red-border');

            $scope.isPreloader = true;
            var postData = settingData($scope.channelInfo.name);
            if($state.params.id == 8 && !$state.params.username)
            {
                Notify.alert("Please sign in using your eBay account", {status: 'danger', timeout: 7000 });
                $scope.isPreloader = false;
                return false;
            }

            AppService.post('channels', true, postData)
            .success(function(data)
            {
                $scope.isPreloader = false;

                if(data.status)
                {
                    Notify.alert("Channel added Succesfully", {status: 'success', timeout: 7000 });
                    $state.go('app.channel');
                }
                else
                {
                    // updateChannelId = data.id;
                    // $scope.isAddSetting = false;
                    Notify.alert(data.message, {status: 'success', timeout: 7000 });
                }
                $window.sessionStorage.removeItem("ebayId");
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                if(error.status_code === 422)
                {
                    AppService.alertValidation(error.errors, true);
                    Notify.alert("Please correct below given errors !", {status: 'danger', timeout: 7000 });
                }
                else
                {
                    AppService.isAuth(error, 'danger');
                }
            })
        }

        $scope.updateSetting = function()
        {
            $('.validation-alert').remove();
            $('input').removeClass('red-border');
            // 'app.edit_channel'
            $scope.isPreloader = true;
            var name = '';
            if($state.current.name == 'app.edit_channel')
            {
                name = $scope.channel.channelName;
            }
            else
            {
                name = $scope.channelInfo.name;
            }
            var postData = settingData(name);
            AppService.put('channels/'+ updateChannelId, true, postData)
            .success(function(data)
            {
                $scope.isPreloader = false;
                if(data.status)
                {
                    Notify.alert("Channel updated Successfully", {status: 'success', timeout: 7000 });
                    $state.go('app.channel');
                }
                else {
                   // Notify.alert("Connection issue! Please Check Your Api Details");
                   Notify.alert(data.message, {status: 'danger', timeout: 7000 });
                }

            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                if(error.status_code === 422)
                {
                    AppService.alertValidation(error.errors, true);
                    Notify.alert("Please correct below given errors !", {status: 'danger', timeout: 7000 });
                }
                else
                {
                    AppService.isAuth(error, 'danger');
                }
            })
        }

        function settingData(channelName)
        {
            $('.validation-alert').remove();
//            var orders = $scope.channelInfo.settings_sample.orders;
//            var inventory = $scope.channelInfo.settings_sample.inventory;
            var data = {};
            data.settings = {};
//            data.settings.inventory = inventory;
//            data.settings.orders = orders;
//            var length = data.settings.orders.settings.length;
//            var ordersData = data.settings.orders.settings;
            var newSetting = {};
            if($scope.channelInfo.id == '7'){
                newSetting.tax_mode = $scope.tax.tax_mode;
            }

            if(!angular.isUndefined($scope.channelInfo.auth_sample.api_info))
            {
                var authData = $scope.channelInfo.auth_sample.api_info.settings;
            }
            else
            {
                var authData = {};
            }

            var newAuthData = {};
            for(var i = 0; i< authData.length; i++)
            {
                newAuthData[authData[i].code] = $('#'+authData[i].code).val();
            }

            if($state.params.id == 8 || $scope.channelInfo.id == 8)
            {

                var postData = {};
                postData.session_id = $window.sessionStorage.getItem('ebayId');
                postData.user_name = $state.params.username;
                postData.orders_sync = $scope.channel.orderChecked;
                postData.inventory_sync = $scope.channel.inventryChecked;
                postData.catalog_sync = $scope.channel.catalogChecked;
                postData.base_channel_code = $scope.channelInfo.code;
                postData.update_zero_inventory = $scope.channel.update_zero_inventory;
                postData.name = channelName;
                postData.settings = newSetting;
                postData.auth = newAuthData;

            }
            else
            {
                var postData = {};
                postData.orders_sync = $scope.channel.orderChecked;
                postData.inventory_sync = $scope.channel.inventryChecked;
                postData.catalog_sync = $scope.channel.catalogChecked;
                postData.base_channel_code = $scope.channelInfo.code;
                postData.name = channelName;
                postData.settings = newSetting;
                postData.auth = newAuthData;
            }

            if($('.setting-status').val())
            {
                postData.settings.order_status = $('.setting-status').val().split(',');
            }

            if ($('.setting-days').val())
            {
                postData.settings.number_of_days = $('.setting-days').val();
            }

            return postData;
        }
        // EDIT FUNCTIONALITY
        $scope.editChannel = function(id){
            $state.go('app.edit_channel', {'id' : id});
        }

        $scope.channelData = '';

        $scope.getUserChannelDetailForEdit = function()
        {
            $scope.isPreloader = true;
            var id = $stateParams.id;
            updateChannelId = id;
            AppService.get('channels/'+id +'/edit')
            .success(function(res){
                $scope.isPreloader = false;
                $scope.channelData = res.data;
                $scope.channel.catalogChecked = !!$scope.channelData.catalog_sync;

                $scope.inventory_synced_on = $scope.channelData.inventory_synced_on;
                if($scope.channelData.base_channel.id !='4'){
                    $scope.isCustomeChannel = '';
                }
                $scope.orders_synced_on = $scope.channelData.orders_synced_on
                if($scope.channelData.orders_sync === 1)
                {
                    $scope.channel.orderChecked = true;
                }
                else
                {
                    $scope.orders_synced_on = 'Never Synced';
                }
                if($scope.channelData.inventory_sync === 1)
                {
                    $scope.channel.inventryChecked = true;
                }
                else
                {
                    $scope.inventory_synced_on = 'Never Synced';
                }

                $scope.channelInfo = $scope.channelData.base_channel;
                $scope.channel.channelName = $scope.channelData.name;
                if($scope.channelData.hasOwnProperty('connection') && $scope.channelInfo.id == 8)
                {
                    $scope.eBayConnected = true;
                }
                if($scope.channelInfo.id =='7'){
                    $scope.tax.tax_mode = $scope.channelData.settings.tax_mode? $scope.channelData.settings.tax_mode: 1;
                }
                appendAuth('isEdit');
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                AppService.isAuth(error, 'danger');
            })
        }


        $scope.getebaySessionId = function(ebaylink, country_code)
        {
            $scope.isPreloader = true;
            AppService.get('channels/ebay/session_id?site_id='+country_code)
            .success(function(data)
            {
                $scope.getebaySessionId = data.ebay_session_id;
                $window.sessionStorage.removeItem("ebayId");
                $window.sessionStorage.setItem("ebayId", $scope.getebaySessionId);
                $window.location.href = ebaylink+$scope.getebaySessionId;
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                AppService.isAuth(error, 'danger');
            })
        }

        $scope.downloadfile = function()
        {
            $scope.isPreloader = true;
            AppService.get('channels/download/postcode')
            .success(function(data)
            {
                Notify.alert(data.message, {status: 'success', timeout: 7000 });
                $scope.isPreloader = false;
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                AppService.isAuth(error, 'danger');
            })
        }

    }
})();

(function () {
    'use strict';
    angular.module('app.setting').controller('CompanyController', CompanyController);
    CompanyController.$inject = ['$rootScope', '$scope', 'AppService', '$state', 'Notify', '$localStorage'];
    function CompanyController($rootScope, $scope, AppService, $state, Notify, $localStorage) 
    {
    	$scope.company = {};
        var defaultCity = 'Select State';
        var isPickUpserviceable = true;
        $scope.selectedState = ''
        // $scope.checked = true;
    	$scope.company.generalDetail = 
        {
    		companyName: '',
    		logo: '',
            website: ''
    	}

        $scope.company.bankDetail = 
        {

            accountNumber: '',
            accountType: '',
            beneficiaryName: '',
            IfscCode: '',
            canceledCheque: ''
        }

    	$scope.company.accountDetail = 
        {
    		pan: '',
    		tin: '',
            cin: '',
    		centalSaleTax: '',
    		invoicePrefix: '',
    		invoiceNext: '',
            manifestPrefix: '',
            manifestNext: '',
            email: ''
    	}

    	$scope.company.billingAddress = 
        {
    		addressLine1: '',
    		addressLine2: '',
    		country: 'India',
    		state: '',
    		city: '',
    		pinCode: '',
    		phone: '',
    	}

    	$scope.company.shippingAddress = 
        {
    		addressLine1: '',
    		addressLine2: '',
    		country: 'India',
    		state: '',
    		city: '',
    		pinCode: '',
    		phone: '',
    	}

        $scope.checkPickupInSameaddress = function($event)
        {
            $('.message').remove();
            if($scope.company.billingAddress.pinCode.length != 6 )
            {
                return;
            }
            setTimeout(function() {
                checkPincodeForServiciability($scope.company.billingAddress.pinCode, '');
            }, 10);
        }

        $scope.removeShipingDetail = function()
        {   
            if( $scope.checked )
            {   
                $('.message').remove();
                checkPincodeForServiciability($scope.company.billingAddress.pinCode, '');
                $("input[name='billing_pin_code']").bind('keyup', $scope.checkPickupInSameaddress);
            }
            else
            {
                $("input[name='billing_pin_code']").unbind('keyup')
            }

            if(!$scope.checked && !$scope.isEditShippingAddresh)
            {
                $scope.company.shippingAddress.addressLine1 = '';
                $scope.company.shippingAddress.addressLine2 = '',
                // $scope.company.shippingAddress.country = '';
                $scope.company.shippingAddress.state = '';
                $scope.company.shippingAddress.city = '';
                $scope.company.shippingAddress.pinCode = '';
                $scope.company.shippingAddress.phone = '';
            }
        }


        $scope.getCompanyDetail = function() 
        {
            $scope.isPreloader = true;
            AppService.get('settings/create', true)
            .success(function(data)
            {   
                $scope.countryList = data.data.countries;
                $scope.stateList = data.data.states;
                $scope.stateList.unshift(defaultCity);
                $scope.isPreloader = false;
               
            })
            .error(function(error)
            {
                AppService.isAuth(error);
            })
            AppService.get('settings/company', true)
            .success(function(data)
            {   
                if(data.logo == '')
                {
                    $('.delete-image').css('display', 'none');
                }
                $scope.isPreloader = false;
                var data = data.data;
                $scope.isEditShippingAddresh = data.shipping_address_status == 0 ? false : true;
                $scope.isbankDetailEditable = data.bank_account_number =='' ? false : true;
                $scope.company.generalDetail.companyName = data.name;
                $scope.company.generalDetail.website = data.website;
                $scope.company.generalDetail.logo = data.logo == '' ? "/app/img/noimage.jpg": data.logo;
                $scope.company.accountDetail.pan = data.pan;
                $scope.company.accountDetail.tin = data.tin;
                $scope.company.accountDetail.cin = data.cin;
                $scope.company.accountDetail.centalSaleTax = data.cst;
                $scope.company.accountDetail.invoicePrefix = data.invoice_prefix;
                $scope.company.accountDetail.invoiceNext = data.invoice_serial;
                $scope.company.bankDetail.accountNumber = data.bank_account_number;
                $scope.company.bankDetail.accountType = data.bank_account_type;
                $scope.company.bankDetail.beneficiaryName = data.beneficiary_name;
                $scope.company.bankDetail.IfscCode = data.bank_ifsc_code;
                $scope.company.billingAddress.addressLine1 = data.billing_address;
                $scope.company.billingAddress.addressLine2 = data.billing_address_2;
                $scope.company.billingAddress.country = data.billing_country == '' || null ?'India': data.billing_country;
                $scope.company.billingAddress.state = data.billing_state == '' || null ? defaultCity: data.billing_state;
                $scope.company.billingAddress.city = data.billing_city;
                $scope.company.billingAddress.pinCode = data.billing_pin_code;
                $scope.company.billingAddress.phone = data.billing_phone;
                $scope.company.shippingAddress.addressLine1 = data.shipping_address;
                $scope.company.shippingAddress.addressLine2 = data.shipping_address_2;
                $scope.company.shippingAddress.country = data.shipping_country == '' || null ?'India': data.shipping_country;
                $scope.company.shippingAddress.state = data.shipping_state == '' || null ? defaultCity : data.shipping_state;
                $scope.company.shippingAddress.city = data.shipping_city;
                $scope.company.shippingAddress.pinCode = data.shipping_pin_code;
                $scope.company.shippingAddress.phone = data.shipping_phone;
                $scope.company.accountDetail.manifestPrefix = data.manifest_prefix;
                $scope.company.accountDetail.manifestNext = data.manifest_serial;
                $scope.company.accountDetail.email = data.email;
                $scope.checked = data.shipping_is_billing;
                $scope.company.bankDetail.canceledCheque = data.canceled_cheque.length == 0 ? "/app/img/noimage.jpg": data.canceled_cheque[0]; 
            })
            .error(function(error)
            {
                AppService.isAuth(error);
            })
        }

        
        $scope.checkPickupService = function($event)
        {
            $('.message').remove();
            if($scope.company.shippingAddress.pinCode.length != 6 )
            {
                return;
            }
            var target = angular.element($event.currentTarget);
            checkPincodeForServiciability($scope.company.shippingAddress.pinCode, target);
        }


        $scope.company.submit = function($event) 
        {   
            var target = angular.element($event.currentTarget);
            var shipping_is_billing = 0;
            $('.validation-alert').remove();
            $('input').removeClass('red-border');
            if( !isPickUpserviceable )
            {
                Notify.alert("Pickup pincode not Serviceable")
                return;
            }
            // if(isPickUpserviceable )
            // {
            //     Notify.alert("Pickup pincode not Serviceable")
            //     return;
            // }

            $scope.isPreloader = true;
            var formData = new FormData();
            formData.append("logo", $( "input[name ='logo']" )[0].files[0] === undefined ? '': $( "input[name ='logo']" )[0].files[0] );
            formData.append('name', $scope.company.generalDetail.companyName);
            formData.append('website', $scope.company.generalDetail.website);
            formData.append('pan', $scope.company.accountDetail.pan);
            formData.append('tin', $scope.company.accountDetail.tin);
            formData.append('cin', $scope.company.accountDetail.cin);
            formData.append('cst', $scope.company.accountDetail.centalSaleTax);
            formData.append('invoice_prefix', $scope.company.accountDetail.invoicePrefix);
            formData.append('invoice_serial', $scope.company.accountDetail.invoiceNext);
            formData.append('bank_account_number', $scope.company.bankDetail.accountNumber);
            formData.append('bank_account_type', $scope.company.bankDetail.accountType);
            formData.append('beneficiary_name', $scope.company.bankDetail.beneficiaryName);
            formData.append('bank_ifsc_code', $scope.company.bankDetail.IfscCode);
            formData.append('canceled_cheque', $( "input[name ='canceled_cheque']" )[0].files[0] === undefined ? '': $( "input[name ='canceled_cheque']" )[0].files[0]);
            formData.append('email', $scope.company.accountDetail.email);
            formData.append('billing_address', $scope.company.billingAddress.addressLine1);
            formData.append('billing_address_2', $scope.company.billingAddress.addressLine2);
            formData.append('billing_city', $scope.company.billingAddress.city);
            formData.append('billing_state', $scope.company.billingAddress.state === defaultCity ? '': $scope.company.billingAddress.state);
            formData.append('billing_country', $scope.company.billingAddress.country);
            formData.append('billing_pin_code', $scope.company.billingAddress.pinCode);
            formData.append('billing_phone', $scope.company.billingAddress.phone);
            
            if(!$scope.checked){
                
                formData.append('shipping_address', $scope.company.shippingAddress.addressLine1);
                formData.append('shipping_address_2', $scope.company.shippingAddress.addressLine2);
                formData.append('shipping_city', $scope.company.shippingAddress.city);
                formData.append('shipping_state', $scope.company.shippingAddress.state === defaultCity ? '': $scope.company.shippingAddress.state);
                formData.append('shipping_country', $scope.company.shippingAddress.country);
                formData.append('shipping_phone', $scope.company.shippingAddress.phone);
                formData.append('shipping_pin_code', $scope.company.shippingAddress.pinCode);
            
            }
            else if($scope.checked)
            {
                shipping_is_billing = 1;
            }

            formData.append('shipping_is_billing', shipping_is_billing);
            AppService.postFormData('settings/company', formData, true)
            .success(function(data)
            {   
                var user = $localStorage.USER;
                user.company_name = $scope.company.generalDetail.companyName;
                $localStorage.USER = user;
                $scope.isPreloader = false;
                Notify.alert("Company Details Updated Successfully!",  {status: 'success'});
                $state.go($state.current, {}, {reload: true});
                if( user.is_profile_complete == 'true' )
                {
                    $state.go('app.dashboard');
                }

            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                if(error.status_code === 422)
                {
                    AppService.alertValidation(error.errors, true);
                    Notify.alert("Please correct below given errors !");
                }
                else
                {
                    AppService.isAuth(error);
                }
            })

        }

        $scope.removeLogo = function(event)
        {
            AppService.deleteData('settings/logo', true)
            .success(function(data)
            {   
               $scope.company.generalDetail.logo = "/app/img/noimage.jpg";
                $('.delete-image').css('display', 'none');
            })
            .error(function(error)
            {
                AppService.isAuth(error);
            })
        }

        function checkPincodeForServiciability(pincode, target)
        {
            $('.message').remove();
            var url = 'courier/pickup/'+ pincode;

            AppService.get(url , true)
            .success(function(data)
            {
                isPickUpserviceable = true;
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                 if(error.status_code == 404)
                {
                    isPickUpserviceable = false;
                    var message =  '<div class="message p-sm bg-danger-dark"><em class="fa fa-close mr-sm"></em>' +error.message+ '</div>'
                    $('.message').remove();
                    if( !target )
                    {   
                        $("input[name='billing_pin_code']").after(message);
                    }
                    else
                    {
                        target.parent().find('.message').remove();
                        target.after(message);
                    }
                }
                else
                {
                    AppService.isAuth(error);
                }
            })

        }
    }
})();

(function () {
    'use strict';
    angular
    .module('app.setting')
    .controller('CompanyDetailController', CompanyDetailController);
    CompanyDetailController.$inject = ['$rootScope', '$scope', 'AppService', '$state', 'Notify', '$localStorage', '$stateParams', '$uibModal', 'loaderFactory', 'SR_CONSTANTS', '$timeout'];
    function CompanyDetailController($rootScope, $scope, AppService, $state, Notify, $localStorage, $stateParams, $uibModal, loaderFactory, SR_CONSTANTS, $timeout)
    {
        if($localStorage.USER){
          activate();
        }
        function activate () {
          $scope.is_autorecharge_upgradable = $localStorage.USER.is_autorecharge_upgradable || false;

          //RTO Pickup Address START
          $scope.rtoEnabled = true;
          $scope.isRTOSame = 0;
          $scope.showAddressOption = false;
          $scope.showButton = false;
          $scope.displayPriceOnLabel = true;
          $scope.displayNumberOnLabel= true;
          $scope.displayAddressOnLabel= true;
          $scope.enableBuyerEmailComm= true;
          $scope.enableBuyerSmsComm= true;

          $scope.updateRTOPickup = updateRTOPickup;
          $scope.rtoAddrStatusChange = rtoAddrStatusChange;

          function rtoAddrStatusChange(status){
            if($scope.isRTOSame || !$scope.selectedRtoAddrID){
              $scope.showButton = true;
            } else {
              $scope.showButton = false;
              $scope.showAddressOption = true;
            }
          }

          function updateRTOPickup(){
            var url = SR_CONSTANTS.api_urls.add_rto_address;
            var $data = {};
            $data.is_rto_same = !!$scope.isRTOSame;
            if(!$data.is_rto_same){
              $data.rto_id = $scope.selectedRtoAddrID;
            }
            AppService.post(url, true, $data)
            .then(function(res){
              Notify.alert(res.data.message, {
                status : 'success'
              });
              getRTOInfo();
            })
            .catch(function(err){
              Notify.alert(err.data.message, {
                status: 'danger'
              });
            })
          }

          function getRTOInfo(){
            var url = SR_CONSTANTS.api_urls.get_rto_addr_info;
            AppService.get(url, true)
            .then(function(res){
              $scope.isRTOSame = res.data.is_rto_same ? 1 : 0;
              $scope.selectedRtoAddrID = res.data.rto_id;
              rtoAddrStatusChange();
              if(res.data.rto_id){
                $scope.showSelectedAddress = true;
              } else {
                $scope.showSelectedAddress = false;
              }
              $scope.selectedRtoAddr = $scope.shippingAddress.filter(function(item){
                return item.id === res.data.rto_id;
              })[0];
              $scope.showAddressOption = true;
            })
          }

          //RTO Pickup Address END

          //KYC START

          $scope.kyc_status = $localStorage.USER.kyc_status
          $scope.panNum;
          $scope.addrProofType;
          $scope.validPAN = false;
          $scope.pan_document = '';
          $scope.address_document = '';
          $scope.addrProofsList = addrProofsList;
          $scope.updateKYC = updateKYC;

          function addrProofsList(panNum){
            var num = panNum.charAt(3) == 'p' || panNum.charAt(3) == 'P' ? 2 : 1;
            if(panNum.match(/[A-Za-z]{3}[p,P,c,C,h,H,f,F,a,A,t,T,b,B,l,L,j,J,g,G]{1}[A-Za-z]{1}\d{4}[A-Za-z]{1}/g)){
              var url = 'settings/kyc/documents/' + num;
              AppService.get(url, true)
              .then(function(res){
                $scope.validPAN = true;
                $scope.addrProofs = res.data.data;
                if($scope.kyc_details.length != 0) {
                  $scope.addrProofType = $scope.addrProofs.filter(function(value){
                    return value.name == $scope.kyc_details.document_type;
                  })[0];
                } else {
                  $scope.addrProofType = $scope.addrProofs[0];
                }
              })
              .catch(function(err){
                AppService.isAuth(err);
              })
            } else {
              $scope.validPAN = false;
            }
          }

          function updateKYC(panNum, panCardImage, addrProofType, addrProofImage){
            loaderFactory.display("Please Wait! While we upload.");
            var formData = new FormData();
            var addr_proof_type = typeof(addrProofType) == 'object' ? addrProofType.name : addrProofType;

            formData.append('pan_document', panCardImage);
            formData.append('address_document', addrProofImage);
            formData.append('document_type', addr_proof_type);
            formData.append('pan', panNum);
            AppService.postFormData('settings/kyc/upload', formData, true)
            .then(function(res){
              loaderFactory.hide();
              Notify.alert('Your KYC details are being processed.');
              $scope.kyc_status = res.data.data.company.kyc_status;
            })
          }
          //KYC END

          //Payment Mode START
          $scope.tncstatus = false;
          $scope.showTerms = showTerms;
          $scope.updatePaymentMode = updatePaymentMode;
          $scope.enablePrepaid = enablePrepaid;

          getAccountType();
          function getAccountType(){
            loaderFactory.display("Please Wait!");
            AppService.get('settings/account_type', true)
            .success(function(res){
              loaderFactory.hide();
              $scope.postpaidStatus = res.account_type_history.account_type == 1 ? true : false;
              $scope.accountType = (res.account_type_history.account_type - 0);
              Notify.alert(res.message)
            })
            .error(function(error){
              loaderFactory.hide();
              Notify.alert(error.message)
            })
          }

          function enablePrepaid(status){
            // var kycStatus = $scope.kyc_status;
            // if(kycStatus != 2){
            //   $scope.postpaidStatus = false;
            //   switch (kycStatus){
            //     case 0:
            //       Notify.alert('Please update your KYC details to proceed');
            //       break;
            //
            //     case 1:
            //       Notify.alert('Your KYC details are being verified. Please try again after sometime.');
            //       break;
            //
            //     case 3:
            //       Notify.alert('Your KYC details have been rejected, please verify and update your KYC to proceed.');
            //       break;
            //   }
            //   return;
            // } else
            if(!status && $scope.accountType !== 0){
              loaderFactory.display("Please Wait!");
              var data = {
                "account_type" : $scope.postpaidStatus ? 1 : 0
              }
              var formData = new FormData();
              formData.append('page', 'account');
              formData.append('account_type', data.account_type);

              AppService.postFormData('settings/account_type', formData, true)
              .success(function(res){
                loaderFactory.hide();
                Notify.alert(res.message);
                $scope.tncstatus = false;
                $scope.postpaidStatus = res.account_type_history.account_type == 1 ? true : false;
                $scope.accountType = res.account_type_history.account_type - 0;
              })
              .error(function(error){
                loaderFactory.hide();
                Notify.alert(error.message)
              })
            }
            // else {
            //   return;
            // }
          }

          function updatePaymentMode(){
            loaderFactory.display("Please Wait!");
            var data = {
              "account_type" : $scope.postpaidStatus ? 1 : 0
            }

            var formData = new FormData();
            $scope.userSignatureData = $('.user-signature')[0].files;
            formData.append('page', 'account');
            formData.append('account_type', data.account_type);
            formData.append('signature_image', $scope.userSignatureData[0]);

            AppService.postFormData('settings/account_type', formData, true)
            .success(function(res){
              loaderFactory.hide();
              Notify.alert(res.message);
              $scope.postpaidStatus = res.account_type_history.account_type == 1 ? true : false;
              $scope.accountType = res.account_type_history.account_type - 0;
            })
            .error(function(error){
              loaderFactory.hide();
              Notify.alert(error.message)
            })
          }

          function showTerms(){
            var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'tncPostpaid.html',
                controller:'tncPostpaidController',
                size: 'md',
                resolve: {
                    items: function ()
                    {
                     return '';
                    }
                }
            });
          }

          //Payment Mode END
          $scope.showLabelFormats = true;
          $scope.labelType = 0;
          $scope.checked = true;

          $scope.company = {};
          var defaultCity = 'Select State';
          var isPickUpserviceable = true;
          $scope.selectedState = '';
          $scope.changedStatus = false;
          $scope.redirect_url = $stateParams.redirect_url;;
          $scope.company.generalDetail = {
              companyName: '',
              logo: '',
              website: '',
              coupon_code: ''
          }

          $scope.company.bankDetail = {
              accountNumber: '',
              accountType: '',
              beneficiaryName: '',
              IfscCode: '',
              canceledCheque: ''
          }

          $scope.company.accountDetail = {
              pan: '',
              tin: '',
              cin: '',
              centalSaleTax: '',
              invoicePrefix: '',
              invoiceNext: '',
              manifestPrefix: '',
              manifestNext: '',
              email: '',
              gst: '',
              digital_sign: ''
          }

          $scope.company.billingAddress = {
              addressLine1: '',
              addressLine2: '',
              country: 'India',
              state: '',
              city: '',
              pinCode: '',
              phone: '',
          }

          $scope.company.shippingAddress = {
              addressLine1: '',
              addressLine2: '',
              country: 'India',
              state: '',
              city: '',
              pinCode: '',
              phone: '',
          }

          $scope.idEditPickupLocation = false;

          $scope.company.slug = '';
          $scope.sluglink = {
              show : false,
              slug : '',
              product : '',
              price : '',
              paymentMode : 'cod',
              tax : 0,
              url : '',
          }
          $scope.advanceOption = false;

          $scope.currentState = $state.current.name;
          $scope.shippingAddress = '';
          $scope.change_pickup_location =''
          $scope.addMoreAddress = false;
          $scope.apiUsers = '';
          $scope.address_status = [];

          $scope.checkPickupInSameaddress = function($event)
          {
              $('.message').remove();
              if($scope.company.billingAddress.pinCode.length != 6 )
              {
                  return;
              }
              setTimeout(function() {
                  checkPincodeForServiciability($scope.company.billingAddress.pinCode, '');
              }, 10);
          }

          getCompanyDetails();

          $scope.isEditShippingAddresh = false;
          $scope.pincodeDetails = function(pincode, flag){
              console.log(pincode);
              var data = {
                  "postcode": pincode
              }
              AppService.get_with_params('external/open/postcode/details', data, true)
              .then(function(res){
                  if(flag){
                      $scope.company.billingAddress.city = res.data.postcode_details.city;
                      $scope.company.billingAddress.state = res.data.postcode_details.state;
                  } else {
                      $scope.company.shippingAddress.city = res.data.postcode_details.city;
                      $scope.company.shippingAddress.state = res.data.postcode_details.state;
                  }
              })
          }

          function getCompanyDetails(){
              var url = 'settings/company'
              $scope.isPreloader = true;
              if($state.current.name == 'app.labelBuyerSettings'){
                url = 'settings/company-settings';
              }

              AppService.get('settings/create', true)
              .success(function(data){
                $scope.countryList = data.data.countries;
                $scope.stateList = data.data.states;
                $scope.stateList.unshift(defaultCity);
              })
              .error(function(error){
                AppService.isAuth(error);
                $scope.isPreloader = false;
              })

              AppService.get(url, true)
              .success(function(data){
                  var data = data.data;
                  $scope.isPreloader = false;
                  if($state.current.name == 'app.labelBuyerSettings'){
                    $scope.labelType = data.label_generate_type;
                    $scope.displayPriceOnLabel   = data.display_price_on_label;
                    $scope.displayNumberOnLabel  = data.display_number_on_label;
                    $scope.displayAddressOnLabel = data.display_address_on_label;
                    $scope.enableBuyerEmailComm = data.send_customer_email;
                    $scope.enableBuyerSmsComm = data.send_customer_sms;
                  } else {
                    // if(data.logo == ''){
                    //   $('.delete-image').css('display', 'none');
                    // }
                    $scope.company.generalDetail.companyName = data.name;
                    $scope.company.generalDetail.website = data.website;
                    $scope.company.generalDetail.logo = data.logo;
                    $scope.company.generalDetail.couponCode = data.coupon_code;
                    $scope.company.generalDetail.couponApplied = data.coupon_applied;
                    $scope.company.accountDetail.pan = data.pan;
                    $scope.company.accountDetail.tin = data.tin;
                    $scope.company.accountDetail.cin = data.cin;
                    $scope.company.accountDetail.gst = data.gst;
                    $scope.company.accountDetail.centalSaleTax = data.cst;
                    $scope.company.accountDetail.invoicePrefix = data.invoice_prefix;
                    $scope.company.accountDetail.invoiceNext = data.invoice_serial;
                    $scope.company.bankDetail.accountNumber = data.bank_account_number;
                    $scope.company.bankDetail.accountType = data.bank_account_type;
                    $scope.company.bankDetail.beneficiaryName = data.beneficiary_name;
                    $scope.company.bankDetail.IfscCode = data.bank_ifsc_code;
                    $scope.company.bankVerificationStatus = data.bank_verification_status - 0;
                    $scope.company.bank_verification_rejection_reason = data.bank_verification_rejection_reason;
                    $scope.company.billingAddress.addressLine1 = data.billing_address;
                    $scope.company.billingAddress.addressLine2 = data.billing_address_2;
                    $scope.company.billingAddress.country = data.billing_country == '' || null ?'India': data.billing_country;
                    $scope.company.billingAddress.state = data.billing_state == '' || null ? defaultCity: data.billing_state;
                    $scope.company.billingAddress.city = data.billing_city;
                    $scope.company.billingAddress.pinCode = data.billing_pin_code;
                    $scope.company.billingAddress.phone = data.billing_phone;
                    $scope.company.shippingAddress.addressLine1 = data.shipping_address;
                    $scope.company.shippingAddress.addressLine2 = data.shipping_address_2;
                    $scope.company.shippingAddress.country = data.shipping_country == '' || null ?'India': data.shipping_country;
                    $scope.company.shippingAddress.state = data.shipping_state == '' || null ? defaultCity : data.shipping_state;
                    $scope.company.shippingAddress.city = data.shipping_city;
                    $scope.company.shippingAddress.pinCode = data.shipping_pin_code;
                    $scope.company.shippingAddress.phone = data.shipping_phone;
                    $scope.company.accountDetail.manifestPrefix = data.manifest_prefix;
                    $scope.company.accountDetail.manifestNext = data.manifest_serial;
                    $scope.company.accountDetail.email = data.email;
                    $scope.checked = data.shipping_is_billing;
                    $scope.kyc_rejection_reason = data.kyc_rejection_reason;
                    $scope.company.bankDetail.canceledCheque = data.canceled_cheque[0];
                    $scope.signaturEditable = data.digital_sign[0] == '' || data.digital_sign[0] == 'nothing';
                    $scope.company.accountDetail.digital_sign = data.digital_sign[0] == ''?'nothing':data.digital_sign[0];
                    $scope.panNum = data.pan ? data.pan : '';
                    $scope.kyc_details = data.kyc_details;
                    $scope.isbankDetailDisabled = [0,1,3,4].indexOf($scope.company.bankVerificationStatus) == -1;
                    if(data.pan){
                      addrProofsList($scope.panNum);
                    }
                    if($scope.kyc_details.length != 0){
                      $scope.pan_document = data.kyc_details.pan_document_url;
                      $scope.address_document = data.kyc_details.document_url;
                    }
                  }
              })
              .error(function(error){
                AppService.isAuth(error);
              })
          }

          $scope.removeCompanyShipingDetail = function()
          {
              if( $scope.checked )
              {
                  $('.message').remove();
                  checkPincodeForServiciability($scope.company.billingAddress.pinCode, '');
                  $("input[name='billing_pin_code']").bind('keyup', $scope.checkPickupInSameaddress);
              }
              else
              {
                  $("input[name='billing_pin_code']").unbind('keyup')
              }

              if(!$scope.checked && !$scope.isEditShippingAddresh)
              {
                  $scope.company.shippingAddress.addressLine1 = '';
                  $scope.company.shippingAddress.addressLine2 = '',
                  // $scope.company.shippingAddress.country = '';
                  $scope.company.shippingAddress.state = defaultCity;
                  $scope.company.shippingAddress.city = '';
                  $scope.company.shippingAddress.pinCode = '';
                  $scope.company.shippingAddress.phone = '';
              }
          }


          $scope.getCompanyDetail = function()
          {
              getCompanyDetails();
          }

          $scope.checkPickupService = function($event)
          {
              $('.message').remove();
              if($scope.company.shippingAddress.pinCode.length != 6 )
              {
                  return;
              }
              var target = angular.element($event.currentTarget);
              checkPincodeForServiciability($scope.company.shippingAddress.pinCode, target);
          }

          $scope.company.submit = function($event){
              var target = angular.element($event.currentTarget);
              var shipping_is_billing = 0;
              $('.validation-alert').remove();
              $('input').removeClass('red-border');
              if( !isPickUpserviceable ){
                  Notify.alert("Pickup pincode not Serviceable")
                  return;
              }

              $scope.isPreloader = true;
              var formData = new FormData();

              switch ($state.current.name) {
                case 'app.companyGeneralDetails':
                  formData.append('page', 'general');
                  // formData.append("logo", $( "input[name ='logo']" )[0].files[0] === undefined ? '': $( "input[name ='logo']" )[0].files[0] );
                  formData.append('name', $scope.company.generalDetail.companyName);
                  formData.append('website', $scope.company.generalDetail.website);
                  formData.append('email', $scope.company.accountDetail.email);
                  formData.append('coupon_code', $scope.company.generalDetail.couponCode);
                  break;

                case 'app.companyAddressDetails':
                  var shipping_is_billing = $scope.checked ? 1 : 0;
                  formData.append('page', 'address');
                  formData.append('billing_address', $scope.company.billingAddress.addressLine1);
                  formData.append('billing_address_2', $scope.company.billingAddress.addressLine2);
                  formData.append('billing_city', $scope.company.billingAddress.city);
                  formData.append('billing_state', $scope.company.billingAddress.state === defaultCity ? '': $scope.company.billingAddress.state);
                  formData.append('billing_country', $scope.company.billingAddress.country);
                  formData.append('billing_pin_code', $scope.company.billingAddress.pinCode);
                  formData.append('billing_phone', $scope.company.billingAddress.phone);
                  formData.append('shipping_is_billing', shipping_is_billing);

                  if(!$scope.checked){
                    formData.append('shipping_address', $scope.company.shippingAddress.addressLine1);
                    formData.append('shipping_address_2', $scope.company.shippingAddress.addressLine2);
                    formData.append('shipping_city', $scope.company.shippingAddress.city);
                    formData.append('shipping_state', $scope.company.shippingAddress.state === defaultCity ? '': $scope.company.shippingAddress.state);
                    formData.append('shipping_country', $scope.company.shippingAddress.country);
                    formData.append('shipping_phone', $scope.company.shippingAddress.phone);
                    formData.append('shipping_pin_code', $scope.company.shippingAddress.pinCode);
                  }
                  break;

                case 'app.companyBankDetails':
                  formData.append('page', 'bank');
                  formData.append('pan', $scope.company.accountDetail.pan);
                  formData.append('tin', $scope.company.accountDetail.tin);
                  formData.append('cin', $scope.company.accountDetail.cin);
                  formData.append('cst', $scope.company.accountDetail.centalSaleTax);
                  formData.append('gst', $scope.company.accountDetail.gst);
                  formData.append('invoice_prefix', $scope.company.accountDetail.invoicePrefix);
                  formData.append('invoice_serial', $scope.company.accountDetail.invoiceNext);
                  formData.append('digital_sign', $scope.company.accountDetail.digital_sign);
                  if(!$scope.isbankDetailDisabled){
                    formData.append('bank_account_number', $scope.company.bankDetail.accountNumber);
                    formData.append('bank_account_type', $scope.company.bankDetail.accountType);
                    formData.append('beneficiary_name', $scope.company.bankDetail.beneficiaryName);
                    formData.append('bank_ifsc_code', $scope.company.bankDetail.IfscCode);
                    formData.append('canceled_cheque', $scope.company.bankDetail.canceledCheque);
                  }
                  break;

                case 'app.labelBuyerSettings':
                  var data = {
                    'label_generate_type' : $scope.labelType,
                    'display_price_on_label' : $scope.displayPriceOnLabel,
                    'display_number_on_label' : $scope.displayNumberOnLabel,
                    'display_address_on_label' : $scope.displayAddressOnLabel,
                    'send_customer_sms' : $scope.enableBuyerSmsComm,
                    'send_customer_email' : $scope.enableBuyerEmailComm
                  }
                  break;
              }

              var user = $localStorage.USER;
              user.company_name = $scope.company.generalDetail.companyName;

              if($state.current.name == 'app.labelBuyerSettings'){
                var url = 'settings/company-settings';
                var postCompanyDetails = AppService.post(url, true, data)
              } else {
                var url = 'settings/company';
                var postCompanyDetails = AppService.postFormData(url, formData, true);
              }

              postCompanyDetails
              .success(function(data){
                $scope.isPreloader = false;
                switch ($state.current.name) {
                  case 'app.companyGeneralDetails':
                    $localStorage.USER = user;
                    Notify.alert("Company Details Updated Successfully!",  {status: 'success'});
                    if ($stateParams.redirect_url == 'welcome'){
                      $state.go("app.companyAddressDetails",{'redirect_url': 'welcome'});
                    }else{
                      $state.go("app.companyAddressDetails");
                    }
                    break;

                  case 'app.companyAddressDetails':
                    Notify.alert("Company Details Updated Successfully!",  {status: 'success'});
                    if ($stateParams.redirect_url == 'welcome'){
                      $state.go("app.companyBankDetails", {'redirect_url': 'welcome'});
                    }else{
                      $state.go('app.companyBankDetails');
                    }
                    break;

                  case 'app.companyBankDetails':
                    if(data.onboarding_completed_now){
                      var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: 'app/views/modals/preview-company-details.html',
                        controller:'PreviewCompanyDetailsController',
                        size: 'lg',
                        resolve: {
                          items: function (){
                            return {
                              redirect: !!$stateParams.redirect_url,
                              redirect_to: $stateParams.redirect_url
                            };
                          }
                        }
                      });
                    } else {
                      Notify.alert('Your Accounting Details have been updated.', {status: 'success'});
                      $state.reload();
                    }
                    break;

                  case 'app.labelBuyerSettings':
                    Notify.alert("Label and Buyers Communication Setting have been updated!",  {status: 'success'});

                    break;

                  default:
                    if (data.onboarding_completed_now){
                      Notify.alert("Company Details Updated Successfully!",  {status: 'success'});
                      var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: 'thankyoumessage3.html',
                        controller:'bulkReassignController',
                        size: 'md',
                        backdrop  : 'static',
                        keyboard  : false,
                        resolve: {
                          items: function (){
                           return '';
                          }
                        }
                      });

                      $state.go('app.processing');
                    }else{
                      $state.reload();
                    }
                }

            })
            .error(function(error){
              $scope.isPreloader = false;
              if(error.status_code === 422){
                $scope.invalidCouponCode = error.errors.coupon_code? error.errors.coupon_code[0]: false;
                AppService.alertValidation(error.errors, true);
                Notify.alert("Please correct below given errors !");
              }
              else{
                AppService.isAuth(error);
              }
            })
          }

          $scope.updateLogo = function(){
              var formData = new FormData();
              formData.append("logo", $( "input[name ='logo']" )[0].files[0] === undefined ? '': $( "input[name ='logo']" )[0].files[0] );

              AppService.postFormData('settings/logo', formData , true)
              .success(function(data){
                  $scope.company.generalDetail.logo = data.logo_url;
              })
              .error(function(error){
                  AppService.isAuth(error);
              })
          }

          $scope.removeLogo = function(event){
              AppService.deleteData('settings/logo', true)
              .success(function(data){
                  //$scope.company.generalDetail.logo = "/app/img/noimage.jpg";
                  // $('.delete-image').css('display', 'none');
                  $scope.company.generalDetail.logo = '';
              })
              .error(function(error){
                  AppService.isAuth(error);
              })
          }

          $scope.checkCouponValidity = function (couponCode) {
              var data = {
                  'code' : couponCode
              }
              $scope.validCoupon = false;

              AppService.post('coupons/check', true, data)
                  .success(function(data)
                  {
                      if (data.valid == true) {
                          $scope.validCoupon = true;
                          $scope.couponValidity ='fa-check-circle text-success';
                          $scope.invalidCouponCode = false;
                      }
                      else{
                          $scope.couponValidity = 'fa-times-circle text-danger';
                      }
                  })
                  .error(function(error)
                  {
                      AppService.isAuth(error);
                      $scope.isPreloader = false;
                  })
          }

          function checkPincodeForServiciability(pincode, target){
              if(pincode.length == 0){
                return;
              }
              $('.message').remove();
              var url = 'courier/pickup/'+ pincode;

              AppService.get(url , true)
              .success(function(data){
                isPickUpserviceable = true;
              })
              .error(function(error){
                  $scope.isPreloader = false;
                   if(error.status_code == 404){
                      isPickUpserviceable = false;
                      var message =  '<div class="message p-sm bg-danger-dark"><em class="fa fa-close mr-sm"></em>' +error.message+ '</div>'
                      $('.message').remove();
                      if( !target )
                      {
                          $("input[name='billing_pin_code']").after(message);
                      }
                      else
                      {
                          target.parent().find('.message').remove();
                          target.after(message);
                      }
                  }
                  else
                  {
                      AppService.isAuth(error);
                  }
              })

          }


          $scope.uploadDocument = function(document, fileType){
              $scope.isPreloader = true;
              var formData = new FormData();
              formData.append("document", document === undefined ? '': document);
              formData.append("file_type", fileType );

              AppService.postFormData('settings/company/docs', formData , true)
              .success(function(data){
                switch (fileType) {
                  case 'address_document':
                    $scope.address_document = data.document_url;
                    break;
                  case 'pan_document':
                    $scope.pan_document = data.document_url;
                    break;
                  case 'digital_sign':
                    $scope.company.accountDetail.digital_sign = data.document_url;
                    break;
                  case 'canceled_cheque':
                    $scope.company.bankDetail.canceledCheque = data.document_url;
                    break;
                  default:

                }
                if(fileType == 'digital_sign'){
                    $scope.company.accountDetail.digital_sign = data.document_url;
                }else if(fileType=="canceled_cheque"){
                    $scope.company.bankDetail.canceledCheque = data.document_url;
                }
                $scope.isbankDetailDisabled = [0,1,3,4].indexOf($scope.company.bankVerificationStatus) == -1;
                $scope.isPreloader = false;
              })
              .error(function(error){
                AppService.isAuth(error);
              })
          };

          $scope.addPickupLocation= function()
          {
              if($scope.addMoreAddress == 'true'){
                  var modalInstance = $uibModal.open({
                      animation: true,
                      templateUrl: 'app/views/modals/addPickupLocation.html',
                      controller:'addPickupLocationController',
                      size: 'lg'
                  })
                  .closed.then(getPickupLocation());
              }
              else
              {
                  Notify.alert("You have added maximum Numbers of Pickup Address", { timeout: 3000, status: 'danger' });
              }
          };

          $scope.changeStatus = function(add, status, type, index)
          {
              if(status == 2)
              {
                  Notify.alert("Sorry! Primary pick up location cannot be disabled. To change the location.", { timeout: 3000, status: 'danger' });
                  return
              }
              loaderFactory.display("Please Wait!");
              var data = {
                  'pickup_location': add,
                  'type': type,
                  'status': status
              }
              AppService.patch('settings/company/changepickupstatus', true, data)
              .success(function(data){
                loaderFactory.hide();
                getPickupLocation();
              })
              .error(function(error){
                getPickupLocation();
                AppService.isAuth(error);
                loaderFactory.hide();
              })
          }

          $scope.getCompanySlug = function()
          {
            $scope.isPreloader = true;
              AppService.get('settings/company/getslug', true)
              .success(function(data)
              {   $scope.sluglink.url = '';
                  $scope.sluglink.slug = data.slug;
                  $scope.company.slug = data.slug;
                  if(!data.slug){
                      $scope.sluglink.show = false;
                  }
                  else
                  {
                      $scope.sluglink.show = true;
                      $scope.sluglink.url += 'https://'+ $scope.sluglink.slug +'.shiprocket.in';
                      $scope.isPreloader = false;
                  }

              })
              .error(function(error)
              {
                  AppService.isAuth(error);
                  $scope.isPreloader = false;
              })
          }

          function getPickupLocation()
          {
              loaderFactory.display("Please Wait!");
              AppService.get('settings/company/pickup', true)
              .success(function(data)
              {
                  $scope.shippingAddress = data.data.shipping_address;
                  $scope.addMoreAddress = data.data.allow_more;
                  //RTO Address
                  if($state.current.name == 'app.rtoPickup'){
                    getRTOInfo();
                  }
                  //RTO Adderss
                  loaderFactory.hide();
              })
              .error(function(error)
              {
                  AppService.isAuth(error);
                  loaderFactory.hide();
              })
          }

          $scope.companySlug = function()
          {
              var data = {
                  'slug' : $scope.company.slug
              }
              $scope.isPreloader = true;
              AppService.post('settings/company/slug', true, data)
              .success(function(data)
              {   $scope.sluglink.url = '';
                  $scope.sluglink.show = true;
                  if(data.status == 201)
                  {
                      $scope.sluglink.url += 'https://'+$scope.sluglink.slug +'.shiprocket.in';
                      $scope.getCompanySlug();
                      $scope.sluglink.show = true;
                  }
                  $scope.isPreloader = false;
              })
              .error(function(error)
              {
                  AppService.isAuth(error);
                  $scope.getCompanySlug();
                  $scope.isPreloader = false;
              })
          }

          $scope.showAdvanceOpt = function(isShowOptions)
          {   if(isShowOptions)
              {
                  $scope.sluglink.url = '';
                  var tax = $scope.sluglink.tax;
                  $scope.sluglink.tax = '';
                  $scope.sluglink.tax = tax == null ? 0 : tax;
                  $scope.advanceOption = true;
                  $scope.sluglink.url = 'https://'+ $scope.sluglink.slug +'.shiprocket.in/';
                  $scope.sluglink.show = true;
              }
              else{
                  $scope.isPreloader = true;
                  $scope.uploadImgFile = $('.UploadImg')[0].files;

                  var formData = new FormData();
                  formData.append('image', $scope.uploadImgFile[0]);
                  formData.append('product_name', $scope.sluglink.product);
                  formData.append('product_price', $scope.sluglink.price);
                  formData.append('tax_percentage', $scope.sluglink.tax);
                  formData.append('payment_mode', $scope.sluglink.paymentMode);

                  AppService.postFormData('linkship/', formData, true)
                  .success(function(data){
                      $scope.sluglink.url = data.url
                      $scope.isPreloader = false;
                  })
                  .error(function(error){
                      AppService.isAuth(error);
                      $scope.isPreloader = false;
                  })
              }
          }

          $scope.readAndPreview = function(file)
          {
              $scope.imgFile = '';
              var files = file.files[0];
              if ( /\.(jpe?g|png|gif)$/i.test(files.name) ) {
                var reader = new FileReader();
                reader.addEventListener("load", function () {
                  var obj = {};
                  obj.name = file.name;
                  obj.size = file.size;
                  obj.type = file.type;
                  obj.base64 = this.result;
                  $scope.$apply(function () {
                      $scope.imgFile = obj;
                  });
                }, false);
               reader.readAsDataURL(files);

              }
          }

          $scope.removeImage = function()
          {
              $scope.imgFile = '';
              $('.UploadImg').val('');
          }

          // Get API USER

          function getApiUser()
          {
              $scope.isPreloader = true;
              AppService.get(SR_CONSTANTS.api_urls.get_api_users, true)
              .success(function(data){
                  $scope.apiUsers = data;
                  $scope.isPreloader = false;
              })
              .error(function(error){
                  AppService.isAuth(error);
                  $scope.isPreloader = false;
              });
          }

          $scope.ApiUserCreatenReset = function(apiUser)
          {
              var modalInstance = $uibModal.open({
                  animation: true,
                  templateUrl: 'app/views/modals/create_api_user.html',
                  controller:'createApiUserController',
                  size: 'md',
                  backdrop  : 'static',
                  keyboard  : false,
                  resolve: {
                      items: function ()
                      {
                       return apiUser;
                      }
                  }
              });
          }

          $scope.editPickupLocation = function(address)
          {
               var modalInstance = $uibModal.open({
                  animation: true,
                  templateUrl: 'app/views/modals/edit_pickup_code.html',
                  controller:'editPickupAddressController',
                  size: 'recharge',
                  keyboard  : false,
                  bindToController: false,
                  resolve: {
                      items: function ()
                      {
                       return address;
                      }
                  }
              });
          }

          $scope.copyToClipboard = function(elementId) {
            var aux = document.createElement("input");
            aux.setAttribute("value", document.getElementById(elementId).innerHTML);
            document.body.appendChild(aux);
            aux.select();
            document.execCommand("copy");
            document.body.removeChild(aux);

          }

          getApiUser();
          getPickupLocation();
          $scope.getCompanySlug();
        }
    }
})();

(function () {
    'use strict';
    angular.module('app.setting').controller('editCompanydetailController', editCompanydetailController);
    editCompanydetailController.$inject = ['$rootScope', '$scope', 'AppService', '$state', 'Notify', '$localStorage', '$compile'];
    function editCompanydetailController($rootScope, $scope, AppService, $state, Notify, $localStorage, $compile) 
    {
    	$scope.company = {};
        var defaultCity = 'Select State';
        var isPickUpserviceable = true;
        $scope.selectedState = '';
        $scope.checked = false;
        $scope.searchCompanyName = '';
        $scope.searchBy = 'companyname';
        $scope.companyinfo = '';
        $scope.company.generalDetail = 
        {
            companyName: '',
            logo: '',
            website: ''
        }

        $scope.company.bankDetail = 
        {

            accountNumber: '',
            accountType: '',
            beneficiaryName: '',
            IfscCode: '',
            canceledCheque: ''
        }

        $scope.company.accountDetail = 
        {
            pan: '',
            tin: '',
            cin: '',
            centalSaleTax: '',
            invoicePrefix: '',
            invoiceNext: '',
            manifestPrefix: '',
            manifestNext: '',
            email: ''
        }

        $scope.company.billingAddress = 
        {
            addressLine1: '',
            addressLine2: '',
            country: 'India',
            state: '',
            city: '',
            pinCode: '',
            phone: '',
        }

        $scope.company.shippingAddress = 
        {
            addressLine1: '',
            addressLine2: '',
            country: 'India',
            state: '',
            city: '',
            pinCode: '',
            phone: '',
        }

        $scope.searchby = function()
        {
            $scope.searchCompanyName = '';
            $('.company-wrapper').find('.options').html('');
            $scope.company.generalDetail = 
            {
                companyName: '',
                logo: '',
                website: ''
            }

            $scope.company.bankDetail = 
            {

                accountNumber: '',
                accountType: '',
                beneficiaryName: '',
                IfscCode: '',
                canceledCheque: ''
            }

            $scope.company.accountDetail = 
            {
                pan: '',
                tin: '',
                cin: '',
                centalSaleTax: '',
                invoicePrefix: '',
                invoiceNext: '',
                manifestPrefix: '',
                manifestNext: '',
                email: ''
            }

            $scope.company.billingAddress = 
            {
                addressLine1: '',
                addressLine2: '',
                country: 'India',
                state: '',
                city: '',
                pinCode: '',
                phone: '',
            }

            $scope.company.shippingAddress = 
            {
                addressLine1: '',
                addressLine2: '',
                country: 'India',
                state: '',
                city: '',
                pinCode: '',
                phone: '',
            }
        }
        $scope.searchCompany = function($event, index)
        {
            $('.options').html('');
            $('.company-wrapper .error-append').find('.bg-danger-dark').remove();
            var target = angular.element($event.currentTarget);
           // $scope.isPreloader = true;
            var companyName = $scope.searchCompanyName;
            if($scope.searchBy == 'companyname')
            {
                var url = 'admin/company/search?company_name='+companyName;
            }
            else
            {
                if (validateEmail(companyName))
                {
                    $('.company-wrapper .error-append').find('.bg-danger-dark').remove();
                    var url = 'admin/company/search?user_email='+companyName;
                }
                else
                {
                    $scope.isPreloader = false;
                    $('.company-wrapper .error-append input').after('<div class="bg-danger-dark p-sm">Please Enter Valid Email Id</div>')
                    return false;
                }
                
            }
            AppService.get(url, true)
            .success(function(data)
            {
                $scope.isPreloader = false;
                var html =  '';
                var users = data.users;
                if(users)
                {
                    for(var i=0; i<users.length; i++)
                    {
                       var usersCompany = users[i].company;
                       html +=  '<div ng-click="dataUpdate()" data-companyid="'+ usersCompany.id + '" class="user-wrapper p-sm bg-gray-light bb" '+ 'data-name="' + usersCompany.name +'">'+ usersCompany.name  +'</div>'
                    }
                    
                    target.closest('.company-wrapper').find('.options').html($compile(html)($scope));
                    $('.company-dorpdown').show();

                    $(".user-wrapper").bind("click", (function ()
                    {
                        var userCompany = [];
                        userCompany.id = $(this).attr("data-companyid");
                        userCompany.name = $(this).attr("data-name");
                        $('.company-wrapper input').val(userCompany.name); 
                        $(this).closest('.company-wrapper').find('.options').html('');
                        $scope.companyinfo = search(userCompany.id, users);                                                                                                                                                                                                                                                                                                                                                                                                                                                          
                    }));
                    $(".company-wrapper .productId").keypress(function(){
                       $('.company-dorpdown').show();
                    });
                }
                else
                {   
                    return false;
                }
                
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
            })
        }

        $scope.dataUpdate = function()
        {
            var company = $scope.companyinfo;
            var companyShippingAdd = $scope.companyinfo.shipping_address;
            AppService.get('settings/create', true)
            .success(function(data)
            {   
                $scope.countryList = data.data.countries;
                $scope.stateList = data.data.states;
                $scope.stateList.unshift(defaultCity);
                $scope.isPreloader = false;
               
            })
            .error(function(error)
            {
                AppService.isAuth(error);
            })
            if($scope.companyinfo)
            { 
                $scope.company.generalDetail.companyName = company.name;
                //$scope.company.generalDetail.logo = '';
                $scope.company.generalDetail.website = company.website;

                $scope.company.bankDetail.accountNumber = company.bank_account_number;
                $scope.company.bankDetail.accountType = company.bank_account_type;
                $scope.company.bankDetail.beneficiaryName = company.beneficiary_name;
                $scope.company.bankDetail.IfscCode = company.bank_ifsc_code;
                $scope.company.bankDetail.canceledCheque = '';

                $scope.company.accountDetail.pan = company.pan;
                $scope.company.accountDetail.tin = company.tin;
                $scope.company.accountDetail.cin = company.cin;
                $scope.company.accountDetail.centalSaleTax = company.cst;
                $scope.company.accountDetail.invoicePrefix = company.invoice_prefix;
                $scope.company.accountDetail.invoiceNext = '';
                $scope.company.accountDetail.manifestPrefix = company.manifest_prefix;
                $scope.company.accountDetail.manifestNext = '';
                $scope.company.accountDetail.email = company.email;

                $scope.company.billingAddress.addressLine1 = company.billing_address;
                $scope.company.billingAddress.addressLine2 = company.billing_address_2;
                $scope.company.billingAddress.country = 'India';
                $scope.company.billingAddress.state = company.billing_state;
                $scope.company.billingAddress.city = company.billing_city;
                $scope.company.billingAddress.pinCode = company.billing_pin_code;
                $scope.company.billingAddress.phone = company.billing_phone;

                $scope.company.shippingAddress.addressLine1 = companyShippingAdd.address;
                $scope.company.shippingAddress.addressLine2 = companyShippingAdd.address_2;
                $scope.company.shippingAddress.country = 'India';
                $scope.company.shippingAddress.state = companyShippingAdd.state;
                $scope.company.shippingAddress.city = companyShippingAdd.city;
                $scope.company.shippingAddress.pinCode = companyShippingAdd.pin_code;
                $scope.company.shippingAddress.phone = companyShippingAdd.phone;
             }   
            else
            {
                return false;
            }
        }

         function validateEmail(email)
         {
              var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
              return re.test(email);
         }

        function search(nameKey, myArray){
            for (var i=0; i < myArray.length; i++) {
                var company = myArray[i].company;
                if (company.id == nameKey) {
                    return company;
                }
            }
        }

        $scope.checkPickupInSameaddress = function($event)
        {
            $('.message').remove();
            if($scope.company.billingAddress.pinCode.length != 6 )
            {
                return;
            }
            setTimeout(function() {
                checkPincodeForServiciability($scope.company.billingAddress.pinCode, '');
            }, 10);
        }

        $scope.company.submit = function($event) 
        {   
            var target = angular.element($event.currentTarget);
            var shipping_is_billing = 0;
            $('.validation-alert').remove();
            $('input').removeClass('red-border');
            if( !isPickUpserviceable )
            {
                Notify.alert("Pickup pincode not Serviceable")
                return;
            }

            $scope.isPreloader = true;
            var formData = {};
            formData.pan = $scope.company.accountDetail.pan;
            formData.tin = $scope.company.accountDetail.tin;
            formData.cin = $scope.company.accountDetail.cin;
            formData.cst = $scope.company.accountDetail.centalSaleTax;
            formData.bank_account_number = $scope.company.bankDetail.accountNumber;
            formData.bank_account_type = $scope.company.bankDetail.accountType;
            formData.beneficiary_name = $scope.company.bankDetail.beneficiaryName;
            formData.bank_ifsc_code = $scope.company.bankDetail.IfscCode;
            //formData.canceled_cheque = '';
            formData.billing_address = $scope.company.billingAddress.addressLine1;
            formData.billing_address_2 = $scope.company.billingAddress.addressLine2;
            formData.billing_city = $scope.company.billingAddress.city;
            formData.billing_state = $scope.company.billingAddress.state === defaultCity ? '': $scope.company.billingAddress.state;
            formData.billing_country = $scope.company.billingAddress.country;
            formData.billing_pin_code = $scope.company.billingAddress.pinCode;
            formData.billing_phone = $scope.company.billingAddress.phone;
 
            formData.shipping_address = $scope.checked ? $scope.company.billingAddress.addressLine1 : $scope.company.shippingAddress.addressLine1;
            formData.shipping_address_2 = $scope.checked ? $scope.company.billingAddress.addressLine2 : $scope.company.shippingAddress.addressLine2;
            formData.shipping_city = $scope.checked ? $scope.company.billingAddress.city : $scope.company.shippingAddress.city;
            formData.shipping_state = $scope.checked ?  $scope.company.billingAddress.state === defaultCity ? '' : $scope.company.billingAddress.state : $scope.company.shippingAddress.state === defaultCity ? '': $scope.company.shippingAddress.state;
            formData.shipping_country = $scope.checked ? $scope.company.billingAddress.country : $scope.company.shippingAddress.country;
            formData.shipping_phone = $scope.checked ? $scope.company.billingAddress.phone : $scope.company.shippingAddress.phone;
            formData.shipping_pin_code = $scope.checked ? $scope.company.billingAddress.pinCode : $scope.company.shippingAddress.pinCode;

            AppService.post('admin/company/'+ $scope.companyinfo.id+'/update' , true, formData)
            .success(function(data)
            {   
                $scope.isPreloader = false;
                Notify.alert("Company Details Updated Successfully!",  {status: 'success'});

            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                if(error.status_code === 422)
                {
                    AppService.alertValidation(error.errors, true);
                    Notify.alert("Please correct below given errors !");
                }
                else
                {
                    AppService.isAuth(error);
                }
            })

        }

        $scope.checkPickupService = function($event)
        {
            $('.message').remove();
            if($scope.company.shippingAddress.pinCode.length != 6 )
            {
                return;
            }
            var target = angular.element($event.currentTarget);
            checkPincodeForServiciability($scope.company.shippingAddress.pinCode, target);
        }

        function checkPincodeForServiciability(pincode, target)
        {
            $('.message').remove();
            var url = 'courier/pickup/'+ pincode;

            AppService.get(url , true)
            .success(function(data)
            {
                isPickUpserviceable = true;
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                 if(error.status_code == 404)
                {
                    isPickUpserviceable = false;
                    var message =  '<div class="message p-sm bg-danger-dark"><em class="fa fa-close mr-sm"></em>' +error.message+ '</div>'
                    $('.message').remove();
                    if( !target )
                    {   
                        $("input[name='billing_pin_code']").after(message);
                    }
                    else
                    {
                        target.parent().find('.message').remove();
                        target.after(message);
                    }
                }
                else
                {
                    AppService.isAuth(error);
                }
            })

        }
    }
})();

;(function(){
    'use strict';

    angular
    .module('app.setting')
    .controller('PreviewCompanyDetailsController', PreviewCompanyDetailsController);

    PreviewCompanyDetailsController.$inject = [ '$stateParams','$rootScope', '$scope', 'AppService' , '$state', 'Notify', '$uibModalInstance', 'items' ];

    function PreviewCompanyDetailsController( $stateParams, $rootScope, $scope, AppService ,$state, Notify, $uibModalInstance, items ){
      activate();
      function activate(){
        Notify.alert("Company Details Updated Successfully. Onboarding Complete.",  {status: 'success', timeout: 3000});
        $scope.isPreloader = true;
        $scope.company={};
        $scope.company.generalDetail =
        {
          companyName: '',
          logo: '',
          website: ''
        };

        $scope.company.bankDetail =
        {
          accountNumber: '',
          accountType: '',
          beneficiaryName: '',
          IfscCode: '',
          canceledCheque: ''
        };

        $scope.company.accountDetail =
        {
          pan: '',
          tin: '',
          cin: '',
          centalSaleTax: '',
          invoicePrefix: '',
          invoiceNext: '',
          manifestPrefix: '',
          manifestNext: '',
          email: '',
          gst: ''
        };

        $scope.company.billingAddress =
        {
          addressLine1: '',
          addressLine2: '',
          country: 'India',
          state: '',
          city: '',
          pinCode: '',
          phone: ''
        };

        $scope.company.shippingAddress =
        {
          addressLine1: '',
          addressLine2: '',
          country: 'India',
          state: '',
          city: '',
          pinCode: '',
          phone: ''
        };
        $scope.proceedToOrders = proceedToOrders

        AppService.get('settings/company', true)
        .success(function(data){
          if(data.logo == '') {
            $('.delete-image').css('display', 'none');
          }
          $scope.isPreloader = false;
          var data = data.data;
          $scope.company.generalDetail.companyName = data.name;
          $scope.company.generalDetail.website = data.website;
          $scope.company.generalDetail.logo = data.logo;
          $scope.company.accountDetail.pan = data.pan;
          $scope.company.accountDetail.tin = data.tin;
          $scope.company.accountDetail.cin = data.cin;
          $scope.company.accountDetail.gst = data.gst;
          $scope.company.accountDetail.centalSaleTax = data.cst;
          $scope.company.accountDetail.invoicePrefix = data.invoice_prefix;
          $scope.company.accountDetail.invoiceNext = data.invoice_serial;
          $scope.company.bankDetail.accountNumber = data.bank_account_number;
          $scope.company.bankDetail.accountType = data.bank_account_type;
          $scope.company.bankDetail.beneficiaryName = data.beneficiary_name;
          $scope.company.bankDetail.IfscCode = data.bank_ifsc_code;
          $scope.company.billingAddress.addressLine1 = data.billing_address;
          $scope.company.billingAddress.addressLine2 = data.billing_address_2;
          $scope.company.billingAddress.country = data.billing_country == '' || null ?'India': data.billing_country;
          $scope.company.billingAddress.state = data.billing_state == '' || null ? defaultCity: data.billing_state;
          $scope.company.billingAddress.city = data.billing_city;
          $scope.company.billingAddress.pinCode = data.billing_pin_code;
          $scope.company.billingAddress.phone = data.billing_phone;
          $scope.company.shippingAddress.addressLine1 = data.shipping_address;
          $scope.company.shippingAddress.addressLine2 = data.shipping_address_2;
          $scope.company.shippingAddress.country = data.shipping_country == '' || null ?'India': data.shipping_country;
          $scope.company.shippingAddress.state = data.shipping_state == '' || null ? defaultCity : data.shipping_state;
          $scope.company.shippingAddress.city = data.shipping_city;
          $scope.company.shippingAddress.pinCode = data.shipping_pin_code;
          $scope.company.shippingAddress.phone = data.shipping_phone;
          $scope.company.accountDetail.manifestPrefix = data.manifest_prefix;
          $scope.company.accountDetail.manifestNext = data.manifest_serial;
          $scope.company.accountDetail.email = data.email;
          $scope.company.logo = data.logo;
          $scope.company.bankDetail.canceledCheque = data.canceled_cheque[0];
          $scope.company.accountDetail.digital_sign = data.digital_sign[0];
        })
        .error(function(error){
          AppService.isAuth(error);
        });

        function proceedToOrders() {
          $uibModalInstance.dismiss('cancel');
          $state.go('app.processing');
        };

        function cancel() {
          $uibModalInstance.dismiss('cancel');
          $state.reload();
        };
      }
  }
})();

(function() {
    'use strict';
    angular.module('app.setting').controller('rechargeController', rechargeController);

    rechargeController.$inject = ['$rootScope', '$scope', '$state', 'AppService', 'ga_service', '$localStorage', '$sessionStorage', '$uibModalInstance', 'SR_CONSTANTS', '$cookies'];

    function rechargeController($rootScope, $scope, $state, AppService, ga_service, $localStorage, $sessionStorage, $uibModalInstance, SR_CONSTANTS, $cookies) {
        if($localStorage.USER){
          activate();
        }
        ////////////////
        function activate() {
            // $scope.amount = '500'
            $scope.storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
            $scope.isPreloader = false;
            AppService.get(SR_CONSTANTS.api_urls.get_recharge_amount_weight, true)
                .success(function(data) {
                    var rechargeData = data.data;
                    var length = rechargeData.length;
                    for (var i = 0; i < length; i++) {
                        if ($scope.storeddata.is_fixed_plan) {
                            rechargeData[i].amountAndWeight = '₹ ' + rechargeData[i].amount;
                        } else {
                            rechargeData[i].amountAndWeight = '₹ ' + rechargeData[i].amount + ' / ' + rechargeData[i].weight + ' KG';
                        }
                    }

                    $scope.amountAndWeight = rechargeData;
                    $scope.amountValue = rechargeData[0];
                    $scope.isPreloader = false;
                })
                .error(function(error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                });

            $scope.submitRecharge = function() {
                Intercom('trackEvent', 'Recharge Clicked');
                $scope.isPreloader = true;
                $localStorage.temp_data = { 'amount': $scope.amountValue.amount };
                var data = {
                    'amount': $scope.amountValue.amount
                }

                if (angular.isDefined($cookies.getObject('UTM'))) {
                    data = _.merge(data, $cookies.getObject('UTM'));
                }

                ga_service.send('Recharge', 'Clicked on pay - popup');
                AppService.post(SR_CONSTANTS.api_urls.recharge, true, data)
                    .success(function(data) {
                        setTimeout(function() {
                            $("body").html(data);
                            $scope.isPreloader = false;
                        }, 200);
                    })
                    .error(function(error) {
                        $scope.isPreloader = false;
                        AppService.isAuth(error);
                    })

            }

            $scope.cancel = function() {
                $uibModalInstance.dismiss('cancel');
            }

        }
    }
})();

(function() {
    'use strict';
    angular.module('app.setting').controller('rechargePageController', rechargePageController);

    rechargePageController.$inject = ['$rootScope', '$scope', '$state', 'AppService', '$sessionStorage', '$localStorage', 'ga_service', 'SR_CONSTANTS', '$cookies'];

    function rechargePageController($rootScope, $scope, $state, AppService, $sessionStorage, $localStorage, ga_service, SR_CONSTANTS, $cookies) {
        if($localStorage.USER){
          activate();
        }
        ////////////////
        function activate() {
            // $scope.amount = '500'
            $scope.storeddata = JSON.parse(localStorage.getItem('ngStorage-USER'));
            $scope.isPreloader = false;
            AppService.get('billing/recharge/amount_weight', true)
                .success(function(data) {
                    var rechargeData = data.data;
                    var length = rechargeData.length;
                    for (var i = 0; i < length; i++) {
                        if ($scope.storeddata.is_fixed_plan) {
                            rechargeData[i].amountAndWeight = '₹ ' + rechargeData[i].amount;
                        } else {
                            rechargeData[i].amountAndWeight = '₹' + rechargeData[i].amount + ' / ' + rechargeData[i].weight + ' KG';
                        }
                    }

                    $scope.amountAndWeight = rechargeData;
                    $scope.amountValue = rechargeData[0];
                    $scope.isPreloader = false;
                })
                .error(function(error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })

            $scope.submitRecharge = function() {
                Intercom('trackEvent', 'Recharge Clicked');
                $scope.isPreloader = true;
                $localStorage.temp_data = { 'amount': $scope.amountValue.amount };
                var data = {
                    'amount': $scope.amountValue.amount
                }

                if (angular.isDefined($cookies.getObject('UTM'))) {
                    data = _.merge(data, $cookies.getObject('UTM'));
                }

                ga_service.send('Recharge', 'Clicked on pay - popup');
                AppService.post(SR_CONSTANTS.api_urls.recharge, true, data)
                    .success(function(data) {
                        setTimeout(function() {
                            $("body").html(data);
                            $scope.isPreloader = false;
                        }, 200);
                    })
                    .error(function(error) {
                        $scope.isPreloader = false;
                        AppService.isAuth(error);
                    })
            }

            $scope.cancel = function() {
                $uibModalInstance.dismiss('cancel');
            }

        }
    }
})();

(function () {
	'use strict';

	angular.module('app.setting').controller('referralcontroller', referralcontroller);

	referralcontroller.$inject = [ '$stateParams', '$scope', 'AppService', 'Notify', 'loaderFactory', 'SR_CONSTANTS', 'ga_service'];

	function referralcontroller($stateParams, $scope, AppService, Notify, loaderFactory, SR_CONSTANTS, ga_service)
	{
		$scope.referralCode = '';
		$scope.mobileNumber = null;
		$scope.emailId = '';
		$scope.referralURL = '';
		$scope.fb = '';

		function getReferralCode()
		{
			loaderFactory.display('Please Wait!');
			AppService.get(SR_CONSTANTS.api_urls.getReferralCode, true)
			.success(function(data){
				$scope.referralCode = data.referral_code;
				$scope.referralURL = 'https://app.shiprocket.in/register?rcode='+data.referral_code;
				$scope.encoded = encodeURIComponent($scope.referralURL);
				loaderFactory.hide();
			})
			.error(function(error){
				AppService.isAuth(error);
				loaderFactory.hide();
			});
		}

		function sendReferralMsg(type)
		{

			let data = {
				type: type,
				mobile : $scope.mobileNumber,
				email:  $scope.emailId

			}

			loaderFactory.display('Please Wait!');
			AppService.post(SR_CONSTANTS.api_urls.SendReferralSms, true, data)
			.success(function(data){
				Notify.alert('Message Successfully Sent', {status:'success'});
				$scope.mobileNumber = null;
				$scope.emailId = '';
				$scope.sendReferralEmail.email.$touched = false;
				ga_service.send_with_newEmail('referral', 'click', 'Send'+type);
				loaderFactory.hide();
			})
			.error(function(error){
				AppService.isAuth(error);
				loaderFactory.hide();
			});
		}

		function copyToClipboard(elementId) {
          var aux = document.createElement("input");
          aux.setAttribute("value", 'https://app.shiprocket.in/register?rcode='+document.getElementById(elementId).value);
          document.body.appendChild(aux);
          aux.select();
          document.execCommand("copy");
          document.body.removeChild(aux);
          ga_service.send_with_newEmail('referral', 'click', 'Copy Code');
          Notify.alert('Referral Code Copied!', {status:'success'});
        }

        function trackSocialGA(social)
        {
        	ga_service.send_with_newEmail('referral', 'click', social);
        }

        $scope.copyToClipboard = copyToClipboard;
        $scope.sendReferralMsg  = sendReferralMsg;
        $scope.trackSocialGA = trackSocialGA;

		getReferralCode();
	}

})();


(function () {
    'use strict';
    angular.module('app.setting').controller('rootScopeController', rootScopeController);
    rootScopeController.$inject = ['$rootScope', '$scope', '$stateParams'];
    function rootScopeController($rootScope, $scope, $stateParams) 
    {
        $rootScope.backHistory = function()
        {
            window.history.back()
        }
    }
})();

(function () {
	'use strict';
	angular.module('app.setting').controller('setShippingLimitController', setShippingLimitController);
	setShippingLimitController.inject = ['$rootScope', '$scope', 'AppService', '$state', 'Notify', '$localStorage', 'loaderFactory'];

	function setShippingLimitController($rootScope, $scope, AppService, $state, Notify, $localStorage, $compile, loaderFactory)
	{
		$scope.company = {};
		$scope.searchBy = 'companyname';
		$scope.checked = false;
        $scope.searchCompanyName = '';
        $scope.isPostpaid = false;
        $scope.shippingMethod = 0;
        $scope.shippingLimits = null;
		$scope.company.generalDetail =
        {
            companyName: '',
            logo: '',
            website: ''
        }

        $scope.searchby = function()
        {
            $scope.searchCompanyName = '';
            $scope.isPostpaid = false;
            $scope.shippingMethod = 0;
            $scope.shippingLimits = null;
            $scope.company.generalDetail =
            {
                companyName: '',
                logo: '',
                website: ''
            }
        }

        $scope.searchCompany = function($event, index)
        {
        	loaderFactory.display('Please Wait!');
            $('.options').html('');
            $('.company-wrapper .error-append').find('.bg-danger-dark').remove();
            var target = angular.element($event.currentTarget);
            var companyName = $scope.searchCompanyName;
            if(!companyName)
            {
            	$scope.company.generalDetail =
		        {
		            companyName: '',
		            logo: '',
		            website: ''
		        }
                $scope.shippingMethod = 0;
                $scope.shippingLimits = null;
                $scope.isPostpaid = false;
		        loaderFactory.hide();
            	return ;
            }
            if($scope.searchBy == 'companyname')
            {
                var url = 'admin/company/search?company_name='+companyName;
            }
            else
            {
                if (validateEmail(companyName))
                {
                    $('.company-wrapper .error-append').find('.bg-danger-dark').remove();
                    var url = 'admin/company/search?user_email='+companyName;
                }
                else
                {
                    loaderFactory.hide();
                    $('.company-wrapper .error-append input').after('<div class="bg-danger-dark p-sm">Please Enter Valid Email Id</div>')
                    return false;
                }

            }
            AppService.get(url, true)
            .success(function(data)
            {
                loaderFactory.hide();
                var html =  '';
                var users = data.users;
                if(users)
                {
                    for(var i=0; i<users.length; i++)
                    {
                       var usersCompany = users[i].company;
                       html +=  '<div ng-click="dataUpdate()" data-companyid="'+ usersCompany.id + '" class="user-wrapper p-sm bg-gray-light bb" '+ 'data-name="' + usersCompany.name +'">'+ usersCompany.name  +'</div>'
                    }

                    target.closest('.company-wrapper').find('.options').html($compile(html)($scope));
                    $('.company-dorpdown').show();

                    $(".user-wrapper").bind("click", (function ()
                    {
                        var userCompany = [];
                        userCompany.id = $(this).attr("data-companyid");
                        userCompany.name = $(this).attr("data-name");
                        $('.company-wrapper input').val(userCompany.name);
                        $(this).closest('.company-wrapper').find('.options').html('');
                        $scope.companyinfo = search(userCompany.id, users);
                    }));
                    $(".company-wrapper .productId").keypress(function(){
                       $('.company-dorpdown').show();
                    });
                }
                else
                {
                    return false;
                }

            })
            .error(function(error)
            {
                AppService.isAuth(error);
                loaderFactory.hide();
            })
        }


        $scope.dataUpdate = function()
        {	loaderFactory.display('Please Wait!');
            var company = $scope.companyinfo;
            if($scope.companyinfo)
            {
            	AppService.get('admin/company/'+ company.id +'/get_limit_data', true)
	            .success(function(data)
	            {
                    $scope.shippingMethod = data.data.is_postpaid === 1 ? true : false;
                    $scope.isPostpaid = data.data.is_postpaid === 1 ? true : false
                    $scope.shippingLimits = data.data.shipping_limit
	            	loaderFactory.hide();
	            })
	            .error(function(error)
	            {
	            	AppService.isAuth(error);
                    loaderFactory.hide();
	            })
                $scope.company.generalDetail.companyName = company.name;
                $scope.company.generalDetail.email = company.email;
                $scope.company.generalDetail.website = company.website;
             }
            else
            {
                return false;
            }
        }


        $scope.setLimit = function()
        {
        	loaderFactory.display('Please Wait!');
        	var limit = $scope.shippingMethod == 1 ? $scope.shippingLimits : 0;
        	var data = {
        		is_postpaid : $scope.shippingMethod,
        		shipping_limit : limit
        	}
        	AppService.post('admin/company/' +$scope.companyinfo.id+ '/shipping_limit', true, data)
        	.success(function(data)
        	{
        		$scope.company.generalDetail =
                {
                    companyName: '',
                    logo: '',
                    website: ''
                }
                $scope.shippingMethod = 0;
                $scope.shippingLimits = null;
                $scope.isPostpaid = false;
                loaderFactory.hide();
                $scope.dataUpdate();
                Notify.alert('Shipping Limit has been updated', {status: 'success'});
        	})
        	.error(function(error)
        	{
        		AppService.isAuth(error);
                loaderFactory.hide();
        	})
        }

        function search(nameKey, myArray)
        {
            for (var i=0; i < myArray.length; i++) {
                var company = myArray[i].company;
                if (company.id == nameKey) {
                    return company;
                }
            }
        }

        function validateEmail(email)
	    {
	          var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
	          return re.test(email);
	    }
	}
	setShippingLimitController.$inject = ["$rootScope", "$scope", "AppService", "$state", "Notify", "$localStorage", "$compile", "loaderFactory"];
})();

(function() {
    'use strict';

    angular
        .module('app.setting')
        .controller('shiprocketconfig', shiprocketconfig);

    shiprocketconfig.$inject = ['$scope'];
    function shiprocketconfig($scope) {

        activate();

        ////////////////

        function activate() {
          // Single List
          $scope.data1 = [
            { id: 1, name: 'FedEx' },
            { id: 2, name: 'DHL' },
            { id: 3, name: 'UPS' },
            { id: 4, name: 'BlueDart' }
          ];

          $scope.sortableCallback = function (sourceModel, destModel, start, end) {

          };
          
          $scope.sortableOptions = {
              placeholder: '<div class="box-placeholder p0 m0"><div></div></div>',
              forcePlaceholderSize: true
          };
        }
    }

})();
(function() {
    'use strict';
    angular.module('app.setting').controller('TaxclassModalController', TaxclassModalController);
    TaxclassModalController.$inject = ['$rootScope', '$scope', '$state', 'AppService', '$sce', 'Notify', '$uibModalInstance', '$compile', 'items']
    function TaxclassModalController($rootScope, $scope, $state, AppService, $sce, Notify, $uibModalInstance, $compile, items ) {
        activate();
        function activate()
        {   

            $scope.taxClassItems = items.taxClass;
            $scope.isEdit = items.isEdit;
            $scope.taxDetail =
            {
                Code: '',
            };
            //ADDING NEW ROW
            var rowAppened = '';
            var rowArry = [];
            if($scope.isEdit)
            {
                var length = $scope.taxClassItems.length;
                for (var i = 0; i < length; i++)
                {
                    rowArry.push(i);
                }
                rowAppened = length-1;
            }
            else
            {
                rowAppened = 0;
                rowArry = [0];
            }

            $scope.isNumber = function(event)
            {
                if (event.keyCode < 48 || event.keyCode > 57 ) 
                {   
                    Notify.alert("Only numbers are allowed");
                    return false;
                }
            }



            $scope.addNewSubClass = function($event, index, isMaxEvent)
            {   
                var target = angular.element($event.currentTarget);
                // FROM ON CLICK MAXIMUM ADD ROW
                if(rowArry.length > 1)
                {   
                    for (var i = index; i > 0; i--)
                    {
                        if(rowArry[i-1] !== 'null')
                        {
                            if(!$('.tax-max-value'+rowArry[i-1]).val())
                            {   
                                Notify.alert("Max Price range can not be Blank");
                                return false;
                                break;
                            }
                            else if($('.tax-max-value'+rowArry[i-1]).val() &&isNaN($('.tax-max-value'+rowArry[i-1]).val()))
                            {   
                                Notify.alert("Only number are allowed as max price")
                                return false;
                                break;
                            }
                            else
                            {
                                // $('.tax-max-value'+rowArry[i]).unbind('click');
                                $('.tax-max-value'+rowArry[i-1]).removeClass('red-border');
                                $('.tax-max-value'+rowArry[i]).addClass('red-border');
                            }
                            break;
                        }
                    }
                    
                }
                else
                {   
                    // $('.tax-max-value'+rowArry[index]).unbind('click');
                    $('.tax-max-value'+rowArry[index]).addClass('red-border');
                }

                
                target.closest('tr').find('.add-btn').css('display', 'none');
                target.closest('tr').find('.remove-btn').css('display', 'block');
                $('.tax-max-value'+rowAppened).prop('disabled', false)
                $('.tax-max-value'+rowAppened).val('');
                
                rowAppened++;
                rowArry.push(rowAppened);

                var $el =$('<tr>'+ '<td>'+
                            '<input type="text" style="width:48%" disabled  class="form-control col-md-6 tax-min-value'+rowAppened +'" placeholder="Min">'+
                            '<input type="text" style="width:48%" disabled class="form-control col-md-6 pull-right tax-max-value'+rowAppened   +'" placeholder="Max" ng-blur="setMinValues()">'+
                        '</td>'+
                        '<td>'+
                            '<input type="text"  class="form-control GST'+ rowAppened +'" value="0" placeholder="VAT">'+
                        '</td>'+
                        // '<td>'+
                        //     '<input type="text"  class="form-control CST'+rowAppened+'" value="0" placeholder="CST">'+
                        // '</td>'+
                        // '<td>'+
                        //     '<input type="text"  class="form-control CST-fromC'+ rowAppened +'" value="0" placeholder="Form C">'+
                        // '</td>'+
                        // '<td>'+
                        //     '<input type="text"  class="form-control additional-tax' + rowAppened +'" value="0"  placeholder="Additional Tax">'+
                        // '</td>'+
                        '<td style="white-space: nowrap">'+
                            '<button type="submit" class="btn btn-sm btn-info mr add-btn" ng-click="addNewSubClass($event,'+ rowAppened +')">'+
                                '<em class="fa fa-plus"></em>'+
                            '</button>'+
                            '<button type="button" style="display: none" class="btn btn-sm btn-default remove-btn" ng-click="removeSubClass($event,'+ rowAppened+')">'+
                                '<em class="fa fa-times"></em>'+
                            '</button>'+
                        '</td></tr>' ).appendTo('.append-tax-row');
                $compile($el)($scope);
                $('.tax-max-value'+rowAppened).val('maximum');
            }

            $scope.removeSubClass = function($event, index)
            {
                index = parseInt(index);
                var rowLength = rowArry.length;
                var isFirst = true;
                if(rowArry[0] == index)
                {
                    isFirst = true;
                }
                else 
                {
                    for (var i = index; i > 0; i--)
                    {
                        if(rowArry[i-1] !== 'null')
                        {
                            isFirst = false;
                            for (var j = index; j < rowLength; j++)
                            {
                                if(rowArry[j+1] !== 'null')
                                {
                                    $('.tax-min-value'+rowArry[j+1]).val($('.tax-max-value'+rowArry[i-1]).val());
                                    break;
                                }
                            }
                            break;
                        }
                    }
                }

                if(isFirst)
                {
                    for (var j = index; j < rowLength; j++)
                    {
                        if(rowArry[j+1] !== 'null')
                        {
                            $('.tax-min-value'+rowArry[j+1]).val('0');
                            break;
                        }
                    }
                }

                var target = angular.element($event.currentTarget);
                target.closest('tr').remove();
                rowArry[index] = 'null';
                // rowArry.splice(index, 1);
            }
            
            $scope.setMinValues = function()
            {   
                var maxValue = 0;
                var rowArryLength = rowArry.length;
                // REMOVE RED BORDER FROM SECOND LAST ROW
                if(rowArryLength > 1 && $('.tax-max-value'+rowArry[rowArryLength-2]).val() >0)
                {
                    $('.tax-max-value'+rowArry[rowArryLength-2]).removeClass('red-border');
                }

                for (var i = 0; i <= rowArryLength; i++)
                {   
                    if($(".tax-max-value"+rowArry[i]).val())
                    {   
                        for (var j = i+1; j <= rowArryLength; j++) 
                        {   
                            if(rowArry[j] !== 'null' && parseFloat($(".tax-max-value"+rowArry[i]).val()) > maxValue)
                            {   
                                maxValue = parseFloat($(".tax-max-value"+rowArry[i]).val());
                                $(".tax-min-value"+rowArry[j]).val(($(".tax-max-value"+rowArry[i]).val()));
                                i = j;
                            }
                            else if(rowArry[j] !== 'null' && $(".tax-max-value"+rowArry[i]).val() <= maxValue)
                            {    
                                $(".tax-max-value"+rowArry[i]).val(maxValue);
                                $(".tax-min-value"+rowArry[j]).val(maxValue);
                                i = j;
                            }
                        }
                       
                    }  
                }
            }

            $scope.saveData = function()
            {
                $scope.isPreloader = true;
                //VALIDATIONS
                // if(validationForInput())
                // {
                    //SET VALUE
                    var subclassArry =[];
                    var subclass ={};
                    var length = rowArry.length;
                    for (var i = 0; i<length; i++)
                    {
                        if(rowArry[i] != 'null')
                        {
                            if($(".tax-max-value"+rowArry[i]).val())
                            {   
                                if(isNaN($(".tax-max-value"+rowArry[i]).val()) && i != length-1)
                                {
                                    Notify.alert("Please Input Max value As Number");
                                    return false;
                                }
                                else
                                {
                                    $(".tax-min-value"+rowArry[i+1]).val(($(".tax-max-value"+rowArry[i]).val()));
                                }
                            }
                            else if(length != i)
                            {
                                Notify.alert("Max value can not be blank");
                                return false;
                            }
                            else
                            {
                                $(".tax-min-value"+rowArry[i+1]).val('');
                            }

                            //VAT VALIDATION

                            if(!$(".GST"+rowArry[i]).val())
                            {   
                                Notify.alert("GST can not be blank");
                                return false;
                            }
                            else if(isNaN($(".GST"+rowArry[i]).val()))
                            {
                                Notify.alert("Please Input GST value As Number");
                                return false;
                            }

                            //CST VALIDATION

                            // if(!$(".CST"+rowArry[i]).val())
                            // {
                            //     Notify.alert("CST can not be blank");
                            //     return false;
                            // }
                            // else if(isNaN($(".CST"+rowArry[i]).val()))
                            // {
                            //     Notify.alert("Please Input CST value As Number");
                            //     return false;
                            // }
                            //CST FROMC VALIDATION


                            // if(!$(".CST-fromC"+rowArry[i]).val())
                            // {
                            //     Notify.alert("Form-C can not be blank");
                            //     return false;
                            // }
                            // else if(isNaN($(".CST-fromC"+rowArry[i]).val()))
                            // {
                            //     Notify.alert("Please Input CST Form C  value As Number");
                            //     return false;
                            // }
                            //ADDITIONAL TAX VALIDATION
                            //
                            // if(!$(".additional-tax"+rowArry[i]).val())
                            // {
                            //     Notify.alert("Additional Tax can not be blank");
                            //     return false;
                            // }
                            // else if(isNaN($(".VAT"+rowArry[i]).val()))
                            // {
                            //     Notify.alert("Please Input Additional Tax value As Number");
                            //     return false;
                            // }

                            subclass =
                            {
                                min_price: parseFloat($(".tax-min-value"+rowArry[i]).val()).toFixed(2),
                                max_price:  i==length-1 ? $(".tax-max-value"+rowArry[i]).val(): parseFloat($(".tax-max-value"+rowArry[i]).val()).toFixed(2),
                                // vat: $(".VAT"+rowArry[i]).val(),
                                // cst: $(".CST"+rowArry[i]).val(),
                                // form_c: $(".CST-fromC"+rowArry[i]).val(),
                                // additional_tax: $(".additional-tax"+rowArry[i]).val(),
                                gst: $(".GST"+rowArry[i]).val()
                            }
                            subclassArry.push(subclass);
                        }
                    }

                    var data =
                    {
                        // code: $scope.taxDetail.Code,
                        tax_subclasses: subclassArry
                    }
                    if(!$scope.isEdit)
                    {
                        data.code = $scope.taxDetail.Code
                        addTaxClass(data);
                    }
                    else
                    {
                        editTaxClass(data);
                    }
                // }
            }

            $scope.cancel = function ()
            {
               $uibModalInstance.dismiss('cancel');
            };

            function addTaxClass(data)
            {   
                $('.validation-alert').remove();
                AppService.post('taxes', true, data)
                .success(function(data)
                {
                    $scope.isPreloader = false;
                    $uibModalInstance.dismiss('cancel');
                    $state.go($state.current, {}, {reload: true});
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    if(error.status_code === 422)
                    {
                        AppService.alertValidation(error.errors);
                        // Notify.alert("Please correct below given errors !");
                    }
                    else
                    {
                        AppService.isAuth(error);
                    }
                    
                });
            }


            function editTaxClass(data)
            {
                AppService.put('taxes/'+ $scope.taxClassItems[0].code +'/update', true, data)
                .success(function(data)
                {
                    $scope.isPreloader = false;
                    $uibModalInstance.dismiss('cancel');
                    $state.go($state.current, {}, {reload: true});
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                    if(error.status_code == 422)
                    {
                         Notify.alert(error.message);
                    }
                });
            }

            function validationForInput()
            {
                if(!$scope.taxDetail.Code && !$scope.isEdit)
                {   
                    Notify.alert("Please Enter Tax class Code");
                    return false;
                }
                else if(!$scope.isEdit)
                {   
                    var regexp = /^[a-zA-Z0-9-_]+$/;
                    if($scope.taxDetail.Code.search(regexp))
                    {
                        Notify.alert("Only Character Number Dash And Underscore allowed In Tax Code");
                        return false;
                    }
                    else
                    {
                        return true; 
                    }
                }
                else
                {
                    return true; 
                }

            }
        }
    }
})();

(function() {
    'use strict';
    angular.module('app.setting').controller('TaxclassesController', TaxclassesController);
    TaxclassesController.$inject = ['$rootScope', '$scope', '$state', 'AppService', '$sce', 'Notify', '$uibModal', '$compile', '$localStorage']
    function TaxclassesController($rootScope, $scope, $state, AppService, $sce, Notify, $uibModal, $compile, $localStorage ) {     
        activate();
        ////////////////  
        var user = $localStorage.USER;
        if(user) {
            $rootScope.isBasicPlan = user.is_basic_plan;
            $rootScope.toggleOff = !user.inventory_sync_status;
        }
        // if(user.is_free_plan)
        // {
        //     $state.go('app.processing');
        // }
        var data = [];   
        var isEdit = false;  
        $scope.list = []; 
        function activate() 
        {   
            $scope.isPreloader = true;
            $scope.disabled = 'disabled';
            $scope.isTaxUpdate = true;
            var idToedit = '';
            var c_Index = '';

            $scope.taxDetail = 
            {
                Code: ''
            };
           
            $scope.getTaxClasses = function()
            {   
                AppService.get('taxes', true)
                .success(function (data) 
                {   
                    $scope.disabled = '';
                    $scope.isPreloader = false;
                    $scope.taxClassesData = data.data;
                    var taxClassKeyArry = Object.keys($scope.taxClassesData);
                    var length =  taxClassKeyArry.length;
                    $scope.taxClasses = [];
                    for (var i = 0; i <length; i++) 
                    {
                        var classObj = 
                        {
                            code: taxClassKeyArry[i],
                            classDetail: $scope.taxClassesData[taxClassKeyArry[i]]
                        }
                        $scope.taxClasses.push(classObj);
                    }
                })
                .error(function(error)
                {   
                    AppService.isAuth(error); 
                })

            }
            
			$scope.open = function (taxClass, isEdit, size) 
            {   
                var data = {
                    isEdit: isEdit,
                    taxClass: taxClass
                }
                $scope.items = data;
    			var modalInstance = $uibModal.open(
                {
         			animation: true,
         			templateUrl: 'texClassDialogBox.html',
         			controller: 'TaxclassModalController',
         			size: 'md',
          			resolve: 
                    {
               			items: function () 
                        {
                 		 return $scope.items;
                		}
          			}
    			})
 			};	

        }
    }
})();

(function() {
    'use strict';
    angular.module('app.setting').controller('toggleInventoryModalController', toggleInventoryModalController);

    toggleInventoryModalController.$inject = ['$rootScope', '$scope', '$state', '$localStorage', 'AppService', 'ga_service', 'Notify', '$uibModal', '$uibModalInstance', 'items', 'SR_CONSTANTS'];
    function toggleInventoryModalController($rootScope, $scope, $state, $localStorage, AppService, ga_service, Notify, $uibModal, $uibModalInstance, items, SR_CONSTANTS) {
        activate();
        ////////////////
        function activate() {
            $scope.closeModal = function(){
                $uibModalInstance.close('cancel');
            };

            $scope.stateB_enable  = function(){
                $uibModalInstance.close('stateB');
                
            }

            $scope.ok_clicked = function(){
                //done by ayush
               AppService.get(SR_CONSTANTS.api_urls.sync_inventory + (items? '1': '0'), true)
                .success(function(data)
                {

                    AppService.intercomEventAndPing( items? SR_CONSTANTS.intercom_events.manage_catalog_toggle_on: SR_CONSTANTS.intercom_events.manage_catalog_toggle_off);
                    ga_service.send('manage catalog',items? 'Toggle_ON': 'Toggle_OFF' );
                    $localStorage.USER.inventory_sync_status = items;
                    Notify.alert(data.message);
                    $uibModalInstance.close('done');
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                });
            }

        }
    }
})();
(function() {
    'use strict';
    angular.module('app.setting').controller('topNavController', topNavController);

    topNavController.$inject = ['$document', '$rootScope', '$scope', '$state', 'AppService', 'Notify', '$uibModal', '$localStorage', 'loaderFactory', '$location','ga_service'];
    function topNavController($document, $rootScope, $scope, $state, AppService, Notify, $uibModal, $localStorage, loaderFactory, $location, ga_service)
    {




        var user = $localStorage.USER;
        if(user){
          activate(user);
        }
        ////////////////
        function activate(user){
            $scope.recharge = function()
            {
                 //intercom event
                AppService.intercomEventAndPing('Recharge Clicked');
                ga_service.send('Recharge','Click on Recharge your account');

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/Settings/topnavrecharge.html',
                    controller: 'rechargeController',
                    size: 'md'
                });
            }

            ///check recharge params
            var params = $location.search();
            if(params.recharge == 1 && params.recharge !== true){
                $scope.recharge();
            }

            $scope.hidepop = function ()
            {
                $scope.isShowNotifyBar = 'hide';
            }

            $scope.isShowNotifyBar = 'hide';
            $scope.isLabelNotify = 'hide';
            $scope.isManifestNotify = 'hide';
            $scope.isInvoiceNotify = 'hide';
            $scope.labelBarValue = 0;
            $scope.manifestValue = 0;
            $scope.invoiceValue = 0;
            $scope.logoUrl = 'app.dashboard'
            var labelIndex = 1;
            var manifestIndex = 1;
            var invoiceIndex = 1;
            $scope.helpLine = false;
            $scope.user = user;
            if(user){
              $scope.updatePhone = {
                number: $scope.user.mobile,
                isEdit: false,
                isOtpSend: false,
                otp: ''
              }
            }

            $scope.toggleMobileTopNav = function(){
              var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'topnavsettings.html',
                    size: 'md',
                    scope: $scope
                });
            }

            // Show helpline Number and email on navbar
            $scope.helpLine = false;
            $scope.logoUrl = user.is_onboarding_complete ? 'app.dashboard' : 'app.welcome';
            if(user){
                var planId = user.plan_id;
                switch(true){
                    case planId > 1:
                    $scope.helpLine = true;
                    break;

                    default: $scope.helpLine = false;
                }
            }

            function hideBar()
            {
                $document.on("click", function()
                {
                    $scope.manifestValue = 0;
                    $scope.labelBarValue = 0;
                    $scope.invoiceValue = 0;
                    $scope.isShowNotifyBar = 'hide';
                    $scope.isLabelNotify = 'hide';
                    $scope.isInvoiceNotify = 'hide';
                });
            }

            $scope.updateMobile = function()
            {
                loaderFactory.display("Please Wait!");
                $('.validation-alert').remove();
                var user_id = user.id;
                var data = {
                    'mobile' : $scope.updatePhone.number
                }
                AppService.post('settings/update/phone', true, data)
                .success(function(data)
                {
                    $scope.updatePhone.isEdit = false;
                    $scope.updatePhone.isOtpSend = true;
                    loaderFactory.hide()
                })
                .error(function(error)
                {
                    loaderFactory.hide()
                    $scope.updatePhone.isEdit = true;
                    AppService.isAuth(error);
                    AppService.alertValidation(error.errors, true);
                })
            }

            $scope.verifyOtp = function()
            {
                loaderFactory.display("Please Wait! OTP verifying");
                $('.validation-alert').remove();
                var data = {
                    'otp' : $scope.updatePhone.otp
                }
                AppService.post('settings/confirm/otp', true, data)
                .success(function(data)
                {
                    $scope.updatePhone.isEdit = false;
                    $scope.updatePhone.isOtpSend = false;
                    $scope.user.mobile = $scope.updatePhone.number;
                    loaderFactory.hide()
                })
                .error(function(error)
                {
                    loaderFactory.hide()
                    $scope.updatePhone.isOtpSend = true;
                    Notify.alert(error.message, { timeout: 3000, status: 'danger' });
                })
            }


             $scope.create_ticket1 = create_ticket;

            function create_ticket() {

            loaderFactory.display('Please Wait!');

            AppService.get('support/sso-url', true)
            .success(function(data){
                $scope.ticket = data;
                loaderFactory.hide();
                var redirect = data.url;
                window.open(redirect, '_blank');
            })
            .error(function(error){
                AppService.isAuth(error);
                loaderFactory.hide();
            })
        }

        }
    }
})();

(function() {
    'use strict';
    angular.module('app.setting').controller('updateCategoriesController', updateCategoriesController);

    updateCategoriesController.$inject = [ '$stateParams','$rootScope', '$scope', '$state', 'AppService', 'Notify','$localStorage'];
    function updateCategoriesController( $stateParams, $rootScope, $scope, $state, AppService, Notify, $localStorage) {
        if($localStorage.USER){
          activate();
        }
        ////////////////
        function activate()
        {
            $scope.isPreloader = true;
            $scope.myselect =
            {
                code: 'default'
            }

            $scope.categoryDetails =
            {
                name: '',
                code: '',
                tax_code: ''
            };

            var isEdit = false;
            $scope.isUpdate = function()
            {
                getTaxCodes();
                if($state.current.name == 'app.editCategory')
                {
                    isEdit = true;
                    $('input[name = "code"]').prop('disabled', true);
                    AppService.get('categories/show/'+$stateParams.id, true)
                    .success(function(data)
                    {
                        $scope.isPreloader = false;
                        $scope.categoryDetails.name = data.category.name;
                        $scope.categoryDetails.code = data.category.code;
                        $scope.categoryDetails.hsn = data.category.hsn;
                        $scope.myselect.code = data.category.tax_code;
                    })
                    .error(function(error)
                    {
                        AppService.isAuth(error);
                    })
                }else{
                    $scope.isPreloader = false;
                }
            }

            $scope.cancel = function()
            {
                $state.go('app.categories');
            };

            $scope.saveData = function()
            {
                $('.validation-alert').remove();
                var data =
                {
                    name: $scope.categoryDetails.name,
                    code: $scope.categoryDetails.code,
                    hsn: $scope.categoryDetails.hsn,
                    tax_code: $scope.myselect.code,
                }

                if(isEdit)
                {
                    editCategory(data);
                }
                else
                {
                    addCategory(data);
                }
            }

            function addCategory(data)
            {
                AppService.post('categories', true, data)
                .success(function(data)
                {
                   $state.go('app.categories');
                })
                .error(function(error)
                {
                    if(error.status_code == 422)
                    {
                        AppService.alertValidation(error.errors);
                    }
                    else
                    {
                        AppService.isAuth(error);
                    }
                });

            }


            function editCategory(data)
            {
                AppService.put('categories/'+$stateParams.id, true, data)
                .success(function(data)
                {
                    $state.go('app.categories');
                })
                .error(function(error)
                {
                    if(error.status_code == 422)
                    {
                        AppService.alertValidation(error.errors);
                    }
                    else
                    {
                         AppService.isAuth(error);
                    }
                })
            }

            function getTaxCodes()
            {
                //GET TAX CLASSES
                AppService.get('categories/tax/codes', true)
                .success(function (data)
                {
                    $scope.taxCode = data.data;
                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                })
            }
        }
    }
})();

(function()
{
    'use strict';

    angular.module('app.setting').controller('welcomeController', ['$scope', '$rootScope', 'AppService', '$uibModal', '$stateParams', '$window', '$state', '$localStorage', 'Notify', '$timeout', 'loaderFactory','ga_service',
    function($scope, $rootScope, AppService, $uibModal, $stateParams, $window, $state, $localStorage, Notify, $timeout,loaderFactory, ga_service)
    {
        $scope.data = {};

        $scope.all_channels     = ['Online Store (Shopify, Magento, Woocommerce, etc)',
                                    'Marketplaces (eBay, Amazon, Etsy)',
                                    'Social Media (Facebook, Whatsapp, Instagram)'];

        $scope.all_shipments   = ["A few personal shipments occasionally",
                                    "Fewer than 50 shipments per month",
                                    "100 - 1,000 shipments per month",
                                    "1,000 - 5,000 shipments per month",
                                    "5,000+ shipments per month"];

        $scope.categories       = [ "Fashion & Apparel",
                                    "Jewellery and Fashion Accessories",
                                    "Electronics, Automobile & Accessories",
                                    "Home, Lifestyle & Gifts",
                                    "Sports, Hobbies & Toys",
                                    "Health & Beauty Retail",
                                    "Books Music and Entertainment",
                                    "Tools and Hardware",
                                    "Food and Groceries",
                                    "Multiple Categories",
                                    "Others"];

        /*$scope.seller_info = {'sales_channel':'Channel',
        'shipment_count':'A few personal shipments occasionally',
        'product_type':'Fashion & Apparel'};*/
        $scope.seller_info = {};
        $scope.show_onboarding_form = false;

        $scope.isOnboardingComplete = false;
        $scope.redirect_url = $stateParams.redirect_url;
        $scope.go = function(state, params, link_disabled){
            if(!link_disabled){
                $state.go(state, params);
            }
        };
        var user = $localStorage.USER;
        if(user) {
            $rootScope.isBasicPlan = user.is_basic_plan;
            $rootScope.toggleOff = !user.inventory_sync_status;
            $scope.from_shopify = user.from_shopify;
            if(user.from_shopify && $scope.isOnboardingComplete == true)
            {
                $state.go('app.processing');
            }

            if(user.is_weight_dispute && user.is_onboarding_complete == false){
                AppService.showDisputePopup();
            }
        }

        $scope.getStatus = function()
        {
            $scope.isPreloader = true;

            AppService.get('settings/onboarding')
            .success(function(data){

                $scope.isPreloader = false;
                $scope.data = data;
                $scope.isOnboardingComplete = data.data.is_onboarding_complete;
                $scope.onboardingStatus = data.data.onboarding_status;


                if(data.data.show_onboarding_form  == true) {
                    $scope.show_onboarding_form = true;
                }

                //classs check for order stage
                if(data.data.onboarding_status.order == 1 )
                {
                    $scope.orderClass = 'active';
                }
                else if(data.data.onboarding_status.company == 1)
                {
                    $scope.orderClass = 'steptodo';
                }
                else
                {
                    $scope.orderClass = '';
                }

                //class checkfor recharge stage
                 if( data.data.onboarding_status.recharge == 1 )
                 {
                    $scope.rechargeClass = 'active';
                 }
                 else if(data.data.onboarding_status.company == 1 && data.data.onboarding_status.order == 1)
                 {
                    $scope.rechargeClass = 'steptodo';
                 }

                  if( data.data.onboarding_status.recommendation == 1 )
                  {
                     $scope.courierPriorityClass = 'active';
                 }

                if($scope.isOnboardingComplete == true)
                {
                    $state.go('app.dashboard');
                }
            })
            .error(function(error)
            {
                $scope.isPreloader = false;
                AppService.isAuth(error);
            })
        }

        $scope.clickInternationalShipping = function(){
          ga_service.send('International', 'Clicked on International shipping');
        }

        function allOrderData()
        {
            var first_time_call = true;
            if($localStorage.USER.from_shopify && !$localStorage.USER.is_onboarding_complete &&  !$localStorage.USER.order_fetched)
            {
                AppService.get('orders?page='+ 1 +'&per_page='+ 15 , true)
                    .success(function(data)
                    {
                        if(!data.data.length)
                        {
                            $scope.isPreloader = false;
                            if(first_time_call ){
                                Notify.alert('<div>We are fetching your orders. In case you create your orders later, click on the sync  <div style="padding:2px;background: white;display: inline-block;"><button class="btn sync-btn pfx" style="padding: 4px 8px !important;" ng-disabled="disabled" type="button" aria-haspopup="true" aria-expanded="true" > <i class="icon-refresh"></i> </button></div>  icon on the orders screen to fetch your orders.</div>', { timeout: '3000'});
                                first_time_call = false;
                            }
                            // if(!$localStorage.USER.order_fetched ){
                            //     $timeout(function(){
                            //         processingOrderData();
                            //     }, 3000)
                            // }
                        }else{
                            $localStorage.USER.order_fetched = true;
                            var from_shopify = $localStorage.USER.from_shopify;
                            AppService.post('auth/login/user', false, {token:$localStorage.USER.token})
                                .success(function(data) {
                                    $scope.isPreloader = false;
                                    if (data.token) {
                                        $localStorage.USER = data;
                                        $localStorage.USER.from_shopify = from_shopify;
                                    }
                                })
                                .error(function(error) {
                                    AppService.isAuth(error);
                                });
                        }
                    })
                    .error(function(error)
                    {
                        AppService.isAuth(error);
                        $scope.isPreloader = false;
                    })
            }
        }

        allOrderData();

        $scope.openThankuModal = function()
        {
            var modalInstance = $uibModal.open({
                animation: true,
                backdrop  : 'static',
                keyboard  : false,
                templateUrl: 'app/views/Settings/thankyou.html',
                controller: 'rechargeController',
                size: 'sm-400',
            });
        }

        $scope.saveSellerDetails = function() {

            loaderFactory.display('Please Wait');
            $('.validation-alert').remove();
            var url = 'settings/onboarding-form';

            var data = {
                sales_channel : $scope.seller_info.sales_channel,
                product_type : $scope.seller_info.product_type,
                shipment_count : $scope.seller_info.shipment_count,
            };

            if(data.product_type == "Others" && $scope.seller_info.others == undefined) {
                data.product_type = "";
            } else if (data.product_type == "Others"){
                data.product_type = $scope.seller_info.others;
            }

            AppService.post(url , true, data)
            .success(function(data) {
                ga_service.send('Sign up succesful', 'Clicked on Start shipping')
                loaderFactory.hide();
                Notify.alert("Data Saved successfully !");

                $timeout(function() {
                    $window.location.reload();
                }, 2000);


            }).error(function(error){

                if(error.status_code === 422) {

                    AppService.alertValidation(error.errors, true);
                    Notify.alert("Please correct below given errors !");

                    if(error.errors.hasOwnProperty('product_type')) {
                        if($scope.seller_info.others == undefined) {
                            setErrorToProduct( "The other category name is required." , 'others');
                        }
                    }
                } else {
                    AppService.isAuth(error);
                }

                loaderFactory.hide();
            });

        };

        function setErrorToProduct( message, key ) {
            var errorHtml = '<div class="help-block validation-alert">' + message + '</div>';
            $( "input[name='"+ key +"']" ).closest('.error-append').after(errorHtml);
        }

    }]);
})();

(function () {
    'use strict';

    angular.module('app.setting').controller('WelcomeCtrl', ['$rootScope', '$scope', '$state', 'AppService', '$auth','$sce','Notify','$localStorage',
    function($rootScope, $scope, $state, AppService, $auth, $sce, Notify, $localStorage)
    {   
        $rootScope.hiddenClass = 'hidden';
        $scope.userInfo = $localStorage.USER
        $scope.isSetup = false;
        $scope.mainWelcome = true;
        $scope.isCustomeChannel = 'hide';
        $scope.firstStep = '';
        $scope.secondStep = '';
        $scope.companyConState = 'fa-circle-o';
        $scope.showSetting = false;
        $scope.baseChannelList = true;
        var channelId = '';
        $scope.settingActive = "active";
        $scope.authActive = '';
        $scope.isAddSetting = true;
        // default company detail
        $scope.company = {};
        $localStorage.isWelcome = true;
        
        var defaultCity = 'Select State';

        $scope.company.generalDetail = {
            name: '',
            logo: '',
            website: ''
        }

        $scope.company.accountDetail = {
            pan: '',
            tin: '',
            cin: '',
            centalSaleTax: '',
            invoicePrefix: '',
            invoiceNext: '',
            manifestPrefix: '',
            manifestNext: '',
            email: ''

        }
        $scope.company.billingAddress = {
            addressLine1: '',
            addressLine2: '',
            country: '',
            state: '',
            city: '',
            pinCode: '',
            phone: '',
            shipping_is_billing: '',

        }

        $scope.company.shippingAddress = {
            addressLine1: '',
            addressLine2: '',
            country: '',
            state: '',
            city: '',
            pinCode: '',
            phone: '',
        }

         // HIDE SIDEMENU
        angular.element(document.getElementsByClassName('section-wrapper')).css('margin-left', '0px');
       
        // $scope.checked = true;
        $scope.channel ={
            name: ''
        }

        var backButton = 'mainPage';

        $scope.gotoBackBtn = function()
        {   
            if( backButton == 'mainPage')
            {
                $scope.isSetup = false;
                $scope.mainWelcome = true;
                $scope.isSecondStep = true;
                $scope.isFirstStep = false
                $scope.firstStep = '';
                $scope.secondStep = '';
                backButton = 'mainPage';

            }
            else if( backButton == 'setupStep')
            {   
                companyDetail();
                backButton = 'mainPage';
                $scope.companyConState = 'fa-circle-o';

            }
            else if (backButton == 'baseChannelList')
            {   
                backButton = 'setupStep';
                getBaseChannel();
            }
        }

        $scope.skipSteps = function()
        {
            if(backButton == 'mainPage')
            {
                loaderFactory.display("Please Wait!");
                //$scope.isPreloader = true;
                backButton = 'setupStep';
                getBaseChannels();
            }
            else
            {   
                angular.element(document.getElementsByClassName('section-wrapper')).removeAttr('style');
                $rootScope.hiddenClass = '';
                $state.go('app.processing');
            }

        }

        $scope.setupContinue = function()
        {
            backButton = 'mainPage';
            companyDetail();
        }

       

        $scope.company.submit = function ()
        {
            submitCompanyDetail();
            backButton = 'setupStep';

        }

        $scope.channel.settings = {}
        $scope.channelSetting = function(bChannelId)
        {
            loaderFactory.display("Please Wait!");
            //$scope.isPreloader = true;
            AppService.get('channels/create/'+bChannelId)
            .success(function(data)
            {
                $scope.showSetting = true;
                backButton = 'baseChannelList';
                loaderFactory.hide()
                //$scope.isPreloader = false;
                $scope.baseChannelList = false;
                $scope.channelInfo = data.data;
                $scope.channel.channelName = $scope.channelInfo.name;
                if($scope.channelInfo.code !='CS'){
                    $scope.isCustomeChannel = '';
                }
                else{
                    $scope.isCustomeChannel = 'hide';
                }
                appendAuth();

            })
            .error(function(error)
            {
                loaderFactory.hide();
                //$scope.isPreloader = false;
                AppService.isAuth(error);
            })

        }

        var getBaseChannel = function()
        {
           // GET BASE CHANNEL
           loaderFactory.display("Please Wait!");
           //$scope.isPreloader = true;
            AppService.get('channels/all')
            .success(function(data)
            {
                loaderFactory.hide()
                //$scope.isPreloader = false;
                $scope.companyConState = 'fa-circle-o';
                $scope.firstStep = '';
                $scope.secondStep = 'active';

                // SETUP STATE @
                $scope.isSecondStep = true;
                $scope.isFirstStep = false
                $scope.showSetting = false;
                $scope.baseChannelList = true;

                $scope.baseChannel = data.data;

            })
            .error(function(error)
            {
                loaderFactory.hide();
                //$scope.isPreloader = false;
                AppService.isAuth(error);
            })

        }

        $scope.channel = {};
        $scope.channel =
        {
            'channelName': '',
            'ledgerName': '',
            'billingParty': '',
            'orderChecked': true,
            'inventryChecked': true
        }

        // GENERATING DYNAMIC HTML FOR ORDERS
        $scope.customElement = function()
        {
            if(!angular.isUndefined($scope.channelInfo.auth_sample.api_info))
            {
                var $settings = $scope.channelInfo.settings_sample.settings;
            }
            else
            {
                var $settings = {};
            }
            
            var length = $settings.length;
            $scope.html = '';
            var settings= {};
            for( var i = 0; i< length; i++ )
            {
                var key = $settings[i].code;
                settings[key] = $settings[i].default;
                $scope.html +=  '<div>' +
                                    '<div class="form-group">'+
                                       '<label class ="col-md-4 pt">'+$settings[i].name +'</label>' +
                                        '<div class="col-md-8">'+
                                           '<div class="controls">' +
                                            inputByType($settings[i]) +
                                           '</div>'+
                                        '</div>'+
                                    '</div>'+
                                '</div>';
            }
            $scope.channel.settings = settings;
            return $sce.trustAsHtml($scope.html);

        }

        function inputByType(setting)
        {   var type = setting.type
            var typeHtml = ''
            if(type === 'boolean')
            {
                var value = setting.default;
                if(value == true)
                {
                    value = 'checked';
                }
                typeHtml =   '<label class="switch">'+
                             '<input type="checkbox" id="' +setting.code+ '" ' + value  +'/>'+ '<span> </span> </label>'
            }
            else if(type === 'text')
            {
                typeHtml = '<input type="text" placeholder="' + setting.placeholder + '"class="form-control setting-status" id="' +setting.code + '" />'
            }
            else if(type === 'dropdown')
            {
                typeHtml = '<select class="selectpicker" id="' + setting.code + '">' +
                                addOptions()+
                            '</select>'
            }
            function addOptions()
            {
                var dropdownOptions = '';
                var length = setting.options.length;
                for(var i = 0; i<length; i++)
                {
                    var selectedValue = '';
                    if(setting.options[i] == setting.default)
                    {
                        selectedValue = 'selected';
                    }
                    dropdownOptions += '<option ' + selectedValue + ' value ="' + setting.options[i]+ '">'+ setting.options[i] +'</option>'
                }
                return dropdownOptions;
            }
            return typeHtml;
        }

        var authHtml = '';
        var appendAuth = function()
        {
            authHtml = '';
            
            if(!angular.isUndefined($scope.channelInfo.auth_sample.api_info))
            {
                var authData = $scope.channelInfo.auth_sample.api_info.settings;
            }
            else
            {
                var authData = {};
            }
            
            var length = authData.length;
            for(var i=0; i< length; i++)
            {
                authHtml += '<div class="col-md-8">'+
                                '<div class="form-group">'+
                                   '<label class="col-md-4 control-label ">' + authData[i].name +'</label>'+
                                        '<div class="col-md-8">'+
                                            '<input type="text" placeholder="' +authData[i].placeholder +'" class="form-control" id ="' + authData[i].code +'"/>'+
                                        '</div>'+
                                '</div>'+
                             '</div>'+
                            '<div class="clearfix append-wrapper"></div> </br>'
            }
            $('.auth-append').html('');
            $('.auth-append').html(authHtml);
        }

        var updateChannelId = '';
        $scope.addSetting = function()
        {
            loaderFactory.display("Please Wait!");
            //$scope.isPreloader = true;
            var postData = settingData();
            AppService.post('channels', true, postData)
            .success(function(data)
            {
                //$scope.isPreloader = false;
                loaderFactory.hide();
                if(data.status)
                {
                    Notify.alert("Channel added Succesfully");
                    angular.element(document.getElementsByClassName('section-wrapper')).removeAttr('style');
                    $rootScope.hiddenClass = '';
                    $state.go('app.products');
                }
                else
                {    
                    Notify.alert(data.message);
                }
            })
            .error(function(error)
            {
                loaderFactory.hide();
                //$scope.isPreloader = false;
                if(error.status_code === 422)
                {
                    AppService.alertValidation(error.errors, true);
                    Notify.alert("Please correct below given errors !");
                }
                else
                {
                    AppService.isAuth(error);
                }
            })
        }


        $scope.updateSetting = function()
        {
            loaderFactory.display("Please Wait!");
            //$scope.isPreloader = true;
            var postData = settingData();
            AppService.put('channels/'+ updateChannelId, true, postData)
            .success(function(data)
            {
                loaderFactory.hide();
                //$scope.isPreloader = false;
                if(data.status)
                {
                    Notify.alert("Channel added Succesfully");
                    angular.element(document.getElementsByClassName('section-wrapper')).removeAttr('style');
                    $rootScope.hiddenClass = '';
                    $state.go('app.products');
                }
                else {
                   // Notify.alert("Connection issue Please Check Your Api Details");
                   Notify.alert(data.message);
                }

            })
            .error(function(error)
            {
                loaderFactory.hide();
                //$scope.isPreloader = false;
                AppService.isAuth(error);
            })
        }

        $scope.removeShipingDetail = function()
        {   
            if(!$scope.company.billingAddress.shipping_is_billing)
            {
                $scope.company.shippingAddress.addressLine1 = '';
                $scope.company.shippingAddress.addressLine2 = '',
                $scope.company.shippingAddress.state = defaultCity;
                $scope.company.shippingAddress.city = '';
                $scope.company.shippingAddress.pinCode = '';
                $scope.company.shippingAddress.phone = '';
            }
        }

        function settingData()
        {
            $('.validation-alert').remove();
//            var orders = $scope.channelInfo.settings_sample.orders;
//            var inventory = $scope.channelInfo.settings_sample.inventory;
            var data = {};
            data.settings = {};
//            data.settings.inventory = inventory;
//            data.settings.orders = orders;
//            var length = data.settings.orders.settings.length;
//            var ordersData = data.settings.orders.settings;
            var newSetting = {};
            // CHECK FOR ORDER SYNC
//            if( !$scope.channel.orderChecked )
//            {
//                for(var i = 0;i< length; i++)
//                {
//                    newSetting[ordersData[i].code] = ordersData[i].default;
//                }
//            }
//            else
//            {
//                for(var i = 0; i< length; i++)
//                {
//                    if(ordersData[i].type == 'text')
//                    {
//                        var value = $('#'+ ordersData[i].code).val();
//                        newSetting[ordersData[i].code] = value;
//                    }
//                    else if(ordersData[i].type == 'boolean')
//                    {
//                        var value = $('#'+ ordersData[i].code).is(":checked");
//                        newSetting[ordersData[i].code] = value;
//                    }
//                    else if(ordersData[i].type == 'dropdown')
//                    {
//                        var value = $('#'+ ordersData[i].code).val();
//                        newSetting[ordersData[i].code] = value;
//                    }
//                }
//            }

            if(!angular.isUndefined($scope.channelInfo.auth_sample.api_info))
            {
                var authData = $scope.channelInfo.auth_sample.api_info.settings;
            }
            else
            {
                var authData = {};
            }
            
            var newAuthData = {};
            for(var i = 0; i< authData.length; i++)
            {
                newAuthData[authData[i].code] = $('#'+authData[i].code).val();
            }

            var postData = {};
            postData.orders_sync = $scope.channel.orderChecked;
            postData.inventory_sync = $scope.channel.inventryChecked;
            postData.base_channel_code = $scope.channelInfo.code;
            postData.name = $scope.channel.channelName;
            postData.settings = newSetting;
            postData.auth = newAuthData;
            if($('.setting-status').val())
            {
                postData.settings.order_status = $('.setting-status').val().split(',');
            }
            return postData;
        }

        function companyDetail()
        {
            loaderFactory.display("Please Wait!");
            //$scope.isPreloader = true;
            
            AppService.get('settings/create', true)
            .success(function(data)
            {   
                $scope.countryList = data.data.countries;
                $scope.stateList = data.data.states;
                $scope.stateList.unshift(defaultCity);
                loaderFactory.hide();
                //$scope.isPreloader = false;
               
            })
            .error(function(error)
            {
                AppService.isAuth(error);
            })
            
             AppService.get('settings/company', true)
            .success(function(data)
            {
                loaderFactory.hide();
                //$scope.isPreloader = false;
                $scope.isSetup = true;
                $scope.mainWelcome = false;
                $scope.isSecondStep = false;
                $scope.isFirstStep = true
                $scope.firstStep = 'active';
                $scope.secondStep = '';

                var data = data.data;
                $scope.company.generalDetail.name = data.name;
                $scope.company.generalDetail.website = data.website;
                $scope.company.generalDetail.logo = data.logo == '' ? "/app/img/noimage.jpg": data.logo;
                $scope.company.accountDetail.pan = data.pan;
                $scope.company.accountDetail.tin = data.tin;
                $scope.company.accountDetail.cin = data.cin;
                $scope.company.accountDetail.centalSaleTax = data.cst;
                $scope.company.accountDetail.invoicePrefix = data.invoice_prefix;
                $scope.company.accountDetail.invoiceNext = data.invoice_serial;
                $scope.company.billingAddress.addressLine1 = data.billing_address;
                $scope.company.billingAddress.addressLine2 = data.billing_address_2;
                $scope.company.billingAddress.country = data.billing_country == '' || null ?'India': data.billing_country;
                $scope.company.billingAddress.state = data.billing_state == '' || null ? defaultCity: data.billing_state;
                $scope.company.billingAddress.city = data.billing_city;
                $scope.company.billingAddress.pinCode = data.billing_pin_code;
                $scope.company.billingAddress.phone = data.billing_phone;
                $scope.company.shippingAddress.addressLine1 = data.shipping_address;
                $scope.company.shippingAddress.addressLine2 = data.shipping_address_2;
                $scope.company.shippingAddress.country = data.shipping_country == '' || null ?'India': data.shipping_country;
                $scope.company.shippingAddress.state = data.shipping_state == '' || null ? defaultCity : data.shipping_state;
                $scope.company.shippingAddress.city = data.shipping_city;
                $scope.company.shippingAddress.pinCode = data.shipping_pin_code;
                $scope.company.accountDetail.manifestPrefix = data.manifest_prefix;
                $scope.company.accountDetail.manifestNext = data.manifest_serial;
                $scope.company.accountDetail.email = data.email;
                $scope.company.shippingAddress.phone = data.shipping_phone;
                $scope.company.billingAddress.shipping_is_billing = data.shipping_is_billing;
            })
            .error(function(error)
            {
                loaderFactory.hide();
                //$scope.isPreloader = false;
                AppService.isAuth(error);
            })
        }
        function submitCompanyDetail()
        {   
            var shipping_is_billing = 0;
            $('.validation-alert').remove();
            $('input').removeClass('red-border');
            //$scope.isPreloader = true;
            loaderFactory.display("Please Wait!");
            if($scope.company.billingAddress.state == "Select State")
            {   
                var errorHtml = '<div class="help-block validation-alert"> Please Select Any State</div>';
                $('.billing-state').after(errorHtml);
            }
            if($scope.company.shippingAddress.state == 'Select State')
            {
                var errorHtml = '<div class="help-block validation-alert"> Please Select Any State</div>';
                $('.shiping-state').after(errorHtml);
            }
            
            var formData = new FormData();
            formData.append("logo", $( "input[name ='logo']" )[0].files[0] === undefined ? '': $( "input[name ='logo']" )[0].files[0] );
            formData.append('name', $scope.company.generalDetail.name);
            formData.append('website', $scope.company.generalDetail.website);
            formData.append('pan', $scope.company.accountDetail.pan);
            formData.append('tin', $scope.company.accountDetail.tin);
            formData.append('cin', $scope.company.accountDetail.cin);
            formData.append('cst', $scope.company.accountDetail.centalSaleTax);
            formData.append('invoice_prefix', $scope.company.accountDetail.invoicePrefix);
            formData.append('invoice_serial', $scope.company.accountDetail.invoiceNext);
            formData.append('email', $scope.company.accountDetail.email);
            formData.append('billing_address', $scope.company.billingAddress.addressLine1);
            formData.append('billing_address_2', $scope.company.billingAddress.addressLine2);
            formData.append('billing_city', $scope.company.billingAddress.city);
            formData.append('billing_state', $scope.company.billingAddress.state === defaultCity ? '': $scope.company.billingAddress.state);
            formData.append('billing_country', $scope.company.billingAddress.country);
            formData.append('billing_pin_code', $scope.company.billingAddress.pinCode);
            formData.append('billing_phone', $scope.company.billingAddress.phone);
            
            if(!$scope.company.billingAddress.shipping_is_billing)
            {
                formData.append('shipping_address', $scope.company.shippingAddress.addressLine1);
                formData.append('shipping_address_2', $scope.company.shippingAddress.addressLine2);
                formData.append('shipping_city', $scope.company.shippingAddress.city);
                formData.append('shipping_state', $scope.company.shippingAddress.state === defaultCity ? '': $scope.company.shippingAddress.state);
                formData.append('shipping_country', $scope.company.shippingAddress.country);
                formData.append('shipping_phone', $scope.company.shippingAddress.phone);
                formData.append('shipping_pin_code', $scope.company.shippingAddress.pinCode);
            }
            
            if($scope.company.billingAddress.shipping_is_billing)
            {
                shipping_is_billing = 1;
            }
            formData.append('shipping_is_billing', shipping_is_billing);
            AppService.postFormData('settings/company', formData, true)
            .success(function(data)
            {   
                var user = $localStorage.USER;
                user.company_name = $scope.company.generalDetail.name;
                $localStorage.USER = user;
                getBaseChannels();
            })
            .error(function(error)
            {
                loaderFactory.hide();
                //$scope.isPreloader = false;
                if(error.status_code === 422)
                {
                    AppService.alertValidation(error.errors, true);
                    Notify.alert("Please correct below given errors !");
                }
                else
                {
                    AppService.isAuth(error);
                }
            })
        }

        function getBaseChannels()
        {
            // GET BASE CHANNEL
            AppService.get('channels/all')
            .success(function(data)
            {
                loaderFactory.hide()
                //$scope.isPreloader = false;
                $scope.companyConState = 'fa-check-circle-o';
                $scope.firstStep = '';
                $scope.secondStep = 'active';

                // SETUP STATE @
                $scope.isSecondStep = true;
                $scope.isFirstStep = false

                $scope.baseChannel = data.data;

            })
            .error(function(error)
            {
                loaderFactory.hide();
                //$scope.isPreloader = false;
                AppService.isAuth(error);
            })
        }
        
        $scope.removeLogo = function(event)
        {
            AppService.deleteData('settings/logo', true)
            .success(function(data)
            {   
               $scope.company.generalDetail.logo = "/app/img/noimage.jpg";
                $('.delete-image').css('display', 'none');
            })
            .error(function(error)
            {
                AppService.isAuth(error);
            })
        }

    }]);
})();

(function () {
    'use strict';

    angular.module('multichannel')
        .directive('courierLogo', function () {
            var controller = ['$scope', function ($scope) {
                var image_sources = [
                    {id: 1, source: "app/img/BLUEDART.png"},
                    {id: 2, source: "app/img/FEDEX.png"},
                    {id: 3, source: "app/img/ARAMEX.png"},
                    {id: 7, source: "app/img/FEDEX.png"},
                    {id: 8, source: "app/img/dhl.jpg"},
                    {id: 10, source: "app/img/DELHIVERY.png"},
                    {id: 12, source: "app/img/FEDEX-SURFACE.png"},
                    {id: 14, source: "app/img/ECOMEXP.png"},
                    {id: 16, source: "app/img/DOTZOT.png"},
                    {id: 33, source: "app/img/XPRESSBEES.png"},
                    {id: 34, source: "app/img/HOLISOL.png"},
                    {id: 35, source: "app/img/ARAMEX.png"},
                    {id: 36, source: "app/img/FEDEX.png"},
                    {id: 37, source: "app/img/dhl.jpg"},
                    {id: 38, source: "app/img/dhl.jpg"},
                    {id: 39, source: "app/img/DELHIVERY.png"},
                    {id: 40, source: "app/img/GATI-SURFACE.png"},
                    {id: 41, source: "app/img/FEDEX.png"},
                    {id: 42, source: "app/img/FEDEX.png"},
                    {id: 43, source: "app/img/DELHIVERY.png"},
                    {id: 44, source: "app/img/DELHIVERY.png"},
                    {id: 45, source: "app/img/ECOMEXP.png"},
                    {id: 46, source: "app/img/SHADOWFAX.png"},
                    {id: 47, source: "app/img/ECOMINT.png"},
                    {id: 48, source: "app/img/EKART.png"}
                ];

                $scope.image_source = _.find(image_sources, function (obj) {
                    return obj.id == $scope.courierId;
                });

            }];
            return {
                restrict: 'E',
                replace: true,
                scope: {
                    'courierId': '@courierId'
                },
                template: '<img ng-src="{{image_source.source}}"/>',
                // templateUrl: 'app/views/directives/Courier.Company.Logo.html',
                controller: controller
            };
        });
})();

(function() {
    'use strict';

    angular
    .module('multichannel')
    .directive('balanceAmount', BalanceAmount);

    function BalanceAmount(){
        return {
            restrict    :   'EA',
            templateUrl :   'app/views/directives/balance.html',
            replace     :   true,
            controller  :   ['$scope', 'AppService', 'SR_CONSTANTS', '$q', 'Notify', '$localStorage', function ($scope, AppService, SR_CONSTANTS, $q, Notify, $localStorage)

            {
                $scope.appliedWeight = '';
                $scope.weight = '';
                if($localStorage.USER){
                  $scope.is_weight_dispute = $localStorage.USER.is_weight_dispute;
                  $scope.is_statement = $localStorage.USER.is_statement;
                  $scope.is_autorecharge_upgradable = $localStorage.USER.is_autorecharge_upgradable || false;
                  $scope.account_type = $localStorage.USER.account_type || false;
                  getTotalAmount();
                }

                function getTotalAmount() {
                     AppService.get(SR_CONSTANTS.api_urls.get_courier_applied_weight, true)
                         .success(function (data) {
                             $scope.isPreloader = false;
                             $scope.appliedWeight = data.data.response;
                             $scope.weight = data.data.response.balance_amount;
                         })
                         .error(function (error) {
                             $scope.isPreloader = false;
                             AppService.isAuth(error);
                         });
                 };

                 $scope.sync_amount = function(){
                    $scope.isPreloader = true;
                    var promise = AppService.get(SR_CONSTANTS.api_urls.sync_statement, true)
                        .success(function (data) {
                            $scope.isPreloader = false;
                            return  $q.when(data);
                        })
                        .error(function (error) {
                            $scope.isPreloader = false;
                            AppService.isAuth(error);
                        });

                    $q.all([promise]).then(function(){
                        getTotalAmount();
                    });

                    Notify.alert(SR_CONSTANTS.alert_messages.refreshing_amount,  {status: 'success' });

                };
        }]}
    };
})();

(function () {
    'use strict';

    angular.module('multichannel')
        .directive('currencyIcon', function () {
            return {
                restrict: 'E',
                replace: true,
                scope: {
                    'currency': '=currency'
                },
                templateUrl: 'app/views/directives/currency.icon.directive.html'
            }
        });

})();

(function() {
    'use strict';

    angular
        .module('multichannel')
        .directive('dateFilter', function() {
            return {
                restrict: 'E',
                replace: true,
                scope: {
                    'dateFrom': '=',
                    'dateTo': '=',
                    'orderFunction': '&'
                },
                templateUrl: 'app/views/directives/dateFilter.html',
                controller: ['$scope', '$parse', 'AppService', '$localStorage', function($scope, $parse, AppService, $localStorage) {

                    var start = $scope.dateFrom ? moment($scope.dateFrom, 'YYYY-MMM-DD') : moment().subtract(3, 'month');
                    var end = $scope.dateTo ? moment($scope.dateTo, 'YYYY-MMM-DD') : moment();

                    var user = $localStorage.USER;
                    if(user){
                      $('#datefilterrange').daterangepicker({
                        startDate: start,
                        endDate: end,
                        ranges: {
                          'All': [moment(user.created_at.date), moment()],
                          'Today': [moment(), moment()],
                          'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                          'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                          'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                          'This Month': [moment().startOf('month'), moment().endOf('month')],
                          'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                        }
                      }, cb);                      
                    }
                    // cb(start, end);

                    function cb(start, end) {
                        $scope.dateFrom = start.format('YYYY-MMM-DD').toString();
                        $scope.dateTo = end.format('YYYY-MMM-DD').toString();
                        var data = {
                            from: start.format('YYYY-MMM-DD').toString(),
                            to: end.format('YYYY-MMM-DD').toString()
                        }
                        AppService.applyTableFilter(data);
                        $scope.orderFunction();
                    }
                }]
            }

        });
})();

(function() {
    'use strict';

    angular
    .module('multichannel')
    .directive('multiSelectFilter', function() {
      function link(scope, element, attrs) {
          scope.selected = [];
          // scope.selectedAll;
          scope.clearFilterOption;
          var ids = [];

          scope.$watch('optionsData', function(newValue) {
              if (scope.filterModel != undefined && scope.filterModel != '') {
                  var ids = scope.filterModel.split(',');
              }

              _.forEach(scope.optionsData, function(item) {
                  if (_.indexOf(ids, item.value.toString()) > -1) {
                      scope.selected = scope.selected.concat(item.value.toString());
                  } else {
                      scope.clearFilterOption = false;
                      scope.selected = scope.selected.concat(false);
                  }
              });
          });

          scope.clearFilterOption = scope.selected.indexOf(false) != -1;

          scope.showProductPopup = function($event, listId) {
              $('.popover').hide();
              $event.stopPropagation();
              var targetdiv = angular.element($event.currentTarget);
              var divposition = targetdiv.parents('tr').position();

              if (Math.round(divposition.top) >= '320') {
                  targetdiv.parent().next(".popover").show().removeClass('bottom').addClass('top').css({ 'top': 'auto', 'bottom': '29px' });
              } else {
                  targetdiv.parent().next(".popover").show().removeClass('top').addClass('bottom').css({ 'top': '78px', 'bottom': 'auto' });
              }
          }

          scope.clearAll = function() {
              scope.selected = scope.optionsData.map(function(index, elem) {
                  return false;
              })
          }
      }

      return {
          restrict: 'E',
          replace: true,
          scope: {
              'optionsData': '=',
              'filterTitle': '@',
              'filterModel': '=',
              'orderFunction': '&',
              'filterKey': '@'
          },
          templateUrl: 'app/views/directives/multiSelectFilter.html',
          link: link,
          controller: ['$scope', '$parse', 'AppService', function($scope, $parse, AppService) {
              $scope.applyFilter = function() {
                  $('.popover').hide();
                  $scope.filterModel = angular.copy($scope.selected);
                  _.remove($scope.filterModel,  function(element)  {  
                      return  element  == false || element == null;
                  });
                  var data = {};
                  var model = $parse($scope.filterKey);
                  if ($scope.filterModel && $scope.filterModel != "") {
                      model.assign(data, $scope.filterModel.toString());
                  } else {
                      model.assign(data, null);
                  }
                  AppService.applyTableFilter(data);
                  $scope.orderFunction();
              }
          }]

      }
  });
})();

(function () {
    'use strict';

    angular.module('multichannel').directive('numbersOnly', function () {
        return {
            require: 'ngModel',
            link: function (scope, element, attr, ngModelCtrl) {
                function fromUser(text) {
                    if (text) {
                        var transformedInput = text.replace(/[^0-9]/g, '');

                        if (transformedInput !== text) {
                            ngModelCtrl.$setViewValue(transformedInput);
                            ngModelCtrl.$render();
                        }
                        return transformedInput;
                    }
                    return undefined;
                }

                ngModelCtrl.$parsers.push(fromUser);
            }
        };
    });
})();

;(function(angular){
	"use strict";

	angular
	.module('multichannel')
	.directive("previewImage", PreviewImage);

	// PreviewImage.$inject = ['httpService']

	function PreviewImage() {
		return {
			scope: {
				previewImage: "=",
				imageFile: "=",
			},
			link: function (scope, elm, attr) {
				var formdata = new FormData();
				var fileUrl;
				elm.bind("change", function (changeEvent) {
					var file = changeEvent.target.files[0];
					scope.imageFile = file;
					console.log(scope)
					var reader = new FileReader();
					reader.onload = function (loadEvent) {
						scope.$apply(function () {
							scope.previewImage = loadEvent.target.result;
						});
					}
					reader.readAsDataURL(file);
				});

				scope.$on('$destroy', function(){
					elm.unbind('change');
				})
			}
		}
	}
})(angular);

(function() {
    'use strict';

    angular.module('multichannel')
        .directive('searchFilter', function() {


            function link(scope, element, attrs) {
                scope.showProductPopup = function($event, listId) {
                    $('.popover').hide();
                    $event.stopPropagation();
                    var targetdiv = angular.element($event.currentTarget);
                    var divposition = targetdiv.parents('tr').position();

                    if (Math.round(divposition.top) >= '320') {
                        targetdiv.parent().next(".popover").show().removeClass('bottom').addClass('top').css({ 'top': 'auto', 'bottom': '29px' });
                    } else {
                        targetdiv.parent().next(".popover").show().removeClass('top').addClass('bottom').css({ 'top': '78px', 'bottom': 'auto' });
                    }
                }
            }

            return {
                restrict: 'E',
                replace: true,
                scope: {
                    'filterModel': '=',
                    'filterTitle': '@',
                    'filterKey': '@',
                    'orderFunction': '&'
                },
                templateUrl: 'app/views/directives/searchFilter.html',
                link: link,
                controller: ['$scope', '$parse', 'AppService', function($scope, $parse, AppService) {
                    $scope.apply_filter = function() {
                        $('.popover').hide();
                        var data = {};
                        var model = $parse($scope.filterKey);
                        if ($scope.filterModel && $scope.filterModel != "") {
                            model.assign(data, $scope.filterModel);
                        } else {
                            model.assign(data, null);
                        }
                        AppService.applyTableFilter(data);
                        $scope.orderFunction();
                    }
                }]
            }

        });
})();
(function () {
	'use strict';

	angular.module('app.help').controller('raiseNewTicketController', raiseNewTicketController);
	raiseNewTicketController.$inject = ['$rootScope', '$scope', 'AppService', '$state', 'Notify', '$localStorage', 'loaderFactory'];

	function raiseNewTicketController($rootScope, $scope, AppService, $state, Notify, $localStorage, loaderFactory)
	{
		$scope.categories = [{value: 'Select Options'}];
		$scope.sub_categories = [{value: 'Select Options'}];

		$scope.subject = '';
		$scope.selected_category = null;
		$scope.selected_sub_category = null;
		$scope.body = '';
		$scope.file = '';


		AppService.get('jitbit/categories', true)
        .success(function(data) {
        	$scope.categories =  $scope.categories.concat(data.data);
        })
        .error(function(error) {
            AppService.isAuth(error);
        })

        AppService.get('jitbit/categories?type=sub_categories', true)
        .success(function(data) {
        	$scope.sub_categories =  $scope.sub_categories.concat(data.data);
        })
        .error(function(error) {  
            AppService.isAuth(error);
        })

        $scope.createTicket = function()
        {

        	loaderFactory.display("Please Wait;");
        	var formData = new FormData();
        	formData.append('subject', $scope.subject);
			formData.append('body', $scope.body);
			formData.append('category', $scope.selected_category !== null ? $scope.selected_category.id : '');
			formData.append('sub_category', $scope.selected_sub_category !== null? $scope.selected_sub_category.id : '' );
			formData.append('file', $('.attachment-new-upload')[0].files[0]);

        	AppService.postFormData('jitbit/ticket', formData, true)
	        .success(function(data) {
	        	loaderFactory.hide();
	        	$scope.subject = '';
				$scope.selected_category = '';
				$scope.selected_sub_category = '';
				$scope.body = '';
				$scope.file = '';
				Notify.alert(data.message, {status : 'success'});
				$state.go('app.viewAllTickets', {notify: false})
	        })
	        .error(function(error) {
	        	loaderFactory.hide();  
	            AppService.isAuth(error);
	        })

        }

        $scope.getFileDetails = function (e) {
            $scope.files = null;
            var file = e.files[0];
	          var reader = new FileReader();
	          reader.addEventListener("load", function () {
	            var obj = {};
	            obj.name = file.name;
	            obj.size = file.size;
	            obj.type = file.type;
	            obj.base64 = /\.(jpe?g|png|gif)$/i.test(file.name) ? this.result : 'file';
	            $scope.$apply(function () {
	                $scope.files = obj;
	            });
	          }, false);
	          reader.readAsDataURL(file);
	                    
        }

        $scope.removeUploadImg = function(indexfile)
        {
           $scope.files = null;
           $(".attachment-new-upload").val('');
        }
	}
})();
(function () {
	'use strict';

	angular.module('app.help').controller('supportController', SupportController);

	SupportController.$inject = ['$scope', 'AppService', 'Notify','loaderFactory'];

	function SupportController($scope, AppService, Notify, loaderFactory)	{

		$scope.kam_details = {};
		$scope.create_ticket_link = "#";
		$scope.create_ticket1 = create_ticket;
		call_kam_details();
		create_ticket();


		function call_kam_details() {
			loaderFactory.display('Please Wait!');
			AppService.get('settings/company/kam-details', true)
			.success(function(data){
				$scope.kam_details = data;
				loaderFactory.hide();
			})
			.error(function(error){
				AppService.isAuth(error);
				loaderFactory.hide();
			})
		}

		function create_ticket() {
			// loaderFactory.display('Please Wait!');
			AppService.get('support/sso-url', true)
			.success(function(data){
				$scope.ticket = data;
				$scope.create_ticket_link = data.url;
			})
			.error(function(error){
				AppService.isAuth(error);
				loaderFactory.hide();
			})
		}
	}
})();

(function () {
	'use strict';

	angular.module('app.help').controller('ticketDetailsController', ticketDetailsController);

	ticketDetailsController.$inject = ['$rootScope', '$scope', 'AppService', '$state', 'Notify', '$localStorage', 'loaderFactory', '$stateParams'];

	function ticketDetailsController($rootScope, $scope, AppService, $state, Notify, $localStorage, loaderFactory, $stateParams)
	{
		$scope.ticketData = {};
		$scope.conversation = {};
		$scope.userComment = '';
		$scope.file = '';
		$scope.ticketId = $stateParams.id;
		$scope.isComment = false;

		function getTicketDetails()
		{
			loaderFactory.display('Please Wait!');
			AppService.get('jitbit/ticket/'+$scope.ticketId, true)
			.success(function(data){
				$scope.ticketData = data.data;
				loaderFactory.hide();
			})
			.error(function(error){
				AppService.isAuth(error);
				loaderFactory.hide();
			})
		}

		function getConversation()
		{
			loaderFactory.display('Please Wait!');
			AppService.get('jitbit/conversation?ticket_id='+$scope.ticketId, true)
			.success(function(data){
				$scope.conversation  = data;
				loaderFactory.hide()
			})
			.error(function(error){
				AppService.isAuth(error);
				loaderFactory.hide();
			})
		}

		$scope.submitComment = function()
		{
			loaderFactory.display('Please Wait!');
			var formData = new FormData();
			formData.append('ticket_id', $scope.ticketId);
			formData.append('message', $scope.userComment);
			formData.append('file', $('.attachment-upload')[0].files[0]);
			AppService.postFormData('jitbit/comment', formData, true)
			.success(function(data){
				getConversation(); getTicketDetails();
				$scope.userComment = '';
				$scope.files = null;
				$('.attachment-upload').val('');
				Notify.alert(data.message, {status : 'success'});
				loaderFactory.hide()
			})
			.error(function(error){
				AppService.isAuth(error);
				loaderFactory.hide()
			})
		}

		$scope.downloadAttachment = function(attachmentId, aName)
		{
			loaderFactory.display('Please Wait!');
			AppService.getBlob('jitbit/attachment/'+attachmentId+'?attachment_name='+aName, true)
			.success(function(data){
				AppService.downloadBlob(data, aName)
				loaderFactory.hide()
			})
			.error(function(error){
				AppService.isAuth(error);
				loaderFactory.hide();
			})
		}

		$scope.getFileDetails = function (e) {
	        $scope.files = null;
	        var file = e.files[0];
	        var reader = new FileReader();
	        reader.addEventListener("load", function () {
	          var obj = {};
	          obj.name = file.name;
	          obj.size = file.size;
	          obj.type = file.type;
	          obj.base64 = /\.(jpe?g|png|gif)$/i.test(file.name) ? this.result : 'file';
	          $scope.$apply(function () {
	              $scope.files = obj;
	          });
	        }, false);
	        reader.readAsDataURL(file);

	    }

	    $scope.removeUploadImg = function(indexfile)
	    {	
	       $scope.files = null;
	       $(".attachment-upload").val('');
	    }

			getConversation();
			getTicketDetails();
		}

})();

(function () {
	'use strict';

	angular.module('app.help').controller('viewAllTicketsController', viewAllTicketsController);

	viewAllTicketsController.$inject = ['$rootScope', '$scope', 'AppService', '$state', 'Notify', '$localStorage', 'loaderFactory', '$stateParams', '$uibModal'];

	function viewAllTicketsController($rootScope, $scope, AppService, $state, Notify, $localStorage, loaderFactory, $stateParams, $uibModal)
	{
		$scope.tickets = [];
		$scope.date_to = null;
		$scope.date_from = null;
		$scope.status = [{id:'', value: 'Select Status'}];
		$scope.selectStatus = $scope.status[0];
		$scope.maxSize = 0;
        $scope.totalItems = 10000000;
        $scope.page = $stateParams.page;
		$scope.itemsPerPage =
        [	{value:'15', id:0},
	        {value:'30', id:1},
	        {value:'60', id:2},
	        {value:'100', id:3}
        ];

		var DateFilter =
        {
            'from': '',
            'to': ''
        }

        var orderdate = {
            className: 'orderdate',
            width: $('.orderdate').outerWidth(),
            tableClass: 'viewTicketwrapper'
        }

        var dimension = {
	        className: 'tktsubject',
	        width: $('.tktsubject').outerWidth()
	      }

        if($stateParams.perPage == 30)
        {
            $scope.selectedItems = 1;
        }else if($stateParams.perPage == 60)
        {
            $scope.selectedItems = 2;
        }else if($stateParams.perPage == 100)
        {
            $scope.selectedItems = 3;
        }else
        {
            $scope.selectedItems = 0;
        }

        AppService.get('jitbit/status', true)
        .success(function(data) {
        	$scope.status = $scope.status.concat(data);
        })
        .error(function(error) {
            AppService.isAuth(error);
            loaderFactory.hide();
        })


		function getAllTickets()
		{	
			loaderFactory.display('Please Wait!');

			var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
			
			AppService.get('jitbit/tickets?per_page='+ perPage +'&date_from='+ DateFilter.from + "&date_to="+ DateFilter.to+"&status="+$scope.selectStatus.id+"&page="+$scope.page, true)
	        .success(function(data) {
	        	$scope.tickets = data.data;
	        	$scope.metaData = data.meta
	        	$state.go('.', {perPage: perPage, date_from: DateFilter.from, date_to: DateFilter.to, page: $scope.page}, {notify: false})
	        	if(!data)
	        	{
	        		loaderFactory.hide();
	        	}
	        	AppService.setHeight();
                $scope.$on('viewAllTickets', function(ngRepeatFinishedEvent){
                    AppService.setWidth(orderdate, dimension);
                    loaderFactory.hide();
                }); 
	        })
	        .error(function(error) {
	            AppService.isAuth(error);
	            loaderFactory.hide();
	        })
		}

		$scope.changePerPage =  function()
		{
			getAllTickets();
		}

		$scope.reply = function(ticketId){

			var data =
	            {
	                'ticketId': ticketId
	            }
	            var modalInstance = $uibModal.open({
	                animation: true,
	                templateUrl: 'app/views/modals/comment.html',
	                controller: 'commentsController',
	                size: 'md',
	                resolve:
	                {
	                    items: function ()
	                    {
	                        return data
	                    }
	                }
	            });
		}

		//new date picker JS
	    var start = moment().subtract(1, 'month');
	    var end = moment();
	    var user = $localStorage.USER;

	    $('#ticketDaterange').daterangepicker({
	        startDate: start,
	        endDate: end,
	        ranges: {
	           'All': [moment(user.created_at.date), moment()],
	           'Today': [moment(), moment()],
	           'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
	           'Last 7 Days': [moment().subtract(6, 'days'), moment()],
	           'Last 30 Days': [moment().subtract(29, 'days'), moment()],
	           'This Month': [moment().startOf('month'), moment().endOf('month')],
	           'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
	        }
	    }, cb);
	    cb(start, end);
	    function cb(start, end)
	    {
	        DateFilter.from = start.format('YYYY-MMM-DD').toString();
	        DateFilter.to = end.format('YYYY-MMM-DD').toString();
	        $('#ticketDaterange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
	        getAllTickets();
	    }


	}
})();
(function() {
    'use strict';
    angular.module('app.report').controller('wdImageUploadController', wdImageUploadController);
    wdImageUploadController.$inject = ['$rootScope', '$state', '$scope', 'AppService', 'Notify', 'SR_CONSTANTS', '$localStorage', 'loaderFactory'];
        function wdImageUploadController ($rootScope, $state, $scope, AppService, Notify, SR_CONSTANTS, $localStorage, loaderFactory)
        {
        	$scope.awb_code = '';
            $scope.getFileDetails = function (e) {
                $scope.files = [];
                $scope.filesData = [];
                // STORE THE FILE OBJECT IN AN ARRAY.              
                for (var i = 0; i < e.files.length; i++) {
                    if(i === 5)
                    {
                       break
                    }   
                    var files = e.files[i];
                    function readAndPreview(file) 
                    {
                        if ( /\.(jpe?g|png|gif)$/i.test(files.name) ) {
                          var reader = new FileReader();
                          reader.addEventListener("load", function () {
                            var obj = {};
                            obj.name = file.name;
                            obj.size = file.size;
                            obj.type = file.type;
                            obj.base64 = this.result;
                            $scope.$apply(function () {
                                $scope.files.push(obj);
                            });
                          }, false);
                          reader.readAsDataURL(file);
                          
                        }
                    }
                    if (files) {
                        readAndPreview(files);
                    }
                    $scope.filesData.push(e.files[i]);
                }
            };

            $scope.removeImg = function(indexfile)
            { 
                $scope.files.forEach(function(item, index){
                    
                    if(index === indexfile)
                    {
                       $scope.files.splice(index, 1);
                       $scope.filesData.splice(index, 1);
                       $(".UploadDiscrepacyImg").val(''); 
                    }
                });
            }

            $scope.uploadImg =function()
            {   
                loaderFactory.display("Please Wait!");
                var formData = new FormData();
                for (var i in $scope.filesData) {
                    formData.append("weight_dispute_images"+i, $scope.filesData[i]);
                }
                formData.append('awb_code', $scope.awb_code);
                AppService.postFormData('admin/weight/images_upload', formData, true)
                .success(function(data){
                    loaderFactory.hide();
                    Notify.alert(data.message, { status: 'success' });
                    $state.go($state.current, {}, { reload: true });  
                })
                .error(function(error){
                    loaderFactory.hide(); 
                    AppService.isAuth(error);  
                })
            }
        }
})();
(function() {
    'use strict';
    angular.module('app.report').controller('wdMisUploadController', wdMisUploadController);
    wdMisUploadController.$inject = ['$rootScope', '$state', '$scope', 'AppService', 'Notify', 'SR_CONSTANTS', '$localStorage', 'loaderFactory'];
        function wdMisUploadController ($rootScope, $state, $scope, AppService, Notify, SR_CONSTANTS, $localStorage, loaderFactory)
        {
            $scope.filesData = '';
            $scope.uploadMisFile = function()
            {
                var formData = new FormData();
                loaderFactory.display("Please Wait!");
                var filesData = $('.mis-file-upload')[0].files;
                formData.append("file", filesData[0]);

                AppService.postFormData('courier/upload/mis/weight', formData, true)
                .success(function(data){
                    loaderFactory.hide();
                    $('.mis-file-upload').val('');
                    AppService.isAuth(data);
                })
                .error(function(error){
                    loaderFactory.hide(); 
                    AppService.isAuth(error);  
                })
            }
        }
})();
(function() {
    'use strict';
    angular.module('app.report').controller('wdResolvedSheetController', wdResolvedSheetController);
    wdResolvedSheetController.$inject = ['$rootScope', '$state', '$scope', 'AppService', 'Notify', 'SR_CONSTANTS', '$localStorage', 'loaderFactory'];
        function wdResolvedSheetController ($rootScope, $state, $scope, AppService, Notify, SR_CONSTANTS, $localStorage, loaderFactory)
        {

            $scope.filesData = '';
            $scope.uploadResolvedSheet = function()
            {
                var formData = new FormData();
                loaderFactory.display("Please Wait!");
                var filesData = $('.UploadResolvedSheet')[0].files;
                formData.append("file", filesData[0]);

                AppService.postFormData('weightdispute/upload', formData, true)
                .success(function(data){
                    loaderFactory.hide();
                    $('.UploadResolvedSheet').val('');
                    AppService.isAuth(data);
                })
                .error(function(error){
                    loaderFactory.hide(); 
                    AppService.isAuth(error);  
                })
            }   
        }
})();
(function() {
    'use strict';
    angular.module('app.settings').controller('addPickupLocationController', addPickupLocationController);

    addPickupLocationController.$inject = ['$scope', '$rootScope', '$uibModalInstance', '$localStorage', 'SR_CONSTANTS', 'AppService', 'loaderFactory', 'Notify', '$state'];
    function addPickupLocationController($scope, $rootScope, $uibModalInstance, $localStorage, SR_CONSTANTS, AppService, loaderFactory, Notify, $state){
        if($localStorage.USER){
          activate();
        }
        ////////////////
        function activate(){

            $scope.pickupAddress =
            {
                pickup_location: '',
                name: '',
                email:'',
                phone: '',
                address: '',
                address_2: '',
                country: 'India',
                state: '',
                city: '',
                pin_code: '',

            }
            $scope.stateList = '';

            $scope.cancel = cancel;
            $scope.addPickupLocation = addPickupLocation;
            $scope.checkPickupInSameaddress = checkPickupInSameaddress;

            function cancel(){
              $uibModalInstance.dismiss('cancel');
            }


            function addPickupLocation(pickupAddr ){
                loaderFactory.display("Please Wait!");
                angular.element('.validation-alert').remove();
                var changedAddr = angular.copy(pickupAddr)
                if(typeof(changedAddr.state != 'string')){
                  changedAddr.state = $scope.pickupAddress.state.name;
                }
                AppService.post('settings/company/addpickup', true, changedAddr)
                .success(function(data){
                  $uibModalInstance.dismiss('cancel');
                  $state.reload();
                })
                .error(function(error){
                    loaderFactory.hide();
                    AppService.isAuth(error);
                    AppService.alertValidation(error.errors);
                })
            }


            function checkPickupInSameaddress(){
                $('.message').remove();
                if($scope.pickupAddress.pin_code == null ||$scope.pickupAddress.pin_code.toString().length != 6 ){
                  $scope.pickupAddress.city = ''
                  $scope.pickupAddress.state = ''
                  return;
                }
                else{
                    checkPincodeForServiciability($scope.pickupAddress.pin_code, '');
                }
            }

            function pincodeDetails(pincode){
              loaderFactory.display('Fetching pincode details.')
              var data = {
                "postcode": pincode
              }
              AppService.get_with_params('external/open/postcode/details', data, true)
              .then(function(res){
                $scope.pickupAddress.city = res.data.postcode_details.city;
                $scope.stateList.reduce(function(i, e){
                  if(e.code == res.data.postcode_details.state_code){
                    $scope.pickupAddress.state = e;
                  }
                });
                loaderFactory.hide();
              });
            }

            function checkPincodeForServiciability(pincode, target){
                loaderFactory.display('Checking for Serviceability. Please Wait !')
                $('.message').remove();
                var url = 'courier/pickup/'+ pincode;

                AppService.get(url , true)
                .success(function(data){
                  $scope.pickupDisable = false;
                  pincodeDetails(pincode);
                })
                .error(function(error){
                  loaderFactory.hide()
                  $scope.pickupDisable = true;
                  AppService.isAuth(error);
                })
            }

            stateListData();

            function stateListData(whichCountry){
                loaderFactory.display("Please Wait!");
                var countryId = '99';

                AppService.get('countries/show/'+  countryId, true)
                .success(function(data){
                    $scope.stateList = angular.copy(data.data);
                    loaderFactory.hide();
                })
                .error(function(error){
                    AppService.isAuth(error);
                    loaderFactory.hide();
                })
            }

        }
    }
})();

(function() {
    'use strict';
    angular.module('app.settings').controller('billingAutoPopupController', billingAutoPopupController);

    billingAutoPopupController.$inject = ['$scope', '$rootScope', '$uibModalInstance', '$localStorage', 'SR_CONSTANTS', 'AppService'];
    function billingAutoPopupController($scope, $rootScope, $uibModalInstance, $localStorage, SR_CONSTANTS, AppService){
        activate();
        ////////////////
        function activate()
        {

            var user = $localStorage.USER;
            if(user){
                $rootScope.isBasicPlan = user.is_basic_plan;
                $scope.is_auto_accept_notification_seen  = user.is_auto_accept_notification_seen;
                if(user.is_free_plan)
                {
                    $scope.isFreePlan = true;
                    $rootScope.isRestrictFreePlan = true;
                }
            }


            $scope.accept_terms = function(){
                if($scope.is_auto_accept_notification_seen ){
                    seenAndAccepted();
                }else{
                    $uibModalInstance.close(true);
                }
            };

            $scope.cancel = function()
            {
                $uibModalInstance.dismiss('cancel');
            };

            function seenAndAccepted() {
                $scope.isPreloader = true;
                $uibModalInstance.close(true);
                AppService.post('users/auto_accept_notification/seen', true, true)
                    .success(function (data) {
                        var user = $localStorage.USER;
                        user.is_auto_accept_notification_seen = 1;
                    })
                    .error(function (error) {
                        $scope.isPreloader = false;
                        AppService.isAuth(error);
                    });

            }

        }
    }
})();
(function () {
	'use strict';

	angular.module('app.help').controller('commentsController', commentsController);

	commentsController.$inject = ['$rootScope', '$scope', 'AppService', '$state', 'Notify', '$localStorage', 'loaderFactory', '$stateParams', 'items', '$uibModalInstance'];

	function commentsController($rootScope, $scope, AppService, $state, Notify, $localStorage, loaderFactory, $stateParams, items, $uibModalInstance)
	{	
		$scope.conversation = {};
		$scope.ticketId = items.ticketId;
		$scope.file = '';
		$scope.isComment = false;

		loaderFactory.display('Please Wait!');
		AppService.get('jitbit/conversation?ticket_id='+$scope.ticketId, true)
		.success(function(data){
			$scope.conversation  = data;
			loaderFactory.hide()
		})
		.error(function(error){
			AppService.isAuth(error);
			loaderFactory.hide();
		})

		$scope.cancel = function()
        {
            $uibModalInstance.dismiss('cancel');
        }

        $scope.submitComment = function()
		{
			loaderFactory.display('Please Wait!');
			var formData = new FormData();
			formData.append('ticket_id', $scope.ticketId);
			formData.append('message', $scope.userComment);
			formData.append('file', $('.attachment-comment-upload')[0].files[0]);
			AppService.postFormData('jitbit/comment',formData, true )
			.success(function(data){
				$scope.files = null;
           		$(".attachment-comment-upload").val('');
				Notify.alert(data.message, {status : 'success'});
				$scope.cancel();
				loaderFactory.hide()
			})
			.error(function(error){
				AppService.isAuth(error);
				loaderFactory.hide()
			})
		}

		$scope.getFileDetails = function (e) {
            $scope.files = null;
            var file = e.files[0];
	          var reader = new FileReader();
	          reader.addEventListener("load", function () {
	            var obj = {};
	            obj.name = file.name;
	            obj.size = file.size;
	            obj.type = file.type;
	            obj.base64 = /\.(jpe?g|png|gif)$/i.test(file.name) ? this.result : 'file';
	            $scope.$apply(function () {
	                $scope.files = obj;
	            });
	          }, false);
	          reader.readAsDataURL(file);
	                    
        }

        $scope.removeUploadImg = function(indexfile)
        {
           $scope.files = null;
           $(".attachment-comment-upload").val('');
        }
	}
})();
(function () {
	'use strict';
	angular.module('app.settings').controller('createApiUserController', createApiUserController);

	createApiUserController.$inject = ['$scope', '$uibModalInstance', 'SR_CONSTANTS', 'AppService', 'loaderFactory', 'Notify', 'items', '$state'];

	function createApiUserController($scope, $uibModalInstance, SR_CONSTANTS, AppService, loaderFactory, Notify, items, $state)
	{	
		$scope.apiUserEmail = items;
		$scope.apiUserPassword = '';
		$scope.confirmPassword = '';
		$scope.isPasswordReset = items !== null ? true : false;
		$scope.btnText = $scope.isPasswordReset ? 'Save' : 'Generate API Credential';
		$scope.cancel = function()
        {
            $uibModalInstance.dismiss('cancel');
        }

        $scope.updateApiUser = function(isPasswordReset)
        {	$('.validation-alert').remove();

        	var data = {
        		email: $scope.apiUserEmail,
        		password: $scope.apiUserPassword
        	}
        	var url;
        	if(isPasswordReset)
        	{	loaderFactory.display('Updating Password');
        		url = SR_CONSTANTS.api_urls.update_Password
        	}
        	else{
        		loaderFactory.display('Creating API User');
        		url = SR_CONSTANTS.api_urls.create_api_user
        	}
        	AppService.post(url, true, data)
        	.success(function(data){
        		loaderFactory.hide();
        		Notify.alert(data.message, 'success');
        		if(!isPasswordReset)
        		{
        			$state.go($state.current, {}, {reload: true});
        		}
        		$uibModalInstance.dismiss('cancel');
        	})
        	.error(function(error){
        		loaderFactory.hide();
        		if(error.status_code === 422)
        		{
        			AppService.alertValidation(error.errors, true);
        		}
        		else if (error.status_code === 400)
        		{
        			$uibModalInstance.dismiss('cancel');
        		}
        		Notify.alert(error.message, 'danger');
        	})
        }
	}

})();

(function() {
    'use strict';
    angular.module('app.settings').controller('documentModalController', documentModalController);

    documentModalController.$inject = ['$scope', '$rootScope', 'AppService', '$uibModalInstance', '$window', 'appConstant', '$state', '$localStorage', 'items'];
    function documentModalController($scope, $rootScope, AppService, $uibModalInstance, $window, appConstant, $state, $localStorage, items) {
        activate();
        ////////////////
        function activate()
        {
            $scope.pathinfo = function (filename) {
                var a = filename.split(".");
                if( a.length === 1 || ( a[0] === "" && a.length === 2 ) ) {
                    return "";
                }
                return a.pop();
            };
            $scope.open_file = function(file){
                $window.open(file, '_blank');
            }

            $scope.document = items.document.url;
            $scope.canDelete = items.isEditable;

            var user = $localStorage.USER;
            if(typeof user !== 'undefined') {
                $rootScope.isBasicPlan = user.is_basic_plan;
                $rootScope.isInernationalActivated = user.international_status == 1;
                // $rootScope.international_plans = (user.plan_id == 4) || (user.plan_id == 3);
                $rootScope.international_plans = _.indexOf(appConstant.internationalPlans, user.plan_id) > -1 ;

                if (user.is_free_plan) {
                    $scope.isFreePlan = true;
                    $rootScope.isRestrictFreePlan = true;
                }
            }
            $scope.cancel = function()
            {
                $uibModalInstance.dismiss('cancel');
            };

            $scope.goto_state = function(state){
                $scope.cancel();
                $state.go(state);
            }

            $scope.delete = function(){
                $scope.isPreloader = true;
                AppService.deleteData('settings/international/document/' + items.document.document_log_id, true,{})
                    .success(function(data)
                    {
                        $scope.isPreloader = false;
                        $uibModalInstance.close('document_deleted');

                    })
                    .error(function(error)
                    {
                        AppService.isAuth(error);
                    })

            }

        }
    }
})();
(function () {
	'use strict';
	angular.module('app.setting').controller('editPickupAddressController', editPickupAddressController);

	editPickupAddressController.$inject = ['$scope', 'AppService', 'SR_CONSTANTS', 'loaderFactory', '$uibModalInstance', 'items', '$state', 'Notify'];

	function editPickupAddressController($scope, AppService, SR_CONSTANTS, loaderFactory, $uibModalInstance, items, $state, Notify)
	{
		$scope.newPickupAddress = items;
		$scope.cancel = function()
		{
			$uibModalInstance.dismiss('cancel');
		}

		$scope.savePickupLocation = function()
		{
			$('.validation-alert').remove();
			loaderFactory.display("Please Wait! Updating Pickup Address");
			var data = {
				pickup_location_new : $scope.newPickupAddress.pickup_location,
				name : $scope.newPickupAddress.name,
				email : $scope.newPickupAddress.email,
				phone : $scope.newPickupAddress.phone,
				id: $scope.newPickupAddress.id,
			}
			AppService.patch('settings/company/editpickupcode', true, data)
			.success(function(data){
				loaderFactory.hide();
				$uibModalInstance.dismiss('cancel');
				Notify.alert(data.message, { timeout: 3000, status: 'success' });
				$state.go($state.current, {}, {reload: true});
			})
			.error(function(error){
				AppService.isAuth(error);
                loaderFactory.hide();
                AppService.alertValidation(error.errors, true);
			})
		}
	}

})();


(function() {
    'use strict';
    angular
    .module('app.settings')
    .controller('IntDetailsModal', IntDetailsModal);

    IntDetailsModal.$inject = ['$scope', '$uibModalInstance', 'SR_CONSTANTS', 'AppService', 'items', 'loaderFactory'];
    function IntDetailsModal($scope, $uibModalInstance, SR_CONSTANTS, AppService, items, loaderFactory) {
        activate();
        ////////////////
        function activate(){
            loaderFactory.hide();
            $scope.isPreloader = true;
            $scope.is_settings_page = items.is_settings_page;
            $scope.details_added = false;
            $scope.form = {};
            $scope.international_data = {};
            $scope.courier = items.courier;
            $scope.cancel = cancel;
            $scope.save = save;

            function cancel(){
              $uibModalInstance.dismiss('cancel');
            };

            AppService.get('settings/get/' + items.courier, true)
            .success(function (data) {
              $scope.international_data = data;
              $scope.isPreloader = false;
            })
            .error(function (error) {
              $scope.isPreloader = false;
              AppService.isAuth(error);
            });


            function save(){
              $scope.isPreloader = true;
              var save_service = "";
              if(items.courier == "fedex"){
                  save_service = AppService.post('settings/update/fedex', true,  $scope.international_data);
              }else if(items.courier == "dhl"){
                  save_service = AppService.get_with_params('settings/get/dhl',  $scope.international_data, true);
              }

              save_service
              .success(function (data) {
                $scope.isPreloader = false;
                $scope.details_added = true;
              })
              .error(function (error) {
                $scope.isPreloader = false;
                AppService.isAuth(error);
              })
            }
        }
    }
})();


(function() {
    'use strict';
    angular.module('app.settings').controller('genericModalController', genericModalController);

    genericModalController.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'SR_CONSTANTS', '$state', '$localStorage'];
    function genericModalController($scope, $rootScope, $uibModalInstance, SR_CONSTANTS, $state, $localStorage) {
        activate();
        ////////////////
        function activate()
        {
            var user = $localStorage.USER;
            if(typeof user !== 'undefined') {
                $rootScope.isBasicPlan = user.is_basic_plan;
                $rootScope.isInernationalActivated = user.international_status == 1;
                $scope.pro_plan = user.plan_id == 4;
                if (user.is_free_plan) {
                    $scope.isFreePlan = true;
                    $rootScope.isRestrictFreePlan = true;
                }
            }
            $scope.cancel = function()
            {
                $uibModalInstance.dismiss('cancel');
            };

            $scope.goto_state = function(state){
                $scope.cancel();
                $state.go(state);
            }

        }
    }
})();
;(function(angular) {
    'use strict';

    angular
      .module('app.orders')
      .controller('orderTypeController', OrderTypeController);

    OrderTypeController.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'ordertype', '$localStorage', 'SR_CONSTANTS', '$state'];
    function OrderTypeController($scope, $rootScope, $uibModalInstance,  ordertype, $localStorage, SR_CONSTANTS, $state){
        activate();
        ////////////////
        function activate()
        {
          $scope.isPreloader = false;
          $scope.state = ordertype == 0 ? 'app.customorder' : 'app.createReturn';
          $scope.orderType = ordertype == 0 ? 'Forward Order' : 'Return Order';
          $scope.createOrder = createOrder;

          function createOrder (order) {
            $state.go($scope.state, {type: order});
            $uibModalInstance.dismiss('cancel');
          }
        }
    }
})(angular);

/**=========================================================
 * Module: remittanceDetailsController
  =========================================================*/
(function() {
  'use strict';

  angular
    .module('app.orders')
    .controller('remittanceDetailsController', RemittanceDetailsController);

  RemittanceDetailsController.$inject = ['$stateParams', '$rootScope', '$scope', 'AppService', '$state', 'Notify', '$uibModalInstance', 'items', '$uibModal', 'SR_CONSTANTS', '$localStorage', 'loaderFactory'];

  function RemittanceDetailsController($stateParams, $rootScope, $scope, AppService, $state, Notify, $uibModalInstance, items, $uibModal, SR_CONSTANTS, $localStorage, loaderFactory) {
    $scope.data = items.data;

    //functions
    $scope.exportData = exportData;

    function exportData(crfId) {
      var url = items.export_url;
      AppService.get(url, true)
        .then(function(res) {
          AppService.downloadDataWithUrl(res.data.download_url, crfId)
          .then(function(res){
            $uibModalInstance.close('done');
          })
        })
    }
  }
})();

(function () {
	
	'use strict';
	angular
		.module('app.report')
		.controller('shipmentDataUpdateController', shipmentDataUpdateController);

	shipmentDataUpdateController.$inject = [ 
	 	'$stateParams',
		'$rootScope',
		'$scope',
		'AppService' , 
		'$state', 
		'Notify', 
		'$uibModalInstance',
		'items', 
		'SR_CONSTANTS', 
		'loaderFactory'
	];

    function shipmentDataUpdateController( 
    	$stateParams, 
    	$rootScope, 
    	$scope, 
    	AppService ,
    	$state, 
    	Notify, 
    	$uibModalInstance, 
    	items, 
    	SR_CONSTANTS, 
    	loaderFactory
    ) {

    	console.log( items.shipmentStatuses );
    	
		$scope.shipmentStatuses = [

			{ status_value: 7, status_name: 'DELIVERED' },
			{ status_value: 9, status_name: 'RTO INITIATED' },
			{ status_value: 10, status_name: 'RTO DELIVERED' },	
			{ status_value: 16, status_name: 'CANCELLATION REQUESTED' },
			{ status_value: 17, status_name: 'OUT FOR DELIVERY' }

		]; //items.shipmentStatuses;
		
		$scope.shipment = items.shipment;

		$scope.form  = {
			status_id : $scope.shipment.status_id,
			remarks: ''
		}
		/**
		 * To cancel or close form.
		 * 
		 * @return void
		 */
		$scope.cancel = function()
		{
			$uibModalInstance.dismiss('cancel');
		}
        	
        /**
         * To update shipment data.
         * 
         * @param  {json} shipment
         * 
         * @return {void}
         */
		$scope.updateShipmentData = function()
        {
			loaderFactory.display("Please Wait! Updating Shipment Status");
			
			var data = {
				'shipment_id' : $scope.shipment.id,
				'status'	  : $scope.form.status_id,
				'remarks'	  : $scope.form.remarks
			};

			AppService.post('admin/shipments/update-status', true, data)
			.success(function(data){
				
				loaderFactory.hide();
				
				$uibModalInstance.dismiss('cancel');
				
                AppService.alertValidation('Shipment Status Updated Successfully', true);

				$state.go($state.current, {}, {reload: true});
			})
			.error(function(error){

				AppService.isAuth(error);
                loaderFactory.hide();

                AppService.alertValidation(error.errors, true);
			});
        }
	}

})();

/**=========================================================
 * Module: shopifyBillingConf
  =========================================================*/
(function() {
  'use strict';

  angular
  .module('app.settings')
  .controller('shopifyBillingConf', shopifyBillingConf);

  shopifyBillingConf.$inject = ['$rootScope', '$localStorage', '$scope', 'AppService', 'Notify', '$uibModalInstance', 'items', 'SR_CONSTANTS', 'loaderFactory'];

  function shopifyBillingConf($rootScope, $localStorage, $scope, AppService, Notify, $uibModalInstance, items, SR_CONSTANTS, loaderFactory) {
    loaderFactory.hide();
    $scope.upgradePlan = upgradePlan;
    $scope.data = {
      activate_charge: items.activate_charge,
      refund: items.refund,
      refund_amount: items.refund_amount,
      prev_charge_id: items.prev_charge_id,
      plan_id: items.plan_id,
      whmcs_product_id: items.whmcs_product_id,
      billing_cycle: items.billing_cycle
    };

    function upgradePlan () {
      var data = {
        whmcs_product_id : items.whmcs_product_id,
        billing_cycle : items.billing_cycle
      };

      $localStorage.USER.self_upgrade_plan_data = data;

      AppService.post('billing/plan/selfupgrade', true, $scope.data)
      .success(function (data){
          $localStorage.USER.new_plan_id = items.plan_id;
          setTimeout(function(){
            $("body").html(data);
            $scope.isPreloader = false;
          }, 200);
      })
      .error(function(error){
          AppService.isAuth(error);
          $scope.isPreloader = false;
          if(error.message == "Company city, state, phone is empty, please fill these details in company page"){
            $state.go('app.companyAddressDetails');
            $uibModalInstance.dismiss('cancel');
          }
      })
    }
  }
})();

(function() {
  'use strict';
  angular
  .module('app.settings')
  .controller('tncPostpaidController', TncPostpaidController);

  TncPostpaidController.$inject = ['$scope', '$rootScope', '$uibModalInstance', 'items', '$sce', '$localStorage', 'SR_CONSTANTS', 'AppService'];

  function TncPostpaidController($scope, $rootScope, $uibModalInstance,  items, $sce, $localStorage, SR_CONSTANTS, AppService){
    activate();
    function activate(){
      $scope.acceptTnc = acceptTnc;
      $scope.rejectTnc = rejectTnc;
      
      function acceptTnc(){
        $scope.isPreloader = true;
        var formData = new FormData();

        // formData.append('',)
        AppService.post('settings/account_type', data, true)
        .then(function(res){
          $scope.isPreloader = false;
        })
      }

      function rejectTnc(){
        $uibModalInstance.dismiss('cancel');
      }
    }
  }
})();

;(function(){
    'use strict';

    angular
    .module('app.orders')
    .controller('updatePickupConfirmationController', updatePickupConfirmationController);

    updatePickupConfirmationController.$inject = ['$scope', 'AppService' , '$state', 'Notify', '$uibModalInstance', 'items', '$localStorage', 'loaderFactory'];
    function updatePickupConfirmationController($scope, AppService ,$state, Notify, $uibModalInstance, items, $localStorage, loaderFactory){
      $scope.data = items;
      $scope.changeBulkPickup = changeBulkPickup;

      function changeBulkPickup () {
        loaderFactory.display("Updating Pickup location. Please Wait!");
        $uibModalInstance.dismiss();
        AppService.patch("orders/address/pickup", true, $scope.data)
        .success(function(data) {
          loaderFactory.hide();
          Notify.alert('Pickup Location for all selected order(s) has been updated to "' + items.pickup_location + ' "', {status: 'success', timeout: 5000 });
          $state.reload();
        })
        .error(function(error) {
          loaderFactory.hide();
          AppService.isAuth(error, 'danger');
        });
      }
    }
})();

/**=========================================================
 * Module: weightDiscrepancyConfirmationController
  =========================================================*/
(function(){
    'use strict';

    angular
        .module('app.orders')
        .controller('weightDiscrepancyConfirmationController', weightDiscrepancyConfirmationController);

    weightDiscrepancyConfirmationController.$inject = [ '$stateParams', '$timeout', '$rootScope', '$scope', '$window', 'AppService' , '$state', 'Notify', '$uibModalInstance', 'items', '$uibModal', 'SR_CONSTANTS', '$localStorage', 'loaderFactory'];

    function weightDiscrepancyConfirmationController( $stateParams,$timeout, $rootScope, $scope, $window, AppService ,$state, Notify, $uibModalInstance, items, $uibModal, SR_CONSTANTS, $localStorage, loaderFactory){
            $scope.data = items.awb;
            $scope.clicks = items.clickCount;
            $scope.weightdisputeImages = '';
            $scope.sampleImages = 'http://'+$window.location.host+'/app/discrepancy_img/sampleimagesforsupportingweightdisputes.zip';
            // $scope.product_category = '';

            $scope.prodCategories = [];

            AppService.get('weightdispute/categories', true)
            .then(function(res){
                $scope.prodCategories = res.data.data
            });

            // $scope.product_subcategory = '';
            $scope.seller_remark = '';
            $scope.product_url = '';
            $scope.subcatinfo = false;
            $scope.selectCategoryOpt = {
                valueField: 'category',
                labelField: 'category',
                searchField: ['category'],
                placeholder: 'Pick a Category',
                selectOnTab: true,
                onChange: function(value){
                    $scope.prodSubCategories = []
                    $scope.subcatinfo = false;
                    $scope.prodSubCategories = $scope.prodCategories.filter(function(obj){
                        return obj.category == value;
                    })[0].subcategories.map(function(elem, index) {
                        return {
                            "text" : elem,
                            "value": elem
                        };
                    });

                    if($scope.prodSubCategories.length !== 0){
                      $scope.subcatinfo = true;
                    }

                    $scope.$digest();

                    // $scope.subcatinfo = true;
                },
                // onDropdownOpen: function(x){
                //   console.log(x)
                //   $scope.subcatinfo = false;
                // },
                // onDropdownClose: function(x){
                //   console.log(x)
                //   $scope.subcatinfo = true;
                // },
                maxItems: 1
            }

            $scope.selectSubCategoryOpt = {
                maxItems: 1,
                selectOnTab: true,
                placeholder: 'Select a sub-category'
            }

            $scope.accept = function(){
                if($scope.clicks === 1){
                    var data = {"awb_code": $scope.data}
                    loaderFactory.display("Please Wait!");
                    AppService.post('weightdispute/accept', true, data)
                    .success(function(data){
                        loaderFactory.hide();
                        $uibModalInstance.dismiss('cancel');
                        AppService.isAuth(data);
                        $state.reload();
                        $rootScope.isDisable = false;
                        $rootScope.clickCount = 0;
                    })
                    .error(function(error){
                        loaderFactory.hide();
                        $uibModalInstance.dismiss('cancel');
                        AppService.isAuth(error);
                        $rootScope.isDisable = false;
                        $rootScope.clickCount = 0;
                    })
                }
            }

            $scope.getFileDetails = function (e) {
                $scope.files = [];
                $scope.filesData = [];
                // STORE THE FILE OBJECT IN AN ARRAY.
                for (var i = 0; i < e.files.length; i++) {
                    if(i === 5)
                    {
                       break
                    }
                    var files = e.files[i];
                    function readAndPreview(file)
                    {
                        if ( /\.(jpe?g|png|gif)$/i.test(files.name) ) {
                          var reader = new FileReader();
                          reader.addEventListener("load", function () {
                            var obj = {};
                            obj.name = file.name;
                            obj.size = file.size;
                            obj.type = file.type;
                            obj.base64 = this.result;
                            $scope.$apply(function () {
                                $scope.files.push(obj);
                            });
                          }, false);
                          reader.readAsDataURL(file);

                        }
                    }
                    if (files) {
                        readAndPreview(files);
                    }
                    $scope.filesData.push(e.files[i]);
                }
            };

            $scope.removeUploadImg = function(indexfile)
            {
                $scope.files.forEach(function(item, index){
                    if(index === indexfile)
                    {
                       $scope.files.splice(index, 1);
                       $scope.filesData.splice(index, 1);
                       $(".UploadWeightDiscrepacyImg").val('');
                    }
                });
            }

            $scope.removeUploadImg = function(indexfile)
            {
                $scope.files.forEach(function(item, index){

                    if(index === indexfile)
                    {
                       $scope.files.splice(index, 1);
                       $(".UploadWeightDiscrepacyImg").val('');
                    }
                });
            }

            $scope.reject =function()
            {
                loaderFactory.display("Please Wait!");
                $('.error').remove();
                var filesData = $('.UploadWeightDiscrepacyImg')[0].files;
                var formData = new FormData();
                for (var i in $scope.filesData) {
                    formData.append("weight_dispute_images"+i, $scope.filesData[i]);
                }
                // console.log(items)
                formData.append('awb_code', $scope.data);
                formData.append('product_category', $scope.product_category);
                formData.append('product_subcategory', $scope.product_subcategory);
                formData.append('seller_remark', $scope.seller_remark);
                formData.append('product_url', $scope.product_url);

                AppService.postFormData('weightdispute/reject', formData, true)
                .success(function(data){
                    $uibModalInstance.dismiss('cancel');
                    loaderFactory.hide();
                    Notify.alert(data.message, { status: 'success' });
                    $state.go($state.current, {}, { reload: true });
                    $rootScope.isDisable = false;
                })
                .error(function(error){
                    $uibModalInstance.dismiss('cancel');
                    loaderFactory.hide();
                    AppService.isAuth(error);
                    $rootScope.isDisable = false;
                })
            }

            $scope.cancel = function()
            {
                $rootScope.isDisable = false;
                $rootScope.clickCount = 0;
                $uibModalInstance.dismiss('cancel');
            }

            $scope.deduct = function()
            {
               $state.go('app.user_chargedetail', {}, { reload: true });
               $uibModalInstance.dismiss('cancel');
            }
    }
})();

(function()
{
    'use strict';
    angular
    .module('app.report')
    .controller('autoBillingController', AutoBillingController);

    AutoBillingController.$inject = ['$scope', 'AppService', 'Notify', '$localStorage', '$uibModal'];

    function AutoBillingController($scope, AppService, Notify, $localStorage, $uibModal){
        activate();
        function activate(){

          // variables
          $scope.billingLink;

          // functions
          $scope.startInvoicing = startInvoicing;
          $scope.startBilling = startBilling;
          $scope.cancelBilling = cancelBilling;
          $scope.openCancelPopup = openCancelPopup;

          getBillingInfo();

          function startInvoicing(){
            AppService.post('admin/billing/start_invoicing', true)
            .then(function(res){
              Notify.alert(res.data.message);
            })
          }

          function startBilling(paymentType, companyList){
            if(companyList != 0){
              var companyId = companyList.split(',').map(function(i){
                return i - 0;
              }).filter(function(i){
                return i !== 0;
              });
            } else {
              var companyId = 0
            }

            var data = {}

            data.payment_type = paymentType;
            if(companyId != 0){
              data.company_id = companyId
            }

            AppService.post('admin/billing/start_billing', true,data)
            .then(function(res){
              Notify.alert(res.data.message);
            })
          }

          function cancelBilling(){
            AppService.patch('admin/billing/cancel_billing', true)
            .then(function(res){
              Notify.alert(res.data.message);
              $scope.billingStatus = 8;
            })
          }

          function getBillingInfo(){
            AppService.get('admin/billing/billing_info', true)
            .then(function(res){
              $scope.awbLink = res.data.awb_url;
              $scope.companyLink = res.data.company_url;
              $scope.billingStatus = res.data.billing_status;
              $scope.billingStatusName = res.data.billing_status_name;
              // Notify.alert(res.message);
            })
          }

          function openCancelPopup(){
            var modalInstance = $uibModal.open({
              animation: true,
              templateUrl: 'cancelBillingPopup.html',
              size: 'md',
              scope: $scope
            });
          }

        }
    }
})();

(function () {
    'use strict';
    angular.module('app.report').controller('awsStatusController', awsStatusController);
    awsStatusController.$inject = ['$rootScope', '$scope', 'AppService', '$state', '$stateParams', 'Notify', '$timeout'];
    function awsStatusController($rootScope, $scope, AppService, $state, $stateParams, Notify, $timeout) {
        $scope.showView = false;
        $scope.show404 = false;
        if($state.current.name == 'auth.aws_status' && $stateParams.type !== ''){
          var dummydata = {awb_code: "0"}
          var dUrl = 'report/' + $stateParams.type;
          AppService.post( dUrl , '', dummydata)
          .success(function(data){
              activate();
          })
          .error(function(error){
            // Notify.alert("Select a valid courier company");
            $scope.show404 = true;
            $scope.showView = false;
          });
        } else if($stateParams.type == '') {
          $scope.show404 = true;
          $scope.showView = false;
        } else {
          activate();
        }

        function activate()
        {
            $scope.showView = true;
            $scope.show404 = false;
            $scope.hasSelectOption = false;
            var url = '';
            $scope.courierOption =
            [
                {
                    name: 'Please select courier company',
                    id: ''
                },
                {
                    name: 'delhivery',
                    id: 1
                },
                {
                    name: 'bluedart',
                    id: 2
                },
                {
                    name: 'ecomexpress',
                    id: 3
                },
            ]
            $scope.defaultOption = $scope.courierOption[0];

            if( typeof $stateParams.type === 'undefined')
            {
                $scope.hasSelectOption = true;
            }

            url = 'report/' + $stateParams.type;
            $scope.setUrl = function()
            {
                if( $scope.defaultOption.id == '1' )
                {
                    url = 'report/delhivery';
                }
                else if( $scope.defaultOption.id == '2' )
                {
                    url = 'report/bluedart';
                }
                else if( $scope.defaultOption.id == '3' )
                {
                    url = 'report/ecomexpress';
                }
            }

            $scope.downloadShipment = function(){
                $scope.isPreloader = true;
                if(!url || url === 'report/undefined')
                {
                    Notify.alert("Please select courier company");
                    return false;
                }
                if(!$scope.awbNumber)
                {
                    Notify.alert("Please Input AWB Number");
                    return false;
                }
                var awbArry = $scope.awbNumber.split(',');
                var awb_data =
                {
                    awb_code: awbArry
                }

                AppService.post( url , true, awb_data)
                .success(function (data)
                {
                    $scope.isPreloader = false;
                    if (data.data_export_status==0){
                        Notify.alert(data.msg);
                    }else {
                        afterDownload(data, 'shipment.csv');
                    }
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }
            function afterDownload(data, fileName)
            {
                if(data.download_url){
                    AppService.downloadDataWithUrl(data.download_url, fileName)
                }else {
                    var blob = new Blob([data], {type: 'text/csv'});
                    var link = document.createElement("a");
                    if (link.download !== undefined) { // feature detection
                        // Browsers that support HTML5 download attribute
                        var url = URL.createObjectURL(blob);
                        link.setAttribute("href", url);
                        link.setAttribute("download", fileName);
                        link.style.visibility = 'hidden';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    }
                }
            }


        }
    }
})();

(function () {
	'use strict';
	angular
		.module('app.report')
		.controller('bankVerificationController', bankVerificationController);

	bankVerificationController.$inject = ['$rootScope', '$state', '$scope', 'AppService', '$location', '$window', '$uibModal', '$localStorage', '$stateParams', '$compile'];

	function bankVerificationController($rootScope, $state, $scope, AppService, $location, $window, $uibModal, $localStorage, $stateParams, $compile) {
		activate();

		function activate() {
			$scope.remarkEdit = false;
			$scope.kycData = {};
			$scope.stats = {};
			$scope.client_name = $stateParams.client_name ? $stateParams.client_name : '';
			$scope.client_id = $stateParams.client_id ? $stateParams.client_id : '';
			$scope.client_email = $stateParams.client_email ? $stateParams.client_email : '';
			$scope.client_phone = $stateParams.client_phone ? $stateParams.client_phone : '';
			$scope.status = $stateParams.status ? $stateParams.status : '';
			$scope.beneficiary_name = $stateParams.beneficiary_name ? $stateParams.beneficiary_name : '';
			$scope.remarks = '';

			$scope.maxSize = 2;
			$scope.totalItems = 10000000;
			$scope.page = $stateParams.page ? $stateParams.page : '15';

			$scope.itemsPerPage = [
				{value: '15',id: 0},
				{value: '30',id: 1},
				{value: '60',id: 2},
				{value: '100',id: 3},
			];

			if ($stateParams.perPage == 30) {
				$scope.selectedItems = 1;
			} else if ($stateParams.perPage == 60) {
				$scope.selectedItems = 2;
			} else if ($stateParams.perPage == 100) {
				$scope.selectedItems = 3;
			} else {
				$scope.selectedItems = 0;
			}

			if( $stateParams.client_id ) {
				$scope.client_id = $stateParams.client_id ? $stateParams.client_id : '';
			}

			$scope.paginatedData = function () {
				$("th").remove();
				updateState();
			}

			function getAllData(data) {
				$scope.isPreloader = true;
				AppService.get('admin/verifications/bank?client_name=' + $scope.client_name +
						'&client_id=' + $scope.client_id +
						'&status=' + $scope.status +
						'&client_email=' + $scope.client_email +
						'&beneficiary_name=' + $scope.beneficiary_name +
						'&client_phone=' + $scope.client_phone, true, data)
					.success(function (data) {
						$scope.isPreloader = false;
						$scope.kycData = data.data
						$scope.metaData = data.meta.pagination
						$scope.totalItems = $scope.metaData.total;
						$scope.showingKycNo = {
							from: $scope.totalItems == 0 ? 0 : ($stateParams.page - 1) * $stateParams.perPage + 1,
							to: Math.min($scope.totalItems, $stateParams.page * $stateParams.perPage)
						}

					})
					.error(function (error) {
						$scope.isPreloader = false;
						AppService.isAuth(error);
					})
			}

			function getStats(data) {
				$scope.isPreloader = true;
				AppService.get('admin/verifications/bank/stats', true, data)
					.success(function (data) {
						$scope.isPreloader = false;
						$scope.stats = data.data
					})
					.error(function (error) {
						$scope.isPreloader = false;
						AppService.isAuth(error);
					})
			}

			$scope.searchBy = searchBy;
			$scope.updateState = updateState;

			function searchBy ($event) {
				if($event){
					if($event.keyCode == 13){
						updateState()
					}
				} else {
					updateState()
				}
			}

			$scope.filterByStatus = function () {
				getAllData();
			};

			$scope.updateKYCAction = function (company_id, status) {
				$scope.company_id = company_id;
				var items = {
					'company_id': company_id,
					'status': status
				}

				var modalInstance = $uibModal.open({
					animation: true,
					templateUrl: 'app/views/reportv1/bankVerification_action.html',
					controller: 'bankVerificationActionController',
					size: 'sm-400',
					resolve: {
						items: function () {
							return items;
						}
					}
				})
			};

			$scope.changePerPage = function () {
				$("th").remove();
				setTimeout(function () {
					updateState();
				}, 2);
			};

			$scope.updateRemarks = function (company_id, remarks) {

				let data = {
					'remarks': remarks
				}

				AppService.put('admin/verifications/bank/' + company_id + '/remarks', true, data)
					.success(function (data) {
						$scope.isPreloader = false;
						$state.reload();
					})
					.error(function (error) {
						$scope.isPreloader = false;
						AppService.isAuth(error);
					})
			}

			function updateState(shipment_type) {
				$state.go('.', {
					page: $scope.page,
					perPage: $scope.itemsPerPage[$scope.selectedItems].value,
					client_id: $scope.client_id,
					status: $scope.status,
					client_email: $scope.client_email,
					beneficiary_name: $scope.beneficiary_name,
					client_phone: $scope.client_phone
				});
			}

			$scope.reopenBankVerification = function (kyc_id) {
        var data = {
					'status': 4,
				};
        AppService.put('admin/verifications/bank/' + kyc_id, true, data)
				.success(function (data) {
					$scope.isPreloader = false;
					$state.reload();
				})
				.error(function (error) {
					$scope.isPreloader = false;
					AppService.isAuth(error);
				})
      }

			getStats();
			getAllData();
		}
	}
})();

/**=========================================================
 * Module: Bank Verification Action Controller
  =========================================================*/
  (function () {
	'use strict';
	angular
		.module('app.orders')
		.controller('bankVerificationActionController', bankVerificationActionController);
	bankVerificationActionController.$inject = ['$scope', 'AppService', '$state', 'Notify', '$uibModalInstance', 'items'];
	function bankVerificationActionController($scope, AppService, $state, Notify, $uibModalInstance, items) {
		activate();

		function activate() {
			$scope.items = items;
			$scope.reason = '';

			$scope.updateStatus = updateStatus

      function updateStatus(reason) {
				var data = {
					'status': $scope.items.status,
					'reason' : reason
				};
				$scope.isPreloader = true;
				AppService.put('admin/verifications/bank/' + $scope.items.company_id, true, data)
					.success(function (data) {
						$scope.isPreloader = false;
            $uibModalInstance.dismiss('cancel');
            $state.reload();
					})
					.error(function (error) {
						$scope.isPreloader = false;
						AppService.isAuth(error);
					})
			}
		}
	}
})();

(function () {
    'use strict';
    angular.module('app.report').controller('billingReportController', billingReportController);
    billingReportController.$inject = ['$rootScope', '$state', '$scope', 'AppService', '$window', '$uibModal', '$localStorage', '$stateParams', '$compile'];

    function billingReportController($rootScope, $state, $scope, AppService, $window, $uibModal, $localStorage, $stateParams, $compile) {
        activate();
        ////////////////
        function activate()
        {   
            window.Intercom('update');
            var date = new Date();
            $scope.currentDate = date;
            var DateFilter =
            {
                'from': '',
                'to': ''
            }
            var filter =
            {
                company_name: '',
                courier_name: '',
                awb_number: '',
                whmcs_client_id: ''
            }
            $scope.isShowFilter = false;
            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }

            // getBillingReportDetail();
            $scope.paginatedData = function()
            {
                getBillingReportDetail();
                //$state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.sortType = 'base_channel_code';
            $scope.sortReverse  = false;

            $scope.changePerPage = function()
            {
                getBillingReportDetail();
                //$state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getBillingReportDetail();
            }

            $scope.hideFilter = function()
            {
                $scope.isShowFilter =  false;
                $('.report-filter').html('Filters');
            }


            $scope.getReportFilter = function()
            {
                $scope.isPreloader = true;
                $scope.isShowFilter =  !$scope.isShowFilter;
                if($('.report-filter').html() == 'Apply Filters')
                {
                    filter.company_name = $('.company_name').val();
                    filter.courier_name = $('.courier_name').val();
                    filter.awb_number = $('.awb_number').val();
                    filter.whmcs_client_id = $('.whmcs_client_id').val();
                    $('.report-filter').html('Filters');
                    getBillingReportDetail();
                }
                else
                {
                    $('.report-filter').html('Apply Filters');
                    if( $('.filters-appened').children().length < 2 )
                    {
                        AppService.get('internal/report/billing/filters', true)
                        .success(function (data)
                        {
                            var tableFilter = AppService.dynamicFilters(data);
                            $(tableFilter).appendTo('.filters-appened');
                            $compile(tableFilter)($scope);
                            $scope.isPreloader = false;
                        })
                        .error(function(error)
                        {
                            $scope.isPreloader = false;
                            AppService.isAuth(error);
                        })
                    }
                    else
                    {
                        $scope.isPreloader = false;
                    }
                }
            }

            $scope.customeColumns = function()
            {
                var items =
                {
                    url : 'internal/report/billing/fields'
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/reportv1/reportColumns.html',
                    controller: 'setColumnsController',
                    size: 'lg',
                    resolve: {
                        items: function ()
                        {
                         return items;
                        }
                    }
                });
            }

            // $scope.scheduledReports = function()
            // {
            //     var modalInstance = $uibModal.open({
            //         animation: true,
            //         templateUrl: 'app/views/reportv1/scheduledReports.html',
            //         size: '',
            //     });
            // }

            function getBillingReportDetail()
            {
                $scope.isPreloader = true;
                $('.table-append').html('');
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('internal/report/billing?company_name='+ filter.company_name +"&courier_name="+ filter.courier_name+ '&awb_number='+ filter.awb_number +'&whmcs_client_id=' + filter.whmcs_client_id +'&from='+ DateFilter.from + "&to="+ DateFilter.to + '&page='+ $scope.page +'&per_page='+ perPage , true)
                .success(function (data)
                {
                    var tableHtml = AppService.dynamicTable(data.data);
                    $(tableHtml).appendTo('.table-append');
                    $scope.metaData = data.meta.pagination;
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    $scope.isPreloader = false;
                    AppService.setHeight();
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }


            //new date picker JS
            var start = moment().subtract(1, 'month');
            var end = moment();
            var user = $localStorage.USER;

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);
            function cb(start, end)
            {
                DateFilter.from = start.format('YYYY-MMM-DD').toString();
                DateFilter.to = end.format('YYYY-MMM-DD').toString();
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));

            }
            getBillingReportDetail();
        }
    }
})();

(function () {
    'use strict';
    angular.module('app.report').controller('codPannelController', codPannelController);
    codPannelController.$inject = ['$rootScope', '$scope', 'AppService', '$state', '$stateParams', 'Notify'];
    function codPannelController($rootScope, $scope, AppService, $state, $stateParams, Notify) {
        activate();
        ////////////////
        function activate() {
            $scope.fileArry = [];
            $scope.uploadCodFile = function() {
                $scope.isPreloader = true;
                var file = $('#fileUpload')[0].files[0];

                if(file == undefined) {
                    $scope.isPreloader = false;
                    Notify.alert("Please select your COD file first.",  {status: 'danger'});
                    return false;
                }

                var formData = new FormData();
                formData.append("file", file);
                AppService.importFile(formData, 'cod/process')
                .success(function (data) {
                    var fileObj = {
                        name: file.name,
                        file_id: data.file_id
                    };
                    if(data.hasOwnProperty('error_file_id')){
                        fileObj.hasErrorFile = true;
                        fileObj.error_file_id = data.error_file_id;
                    }
                    $scope.fileArry.push(fileObj);
                    Notify.alert(data.message);
                    $scope.isPreloader = false;
                })
                .error(function(error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            };

            $scope.cancel = function() {

                $('#fileUpload')[0].files[0] = '';
                $('.selected-file').val(' ');
            };

            $scope.sendEmail = function(file_id) {
                $scope.isPreloader = true;
                var  data = {
                    file_id: file_id
                };
                AppService.get('cod/send/mail?file_id=' + file_id, true, data)
                .success(function (data) {
                    Notify.alert(data.message);
                    $scope.isPreloader = false;
                })
                .error(function(error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }
        }
    }
})();

(function () {
    'use strict';
    angular.module('app.report').controller('codReconcileController', codReconcileController);
    codReconcileController.$inject = ['$rootScope', '$scope' , '$state', '$stateParams', 'AppService', '$window', '$uibModal', '$localStorage', '$compile'];
    function codReconcileController($rootScope, $scope, $state, $stateParams, AppService, $window, $uibModal, $localStorage, $compile) {
        activate();
        function activate()
        {
            window.Intercom('update');
            var date = new Date();
            $scope.currentDate = date;
            var DateFilter =
            {
                'from': '',
                'to': ''
            }

            var filter =
            {
                company_name: '',
                courier_name: '',
                awb_number: '',
                whmcs_client_id: '',
                cod_reconcile_status: ''
            }
            $scope.filter = filter;
            $scope.DateFilter = DateFilter;
            $scope.isShowFilter = false;
            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }

            // getCODReportDetail();
            $scope.paginatedData = function()
            {
                getCODReportDetail();
                //$state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.sortType = 'base_channel_code';
            $scope.sortReverse  = false;

            $scope.changePerPage = function()
            {
                getCODReportDetail();
                //$state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getCODReportDetail();
            }

            $scope.hideFilter = function()
            {
                $scope.isShowFilter =  false;
                $('.report-filter').html('Filters');
            }

            $scope.getReportFilter = function()
            {
                $scope.isPreloader = true;
                $scope.isShowFilter =  !$scope.isShowFilter;
                if($('.report-filter').html() == 'Apply Filters')
                {
                    filter.company_name = $('.company_name').val();
                    filter.courier_name = $('.courier_name').val();
                    filter.awb_number = $('.awb_number').val();
                    filter.whmcs_client_id = $('.whmcs_client_id').val();
                    filter.cod_reconcile_status = $('.cod_reconcile_status').val();
                    $('.report-filter').html('Filters');
                    getCODReportDetail();
                }
                else
                {
                    $('.report-filter').html('Apply Filters');
                    if( $('.filters-appened').children().length < 2 )
                    {
                        AppService.get('internal/report/cod/filters', true)
                        .success(function (data)
                        {
                            var tableFilter = AppService.dynamicFilters(data);
                            $(tableFilter).appendTo('.filters-appened');
                            $compile(tableFilter)($scope);
                            $scope.isPreloader = false;
                        })
                        .error(function(error)
                        {
                            $scope.isPreloader = false;
                            AppService.isAuth(error);
                        })
                    }
                    else
                    {
                        $scope.isPreloader = false;
                    }
                }
            }


            $scope.customeColumns = function()
            {
                var items =
                {
                    url : 'internal/report/cod/fields'
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/reportv1/reportColumns.html',
                    controller: 'setColumnsController',
                    size: 'lg',
                    resolve: {
                        items: function ()
                        {
                         return items;
                        }
                    }
                });
            }

            function getCODReportDetail()
            {
                $scope.isPreloader = true;
                $('.table-append').html('');
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('internal/report/cod?company_name='+ filter.company_name +"&courier_name="+ filter.courier_name+ '&cod_reconcile_status=' + filter.cod_reconcile_status + '&awb_number='+ filter.awb_number +'&whmcs_client_id=' + filter.whmcs_client_id +'&from='+ DateFilter.from + "&to="+ DateFilter.to + '&page='+ $scope.page +'&per_page='+ perPage , true)
                .success(function (data)
                {
                    var tableHtml = AppService.dynamicTable(data.data);
                    $(tableHtml).appendTo('.table-append');
                    $scope.metaData = data.meta.pagination;
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    $scope.isPreloader = false;
                    AppService.setHeight();
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }


            //new date picker JS
            var start = moment().subtract(1, 'month');
            var end = moment();
            var user = $localStorage.USER;

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);
            function cb(start, end)
            {

                DateFilter.from = start.format('YYYY-MMM-DD').toString();
                DateFilter.to = end.format('YYYY-MMM-DD').toString();
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
            }
            getCODReportDetail();
        }
    }
})();

(function() {
    'use strict';
    angular.module('app.report').controller('codRemittanceController', codRemittanceController);
    codRemittanceController.$inject = ['$rootScope', '$state', '$scope', 'AppService', 'Notify', 'SR_CONSTANTS', '$localStorage', 'loaderFactory'];
        function codRemittanceController ($rootScope, $state, $scope, AppService, Notify, SR_CONSTANTS, $localStorage, loaderFactory)
        {

            $scope.filesData = '';
            $scope.UploadCodRemittance = function()
            {
                var formData = new FormData();
                loaderFactory.display("Please Wait!");
                var filesData = {}; 
                if($('.Upload_cod_remittance')[0].files.length !== 0)
                {
                    filesData = $('.Upload_cod_remittance')[0].files
                }
                else
                {
                    filesData[0] = ''
                }

                formData.append("file", filesData[0]);
                AppService.postFormData('admin/cod_remittance', formData, true)
                .success(function(data){
                    loaderFactory.hide();
                    AppService.isAuth(data);
                    $('.Upload_cod_remittance').val('');
                })
                .error(function(error){
                    loaderFactory.hide(); 
                    AppService.isAuth(error);  
                })
            }   
        }
})();
(function () {
    'use strict';
    angular.module('app.report').controller('companyMasterController', companyMasterController);
    companyMasterController.$inject = ['$rootScope', '$state', '$scope', 'AppService', '$location', '$window', '$uibModal', '$localStorage', '$stateParams', '$compile'];

    function companyMasterController($rootScope, $state, $scope, AppService, $location, $window, $uibModal, $localStorage, $stateParams, $compile) {
        activate();
        ////////////////
        function activate() {

            var search = angular.copy($location.search());
            window.Intercom('update');
            var date = new Date();
            $scope.currentDate = date;
            var DateFilter = {
                'from':  search.from ? search.from: '',
                'to':  search.to ? search.to: ''
            };
            var filter = {
                company_name: search.company_name ? search.company_name: '',
                courier_name: search.courier_name ? search.courier_name: '',
                awb_number:  search.awb_number ? search.awb_number: '',
                whmcs_client_id:  search.whmcs_client_id ? search.whmcs_client_id: '',
                plan_name:  search.plan_name ? search.plan_name: ''
            };
            $scope.isShowFilter = false;
            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            $scope.selectedItems = search.perPage ? _.findIndex($scope.itemsPerPage, function(o) {return o.value == search.perPage.toString(); }): 0;
            $scope.page =  search.page ? search.page: 1;


            function filter_search(){
                $location.search({
                    page: $scope.page,
                    perPage: $scope.itemsPerPage[$scope.selectedItems].value,
                    company_name: filter.company_name,
                    courier_name: filter.courier_name,
                    awb_number: filter.awb_number,
                    whmcs_client_id: filter.whmcs_client_id,
                    from: DateFilter.from,
                    to: DateFilter.to,
                    plan_name: filter.plan_name
                });
                getCompanyReportDetail();

            }
            $scope.paginatedData = function() {
                filter_search();
            };

            $scope.sortType = 'base_channel_code';
            $scope.sortReverse  = false;

            $scope.changePerPage = function() {
                filter_search();
            };

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getCompanyReportDetail();
            }

            $scope.hideFilter = function()
            {
                $scope.isShowFilter =  false;
                $('.report-filter').html('Filters');
            }


            $scope.getReportFilter = function()
            {   
                $scope.isPreloader = true;
                $scope.isShowFilter =  !$scope.isShowFilter;
                if($('.report-filter').html() == 'Apply Filters')
                {  
                    filter.company_name = $('.company_name').val();
                    filter.courier_name = $('.courier_name').val();
                    filter.plan_name = $('.plan_name').val();
                    filter.awb_number = $('.awb_number').val();
                    filter.whmcs_client_id = $('.whmcs_client_id').val();
                    $('.report-filter').html('Filters');
                    $scope.page = 1;
                    filter_search();
                }
                else
                {   
                    $('.report-filter').html('Apply Filters');
                    if( $('.filters-appened').children().length < 2 )
                    {
                        AppService.get('internal/report/companies/filters', true)
                        .success(function (data)
                        {   
                            var tableFilter = AppService.dynamicFilters(data);
                            $(tableFilter).appendTo('.filters-appened');
                            $compile(tableFilter)($scope);
                            $scope.isPreloader = false;
                        })
                        .error(function(error)
                        {   
                            $scope.isPreloader = false;
                            AppService.isAuth(error);
                        })
                    }
                    else
                    {
                        $scope.isPreloader = false;
                    }
                }
            }

            // $scope.getCompanyReport = function()
            // {
            //     getCompanyReportDetail();
            // }

            $scope.customeColumns = function()
            {   
                var items = 
                {
                    url : 'internal/report/companies/fields'
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/reportv1/reportColumns.html',
                    controller: 'setColumnsController',
                    size: 'lg',
                    resolve: {
                        items: function ()
                        {
                         return items;
                        }
                    }
                });
            }


            // $scope.scheduledReports = function()
            // {
            //     var modalInstance = $uibModal.open({
            //         animation: true,
            //         templateUrl: 'app/views/reportv1/scheduledReports.html',
            //         size: '',
            //     });
            // }

            function getCompanyReportDetail()
            {   
                $scope.isPreloader = true;
                $('.table-append').html('');
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('internal/report/companies?company_name='+ filter.company_name +"&courier_name="+ filter.courier_name+ '&awb_number='+ filter.awb_number +'&whmcs_client_id=' + filter.whmcs_client_id +'&from='+ DateFilter.from + "&to="+ DateFilter.to + '&page='+ $scope.page +'&per_page='+ perPage + "&plan_name=" + filter.plan_name , true)
                .success(function (data)
                {   
                    var tableHtml = AppService.dynamicTable(data.data);
                    $(tableHtml).appendTo('.table-append');
                    $scope.metaData = data.meta.pagination;
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    $scope.isPreloader = false;
                    AppService.setHeight();
                })
                .error(function(error)
                {   
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }
            //new date picker JS
            var start = moment().subtract(1, 'month');
            var end = moment();
            var user = $localStorage.USER;
            
            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);
            function cb(start, end) 
            {   
               
                DateFilter.from = start.format('YYYY-MMM-DD').toString();
                DateFilter.to = end.format('YYYY-MMM-DD').toString();
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));

            }
            getCompanyReportDetail();
        }
    }
})(); 
(function () {
  'use strict';
  angular
  .module('app.report')
  .controller('delhiveryReportController', DelhiveryReportController);

  DelhiveryReportController.$inject = ['$state', '$scope', 'AppService', '$uibModal', '$localStorage', '$stateParams', '$compile'];

  function DelhiveryReportController($state, $scope, AppService, $uibModal, $localStorage, $stateParams, $compile) {
    activate();
    var vm = this;
    function activate(){
      var date = new Date();
      $scope.currentDate = date;
      var DateFilter =
      {
        'from': '',
        'to': ''
      }

      var filter =
      {
        plan: ''
      }
      $scope.filter = filter;
      $scope.searchText = '';
      $scope.DateFilter = DateFilter;
      $scope.isShowFilter = false;
      $scope.maxSize = 2;
      $scope.totalItems = 10000000;
      $scope.page = $stateParams.page;

      $scope.itemsPerPage =
      [{value:'15', id:0},
      {value:'30', id:1},
      {value:'60', id:2},
      {value:'100', id:3}
    ];

    if($stateParams.perPage == 30)
    {
      $scope.selectedItems = 1;
    }else if($stateParams.perPage == 60)
    {
      $scope.selectedItems = 2;
    }else if($stateParams.perPage == 100)
    {
      $scope.selectedItems = 3;
    }else
    {
      $scope.selectedItems = 0;
    }

    // delhiveryWarehouseReport();
    $scope.paginatedData = function()
    {
      //$state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
      delhiveryWarehouseReport();
    }

    $scope.sortType = 'base_channel_code';
    $scope.sortReverse  = false;

    $scope.changePerPage = function()
    {
      delhiveryWarehouseReport();
      //$state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
    }

    $scope.sortTable = function(type)
    {
      $scope.sortType = type;
      $scope.sortReverse = !$scope.sortReverse;
      delhiveryWarehouseReport();
    }

    $scope.hideFilter = function()
    {
      $scope.isShowFilter =  false;
      $('.report-filter').html('Filters');
    }

    $scope.getReportFilter = function()
    {
      $scope.isPreloader = true;
      $scope.isShowFilter =  !$scope.isShowFilter;
      if($('.report-filter').html() == 'Apply Filters')
      {
        filter.plan = $('.plan').val();
        $('.report-filter').html('Filters');
        delhiveryWarehouseReport();
      }
      else
      {
        $('.report-filter').html('Apply Filters');
        if( $('.filters-appened').children().length < 2 )
        {
          AppService.get('internal/report/delhivery_warehouse/filters', true)
          .success(function (data)
          {
            var tableFilter = AppService.dynamicFilters(data);
            $(tableFilter).appendTo('.filters-appened');
            $compile(tableFilter)($scope);
            $scope.isPreloader = false;
          })
          .error(function(error)
          {
            $scope.isPreloader = false;
            AppService.isAuth(error);
          })
        }
        else
        {

          $scope.isPreloader = false;
        }
      }
    }

    $scope.customeColumns = function()
    {
      var items =
      {
        url : 'internal/report/delhivery_warehouse/fields'
      };
      var modalInstance = $uibModal.open({
        animation: true,
        templateUrl: 'app/views/reportv1/reportColumns.html',
        controller: 'setColumnsController',
        size: 'lg',
        resolve: {
          items: function ()
          {
            return items;
          }
        }
      });
    }

    function delhiveryWarehouseReport()
    {
      $scope.isPreloader = true;
      $('.table-append').html('');
      var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
      var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
      AppService.get('internal/report/delhivery_warehouse?from='+ DateFilter.from + "&to="+ DateFilter.to + '&page='+ $scope.page +'&per_page='+ perPage + '&plan=' + filter.plan, true)
      .success(function (data)
      {
        var tableHtml = AppService.dynamicTable(data.data);
        $(tableHtml).appendTo('.table-append');
        $scope.metaData = data.meta.pagination;
        $scope.totalItems = $scope.metaData.total;
        $scope.showingOrderNo =
        {
          from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
          to: Math.min($scope.totalItems, $scope.page*perPage)
        }
        $scope.isPreloader = false;
        AppService.setHeight();
      })
      .error(function(error)
      {
        $scope.isPreloader = false;
        AppService.isAuth(error);
      })
    }


    //new date picker JS
    var start = moment().subtract(1, 'month');
    var end = moment();
    var user = $localStorage.USER;

    $('#reportrange').daterangepicker({
      startDate: start,
      endDate: end,
      dateLimit: {"month": 1},
      ranges: {
        'All': [moment(user.created_at.date), moment()],
        'Today': [moment(), moment()],
        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
        'This Month': [moment().startOf('month'), moment().endOf('month')],
        'Last week': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
      }
    }, cb);
    cb(start, end);
    function cb(start, end)
    {
      DateFilter.from = start.format('YYYY-MMM-DD').toString();
      DateFilter.to = end.format('YYYY-MMM-DD').toString();
      $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
    }
    delhiveryWarehouseReport();
  }
}
})();

(function () {
	'use strict';
	angular
	.module('app.report')
	.controller('kycAdminController', kycAdminController);

	kycAdminController.$inject = ['$state', '$scope', 'AppService', '$uibModal', '$stateParams', 'loaderFactory'];
	function kycAdminController($state, $scope, AppService, $uibModal, $stateParams, loaderFactory) {
		activate();

		function activate() {
			$scope.remarkEdit = false;
			$scope.kycData = {};
			$scope.stats = {};
			$scope.client_name = $stateParams.client_name ? $stateParams.client_name : '';
			$scope.client_id = $stateParams.client_id ? $stateParams.client_id : '';
			$scope.client_email = $stateParams.client_email ? $stateParams.client_email : '';
			$scope.client_phone = $stateParams.client_phone ? $stateParams.client_phone : '';
			$scope.status = $stateParams.status ? $stateParams.status : '';
			$scope.remarks = '';
			$scope.maxSize = 2;
			$scope.totalItems = 10000000;
			$scope.page = $stateParams.page ? $stateParams.page : '15';

			$scope.itemsPerPage = [
				{value: '15',id: 0},
				{value: '30',id: 1},
				{value: '60',id: 2},
				{value: '100',id: 3},
			];

			if ($stateParams.perPage == 30) {
				$scope.selectedItems = 1;
			} else if ($stateParams.perPage == 60) {
				$scope.selectedItems = 2;
			} else if ($stateParams.perPage == 100) {
				$scope.selectedItems = 3;
			} else {
				$scope.selectedItems = 0;
			}

			if( $stateParams.client_id ) {
				$scope.client_id = $stateParams.client_id;
			}

			$scope.paginatedData = function () {
				$("th").remove();
        setTimeout(function() {
          updateState();
        }, 2);
			}

			function getAllData(data) {
				$scope.isPreloader = true;
				AppService.get('admin/kyc?client_name=' + $scope.client_name +
						'&client_id=' + $scope.client_id +
						'&status=' + $scope.status +
						'&client_email=' + $scope.client_email +
						'&client_phone=' + $scope.client_phone, true, data)
					.success(function (data) {
						$scope.isPreloader = false;
						$scope.kycData = data.data
						$scope.metaData = data.meta.pagination
						$scope.totalItems = $scope.metaData.total;
						$scope.showingKycNo = {
							from: $scope.totalItems == 0 ? 0 : ($stateParams.page - 1) * $stateParams.perPage + 1,
							to: Math.min($scope.totalItems, $stateParams.page * $stateParams.perPage)
						}

					})
					.error(function (error) {
						$scope.isPreloader = false;
						AppService.isAuth(error);
					})
			}

			function getStats(data) {
				$scope.isPreloader = true;
				AppService.get('admin/kyc/stats', true, data)
					.success(function (data) {
						$scope.isPreloader = false;
						$scope.stats = data.data
					})
					.error(function (error) {
						$scope.isPreloader = false;
						AppService.isAuth(error);
					})
			}

			$scope.searchBy = function ($event) {
				$("th").remove();
        setTimeout(function() {
            updateState();
        }, 2);
			}

			$scope.filterByStatus = function () {
				$("th").remove();
        setTimeout(function() {
            updateState();
        }, 2);
			}

			$scope.kyc_id;
			$scope.updateKYCAction = function (kyc_id, status) {
				$scope.kyc_id = kyc_id

				var items = {
					'kyc_id': kyc_id,
					'status': status
				}

				var modalInstance = $uibModal.open({
					animation: true,
					templateUrl: 'app/views/reportv1/kycAction.html',
					controller: 'kycActionController',
					size: 'sm-400',
					resolve: {
						items: function () {
							return items;
						}
					}
				})
			}

			$scope.changePerPage = function(){
        $("th").remove();
        setTimeout(function() {
            updateState();
        }, 2);
      }

			$scope.updateRemarks = function (kyc_id, remarks) {
				loaderFactory.display('Updating remarks. Please Wait !')

				let data = {
					'remarks': remarks
				}

				AppService.patch('admin/kyc/' + kyc_id + '/remarks', true, data)
					.then(function (res) {
						loaderFactory.hide()
						$state.reload();
					})
					.error(function (error) {
						loaderFactory.hide()
						AppService.isAuth(error);
					})
			}

			function updateState(shipment_type){
        $state.go('.', {
					page: $scope.page,
					perPage: $scope.itemsPerPage[$scope.selectedItems].value,
					status: $scope.status,
					client_id: $scope.client_id,
					client_email: $scope.client_email,
					client_name: $scope.client_name,
					client_phone: $scope.client_phone
				});
      }

			getStats();
			getAllData();
		}
	}
})();

/**=========================================================
 * Module: updateIMEIController
  =========================================================*/
(function () {
	'use strict';
	angular
		.module('app.orders')
		.controller('kycActionController', kycActionController);
	kycActionController.$inject = ['$stateParams', '$rootScope', '$scope', 'AppService', '$state', 'Notify', '$uibModalInstance', 'items', 'SR_CONSTANTS', 'loaderFactory'];

	function kycActionController($stateParams, $rootScope, $scope, AppService, $state, Notify, $uibModalInstance, items, SR_CONSTANTS, loaderFactory) {
		activate();

		function activate() {
			$scope.items = items;
			$scope.reason = '';

			$scope.updateStatus = updateStatus;
			
			function updateStatus(reason) {
				loaderFactory.display('Updating Status. Please Wait !')
				var data = {
					'status': $scope.items.status,
					'reason' : reason
				};
				AppService.patch('admin/kyc/' + $scope.items.kyc_id, true, data)
					.success(function (data) {
						$uibModalInstance.dismiss('cancel');
						loaderFactory.hide();
						$state.reload();
					})
					.error(function (error) {
						loaderFactory.hide();
						AppService.isAuth(error);
					})
			}
		}

	}
})();

(function () {
    'use strict';
    angular.module('app.report').controller('orderReportController', orderReportController);
    orderReportController.$inject = ['$rootScope', '$state', '$scope', 'AppService', '$uibModal', '$localStorage', '$stateParams', '$compile'];
    function orderReportController($rootScope, $state, $scope, AppService, $uibModal, $localStorage, $stateParams, $compile) {
        activate();
        function activate() 
        {   
            window.Intercom('update');
            var date = new Date();
            $scope.currentDate = date;
            var DateFilter =
            {
                'from': '',
                'to': ''
            }

            var filter = 
            {
                company_name: '',
                courier_name: '',
                awb_number: '',
                whmcs_client_id: '',
                order_status: ''
            }
            $scope.filter = filter;
            $scope.searchText = '';
            $scope.DateFilter = DateFilter;
            $scope.isShowFilter = false;
            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }

            // getOrderReportDetail();
            $scope.paginatedData = function()
            {                   
                //$state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
                getOrderReportDetail();
            }

            $scope.sortType = 'base_channel_code';
            $scope.sortReverse  = false;

            $scope.changePerPage = function()
            {
                getOrderReportDetail();
                //$state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getOrderReportDetail();
            }

            $scope.hideFilter = function()
            {
                $scope.isShowFilter =  false;
                $('.report-filter').html('Filters');
            }

            $scope.getReportFilter = function()
            {   
                $scope.isPreloader = true;
                $scope.isShowFilter =  !$scope.isShowFilter;
                if($('.report-filter').html() == 'Apply Filters')
                {
                    filter.company_name = $('.company_name').val();
                    filter.courier_name = $('.courier_name').val();
                    filter.awb_number = $('.awb_number').val();
                    filter.whmcs_client_id = $('.whmcs_client_id').val();
                    filter.order_status = $('.order_status').val();
                    $('.report-filter').html('Filters');
                    getOrderReportDetail();
                }
                else
                {
                    $('.report-filter').html('Apply Filters');
                    if( $('.filters-appened').children().length < 2 )
                    {
                        AppService.get('internal/report/orders/filters', true)
                        .success(function (data)
                        {
                            var tableFilter = AppService.dynamicFilters(data);
                            $(tableFilter).appendTo('.filters-appened');
                            $compile(tableFilter)($scope);
                            $scope.isPreloader = false;
                        })
                        .error(function(error)
                        {   
                            $scope.isPreloader = false;
                            AppService.isAuth(error);
                        })
                    }
                    else
                    {

                        $scope.isPreloader = false;
                    }
                }
            }

            $scope.customeColumns = function()
            {   
                var items = 
                {
                    url : 'internal/report/orders/fields'
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/reportv1/reportColumns.html',
                    controller: 'setColumnsController',
                    size: 'lg',
                    resolve: {
                        items: function ()
                        {
                         return items;
                        }
                    }
                });
            }

            $scope.searchBy = function()
            {
                if($scope.filter.awb_number.length >= 4)
                {
                   DateFilter.from = moment(user.created_at.date).format('YYYY-MMM-DD').toString();
                   DateFilter.to = moment().format('YYYY-MMM-DD').toString();
                   getOrderReportDetail(); 
                } 
            }

            function getOrderReportDetail()
            {   
                $scope.isPreloader = true;
                $('.table-append').html('');
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('internal/report/orders?company_name='+ filter.company_name +"&courier_name="+ filter.courier_name+ '&awb_number='+ filter.awb_number +'&order_status='+ filter.order_status +'&whmcs_client_id=' + filter.whmcs_client_id +'&from='+ DateFilter.from + "&to="+ DateFilter.to + '&page='+ $scope.page +'&per_page='+ perPage , true)
                .success(function (data)
                {
                    var tableHtml = AppService.dynamicTable(data.data);
                    $(tableHtml).appendTo('.table-append');
                    $scope.metaData = data.meta.pagination;
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    $scope.isPreloader = false;
                    AppService.setHeight();
                })
                .error(function(error)
                {   
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

            
            //new date picker JS
            var start = moment().subtract(1, 'month');
            var end = moment();
            var user = $localStorage.USER;
            
            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                dateLimit: {"month": 1},
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last week': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);
            function cb(start, end) 
            {   
                DateFilter.from = start.format('YYYY-MMM-DD').toString();
                DateFilter.to = end.format('YYYY-MMM-DD').toString();
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
            }
            getOrderReportDetail();
        }
    }
})(); 
(function () {
  'use strict';
  angular
  .module('app.report')
  .controller('pickupZoneServiceability', pickupZoneServiceability);
  pickupZoneServiceability.$inject = ['$scope', 'AppService', 'Notify', 'loaderFactory'];
  function pickupZoneServiceability($scope, AppService, Notify, loaderFactory) {
    activate();
    function activate() {
      $scope.planData = [
        {"id":"1","name":"Lite"},
        {"id":"2","name":"Basic"},
        {"id":"3","name":"Advanced"},
        {"id":"4","name":"Pro"},
        {"id":"5","name":"Enterprise"},
        {"id":"6","name":"Enterprise Plus"},
        {"id":"7","name":"Shopify Basic"},
        {"id":"8","name":"Shopify Advanced"},
        {"id":"9","name":"Shopify Pro"},
        {"id":"10","name":"Advanced Plus"},
        {"id":"11","name":"SR Lite"},
        {"id":"12","name":"SR Basic"},
        {"id":"13","name":"SR Advanced"},
        {"id":"14","name":"SR Pro"},
        {"id":"15","name":"SR Enterprise"},
        {"id":"16","name":"Sandbox"},
        {"id":"17","name":"Pro Plus"}
      ]

      $scope.downloadZoneSheet = downloadZoneSheet;

      function downloadZoneSheet (pincode, planID) {
        if(pincode == ''){
          Notify.alert('Pincode is required', {status: 'danger', timeout: 5000 })
          return;
        }
        if(planID == ''){
          Notify.alert('Please select the appropriate plan before proceeding', {status: 'danger', timeout: 5000 })
          return;
        }
        loaderFactory.display('Creating your Zone Servicebility Sheet');
        var data = {
          plan_id: planID
        }
        AppService.get_with_params('export/pincode_sheet/'+ pincode, data, true)
        .success(function(res){
          Notify.alert(res.message, {status: 'success', timeout: 5000 })
          loaderFactory.hide();
        })
        .error(function(err){
          Notify.alert(err.message, {status: 'danger', timeout: 5000 })
          loaderFactory.hide();
        })
      }
    }
  }
})();

(function () {
    'use strict';
    angular.module('app.report').controller('pincodeUploadController', pincodeUploadController);
    pincodeUploadController.$inject = ['$rootScope', '$scope', 'AppService', '$state', '$stateParams', 'Notify'];
    function pincodeUploadController($rootScope, $scope, AppService, $state, $stateParams, Notify) {
        activate();
        ////////////////
        function activate() {
            $scope.fileArry = [];
            $scope.Pincodefor = 'Domastic';

            $scope.uploadCodFile = function() {
                $scope.isPreloader = true;
                var file = $('#fileUpload')[0].files[0];

                if(file == undefined) {
                    $scope.isPreloader = false;
                    Notify.alert("Please select file first.",  {status: 'danger'});
                    return false;
                }

                var formData = new FormData();
                formData.append("file", file);
                  AppService.postFormData('courier/upload/postcode', formData)  
                .success(function (data) {
                    var fileObj = {
                        name: file.name,
                        file_id: data.file_id
                    };
                    if(data.hasOwnProperty('error_file_id')){
                        fileObj.hasErrorFile = true;
                        fileObj.error_file_id = data.error_file_id;
                    }
                    $scope.fileArry.push(fileObj);
                    Notify.alert(data.message);
                    $scope.isPreloader = false;
                })
                .error(function(error) {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            };

            $scope.cancel = function() {
                $('#fileUpload')[0].files[0] = undefined;
                console.log($('#fileUpload')[0].files[0]);
            };
        }
    }
})();

(function () {
	'use strict';
	angular.module('app.report').controller('priceUploadController', priceUploadController);
	priceUploadController.$inject = ['$rootScope', '$scope', 'AppService', '$state', '$stateParams', 'Notify'];
	function priceUploadController($rootScope, $scope, AppService, $state, $stateParams, Notify)
	{
		$scope.pricefor = 'Domestic';
		$scope.uploadCodFile = function() {

 			$scope.fileArry = [];
            var file = $('#fileUpload')[0].files[0];

            if(file == undefined) {
                $scope.isPreloader = false;
                Notify.alert("Please select file first.",  {status: 'danger'});
                return false;
            }

            var formData = new FormData();
            formData.append("file", file);
            if($scope.pricefor ==='International')
            {
            	var url = 'courier/upload/rates/international';
            }
            else
            {
            	var url = 'courier/upload/rates';
            }
            AppService.postFormData(url, formData)
            .success(function (data) {
                var fileObj = {
                    name: file.name,
                    file_id: data.file_id
                };
                if(data.hasOwnProperty('error_file_id')){
                    fileObj.hasErrorFile = true;
                    fileObj.error_file_id = data.error_file_id;
                }
                $scope.fileArry.push(fileObj);
                Notify.alert(data.message);
            })
            .error(function(error) {
                AppService.isAuth(error);
            })
        }
	}
})();

(function () {
    'use strict';
    angular.module('app.report').controller('ratingPannelController', ratingPannelController);
    ratingPannelController.$inject = ['$rootScope', '$scope', 'AppService', '$state', '$stateParams', 'Notify'];
    function ratingPannelController($rootScope, $scope, AppService, $state, $stateParams, Notify) {
        activate();
        ////////////////
        function activate() 
        {   
            $scope.fileArry = [];
            $scope.uploadRatingFile = function()
            {   
                $scope.isPreloader = true;
                var file = $('#fileUpload')[0].files[0];
                if(file == undefined)
                {   
                    $scope.isPreloader = false;
                    Notify.alert("Please select your rating file first.",  {status: 'danger'});
                    return false;
                }
                var formData = new FormData();
                formData.append("file", file);
                AppService.importFile(formData, 'courier/rating/upload_file')
                .success(function (data)
                {   
                    Notify.alert(data.message);
                    $state.go($state.current, {}, {reload: true});
                    // $scope.fileArry.push(fileObj);
                    $scope.isPreloader = false;
                })
                .error(function(error)
                {   
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }

            $scope.cancel = function() 
            {

                $('#fileUpload')[0].files[0] = '';
                $('.selected-file').val(' ');
            }

            $scope.sendEmail = function(file_id)
            {   
                $scope.isPreloader = true;
                var  data = 
                {
                    file_id: file_id
                }
                AppService.get('cod/send/mail?file_id=' + file_id, true, data)
                .success(function (data)
                {   
                    Notify.alert(data.message);
                    $scope.isPreloader = false;
                })
                .error(function(error)
                {   
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })

            }
            
        }
    }
})(); 
// 0 : unprocess 
// 1 : cod_payable 
// 2 : initiated 
// 3 : Remitted 
// 4 : error

(function () {
	'use strict';
	angular.module('app.report').controller('remittanceController', remittanceController);
	remittanceController.$inject = ['$state', '$scope', 'AppService', '$uibModal', '$localStorage', '$stateParams', '$compile', 'loaderFactory', 'Notify'];

	function remittanceController($state, $scope, AppService, $uibModal, $localStorage, $stateParams, $compile, loaderFactory, Notify){

        $scope.uploadedCodFile = ''
        $scope.searchby = 
        {
            crf_id : '',
            awb_no : ''
        }
        $scope.noData = true;
        $scope.viewHistoryData = '';

        var orderdate = {
            className: 'orderdate',
            width: $('.orderdate').outerWidth(),
            tableClass: 'viewRemittancewrapper'
        }

        if( $stateParams.crf_id ) {
            $scope.searchby.crf_id = $stateParams.crf_id;
            searchByCrfId( $scope.searchby.crf_id);
        }
        
		function uploadCodFile() {
            loaderFactory.display('Please wait!');
            var file = $('#fileUpload')[0].files[0];

            if(file == undefined) {
                loaderFactory.hide()
                Notify.alert("Please select your Remittance file first.", {status: 'danger', timeout: 7000 });
                return false;
            }

            var formData = new FormData();
            formData.append("file", file);
            AppService.importFile(formData, 'cod/remittance')
            .success(function (data) {
                $scope.fileArry = data
                Notify.alert(data.message, {status: 'success', timeout: 7000 });
                document.getElementById("remittance").reset();
                loaderFactory.hide();
                getUploadedRemittance();
            })
            .error(function(error) {
                loaderFactory.hide()
                AppService.isAuth(error, 'danger');
            })
        };


        function getUploadedRemittance(){
            loaderFactory.display('Please wait!');
            AppService.get('cod/remittance_upload_history', true)
            .success(function(data){
                $scope.uploadedCodFile = data.file_logs;
                loaderFactory.hide()
            })
            .error(function(error){
                AppService.isAuth(error, 'danger');
                loaderFactory.hide()
            })
        }
        
        function searchByCrfId(drfId) {
            if(!drfId)
            {   
                $scope.viewHistoryData = ''; $scope.noData = true; 
                return;
            }
           
            loaderFactory.display('Please wait!');
            AppService.get('cod/remittance_history?crf_id='+drfId, true)
            .success(function(data){
                $scope.viewHistoryData = data.awbs;
                $scope.noData = !$scope.viewHistoryData ? true : false;
                $scope.searchby.awb_no = '';
                if(!data.length)
                {
                    loaderFactory.hide();
                }
                $scope.$on('viewSearchRemittance', function(ngRepeatFinishedEvent){
                    AppService.setWidth(orderdate);
                    loaderFactory.hide();
                });
            })
            .error(function(error){
                $scope.viewHistoryData = '';
                loaderFactory.hide()
                AppService.isAuth(error, 'danger');
            })
            
        }

        function searchByAwb(awbNo) {
            if(!awbNo)
            {   
                $scope.viewHistoryData = ''; $scope.noData = true; 
                return;
            }
            
            loaderFactory.display('Please wait!');
            AppService.get('cod/remittance_history?awb='+awbNo, true)
            .success(function(data){
                $scope.viewHistoryData = data.awbs;
                $scope.noData = !$scope.viewHistoryData ? true : false;
                $scope.searchby.crf_id = '';
                if(!data.length)
                {
                    loaderFactory.hide();
                }
                $scope.$on('viewSearchRemittance', function(ngRepeatFinishedEvent){
                    AppService.setWidth(orderdate);
                    loaderFactory.hide();
                });
            })
            .error(function(error){
                $scope.viewHistoryData = '';
                loaderFactory.hide()
                AppService.isAuth(error, 'danger');
            })
        }

        if($state.current.name === 'app.remittanceUpload'){
            getUploadedRemittance();
        }

        $scope.searchByAwb = searchByAwb;
        $scope.searchByCrfId = searchByCrfId;
        $scope.uploadCodFile = uploadCodFile;
	}
})();
(function () {
    'use strict';
    angular.module('app.report').controller('scheduledReportlistController', scheduledReportlistController);
    scheduledReportlistController.$inject = ['$rootScope', '$scope', 'AppService', '$window', '$uibModal', '$localStorage'];

    function scheduledReportlistController($rootScope, $scope, AppService, $window, $uibModal, $localStorage) {
        activate();
        function activate() 
        {
            var date = new Date();
            $scope.currentDate = date;
            $scope.DateFilter =
            {
                'from': '',
                'to': ''
            }

            //new date picker JS
            var start = moment().subtract(1, 'month');
            var end = moment();
            var user = $localStorage.USER;
            
            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);
            function cb(start, end) 
            {
                $scope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
                $scope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));

            }
        }
    }
})(); 
(function () {
    'use strict';
    angular
    .module('app.report')
    .controller('sellerReportDataController', sellerReportDataController);

    sellerReportDataController.$inject = ['$rootScope', '$scope', 'AppService', '$state', '$stateParams', 'Notify'];

    function sellerReportDataController($rootScope, $scope, AppService, $state, $stateParams, Notify) {
        activate();
        ////////////////
        function activate()
        {
        	// $scope.isPreloader = false;
        	$scope.fileArry = [];
            $scope.uploadEmailListFile = function() {
                $scope.isPreloader = true;
                var file = $('#fileUpload')[0].files[0];

                if(file == undefined) {
                    $scope.isPreloader = false;
                    Notify.alert("Please select your Email List file first.",  {status: 'danger'});
                    return false;
                }

                var formData = new FormData();
                formData.append("file", file);

                AppService.importFile(formData, 'internal/report/seller_data/upload')
                .success(function (data) {
                    var fileObj = {
                        name: file.name,
                        file_id: data.file_id
                    };
                    $scope.fileArry.push(fileObj);
                    Notify.alert(data.message);
                    $scope.isPreloader = false;
                })
                .error(function(error) {
                    $scope.isPreloader = false;
                    Notify.alert(error.error);
                })
            };
        }
    }
})();

(function () {
	'use strict';
	angular
	.module('app.report')
	.controller('sellerListingController', sellerListingController);

	sellerListingController.$inject = ['$rootScope', '$state', '$scope', 'AppService', '$location', '$window', '$uibModal', '$localStorage', '$stateParams', '$compile'];

	function sellerListingController($rootScope, $state, $scope, AppService, $location, $window, $uibModal, $localStorage, $stateParams, $compile) {
		
		this.activate = function() {

			$scope.showExtraDetailsForCompany = false;
			$scope.associatedTabIDToDisplay = false;
			$scope.defaultTabToDisplay = 'company_details';
			$scope.activeTabItem = 'company_details';

			$scope.tabList = [
				{ 
					id   : "company_details",
					name : "Company Details"
				},
				{ 
					id   : "billing_invoices",
					name : "Billing & Invoices"
				},
				{ 
					id   : "cod",
					name : "COD"
				},
				{ 
					id   : "shipments",
					name : "Shipments"
				},
				{ 
					id   : "ndr",
					name : "NDR"
				},
				{ 
					id   : "rto",
					name : "RTO"
				},
				{ 
					id   : "wd",
					name : "Weight Discrepancy"
				}
			];

			/**
			 * Contains Seller Specific Data.
			 * 
			 * @type json
			 */
			$scope.sellerData = {};
			
			/**
			 * Contains Tab Specific Data.
			 * 
			 * @type array
			 */
			$scope.tabSpecificData 	= {};

			$scope.client_name 	= '';
			$scope.client_id 	= '';
			$scope.client_email = '';
			$scope.client_phone = '';
			$scope.status 		= '';
			$scope.remarks 		= '';

			$scope.maxSize 		= 5;
			$scope.totalItems 	= 10000000;
			$scope.page 		= $stateParams.page;

			$scope.itemsPerPage = [{
					value: '15',
					id: 0
				},
				{
					value: '30',
					id: 1
				},
				{
					value: '60',
					id: 2
				},
				{
					value: '100',
					id: 3
				},
			];

			if ($stateParams.perPage == 30) {
				$scope.selectedItems = 1;
			} else if ($stateParams.perPage == 60) {
				$scope.selectedItems = 2;
			} else if ($stateParams.perPage == 100) {
				$scope.selectedItems = 3;
			} else {
				$scope.selectedItems = 0;
			}

			$scope.currentBalance = [];

			$scope.paginatedData = function () {
				$("th").remove();
				updateState();
			}

			function getAllData(data) {
				$scope.isPreloader = true;
				AppService.get('admin/sellers?client_name=' + $scope.client_name +
						'&client_id=' + $scope.client_id +
						'&status=' + $scope.status +
						'&client_email=' + $scope.client_email +
						'&page=' + $scope.page +
						'&per_page=' +$stateParams.perPage +
						'&client_phone=' + $scope.client_phone, true, data)
					.success(function (data) {
						$scope.isPreloader = false;
						$scope.sellerData = data.data;

						for (var seller in data.data) {
							$scope.currentBalance[ data.data[seller].id ] = '-';
						}

						$scope.metaData = data.meta.pagination
						$scope.totalItems = $scope.metaData.total;
						$scope.showingSellerNo = {
							from: $scope.totalItems == 0 ? 0 : ($stateParams.page - 1) * $stateParams.perPage + 1,
							to: Math.min($scope.totalItems, $stateParams.page * $stateParams.perPage)
						}

					})
					.error(function (error) {
						$scope.isPreloader = false;
						AppService.isAuth(error);
					})
			}

			$scope.searchBy = function ($event) {
				getAllData();
			}

			$scope.filterByStatus = function () {
				getAllData();
			}

			$scope.changePerPage = function()
            {
                $("th").remove();
                setTimeout(function() {
                    updateState();
                }, 2);
            }
            
			function updateState(shipment_type)
            {
                $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

			getAllData();

			/**
             * Show company/seller related details.
             * 
             * @param  json shipment
             * 
             * @return void
             */
            $scope.showExtraDetails = function( seller )
            {
                if($scope.showExtraDetailsForCompany != seller.id){
                    $scope.showExtraDetailsForCompany = seller.id;
                    $scope.associatedTabIDToDisplay = $scope.defaultTabToDisplay + '_' + seller.id
                	$scope.setTabItemActive($scope.associatedTabIDToDisplay);
                    $scope.getTabSpecificData( $scope.defaultTabToDisplay, seller.id );

                } else {
                    $scope.showExtraDetailsForCompany = false;
                }
            }

            /**
             * Show company/seller related details.
             * 
             * @param  json shipment
             * 
             * @return void
             */
            $scope.showAssociatedTab = function( tabType, seller_id )
            {	
            	var tabId = tabType + '_' + seller_id;

                $scope.setTabItemActive(tabId);

                if($scope.associatedTabIDToDisplay != tabId ){
                    $scope.associatedTabIDToDisplay = tabId;
                    $scope.getTabSpecificData(tabType, seller_id );
                }
            }

            /**
	         * To set tab item active.
	         * 
	         * @param string tabItem
	         */
	        $scope.setTabItemActive = function(tabItem) {
			    $scope.activeTabItem = tabItem;
			}

			/**
			 * To display current balance.
			 * 
			 * @param  int $company_id
			 * 
			 * @return void
			 */
			$scope.showCurrentBalance = function( company_id ) {

				$scope.isPreloader = true;

				var data = { };

				AppService.post('admin/sellers/currentbalance/'+ company_id, true, data)
				.success(function(data){
					
					$scope.currentBalance[ data.company_id ] = data.current_balance;
					$scope.isPreloader = false;
										
	                AppService.alertValidation('Feched Successfully', true);
				})
				.error(function(error){

					$scope.isPreloader = false;
					AppService.isAuth(error);
				});
            }

            /**
             * To get tab specific data.
             * 
             * @param  string tab     
             * @param  int sellerId
             * 
             * @return void         
             */
            $scope.getTabSpecificData = function( tab, sellerId)
            {
            	var data = {};

            	$scope.isPreloader = true;
				
				AppService.get('admin/sellers/'+sellerId+'/stats/'+ tab, true, data)
					.success(function (data) {
						$scope.isPreloader = false;
						$scope.tabSpecificData[sellerId] = data;
						if( $scope.tabSpecificData.hasOwnProperty(sellerId) )
						{
							$scope.tabSpecificData[sellerId][tab] = data;
						} else {
							$scope.tabSpecificData[sellerId] = [];
							$scope.tabSpecificData[sellerId][tab] = data;
						}						
					})
					.error(function (error) {
						$scope.isPreloader = false;
						AppService.isAuth(error);
					});
            }
		}

		this.activate();

	}
})();

(function () {
    'use strict';
    angular.module('app.report').controller('setColumnsController', ['$rootScope', '$scope', 'AppService', 'items', '$uibModalInstance', '$compile', '$state' ,
        function($rootScope, $scope, AppService, items, $uibModalInstance, $compile, $state)
        {
            activate();
            ////////////////
            function activate()
            {
                var columnsNo = 4;
                $scope.getColumsDetail = function()
                {
                    $scope.isPreloader = true;
                    AppService.get(items.url, true)
                    .success(function (data)
                    {
                        $('.file-wrapper').html('');
                        var length = data.length;
                        var columns = '';
                        var trueCheckBox = 0;
                        for (var i = 0; i < length; i++)
                        {
                            // data[i].selected = true;
                            var selectedValue = data[i].selected == true ? "checked": "" ;
                            if(i%columnsNo == 0)
                            {
                                columns +=
                                '<div class ="row">'+
                                    '<div class="col-md-3">' +
                                        '<div class="checkbox c-checkbox">'+
                                            '<label>'+
                                                '<input type="checkbox" value =' + data[i].field_id  + " " +  selectedValue + '>'+
                                                    '<span class="fa fa-check"></span>' + data[i].name.replace((/_/g), " ") +
                                            '</label>'+
                                        '</div>'+
                                    '</div>'

                            }
                            else
                            {
                                columns +=
                                '<div class="col-md-3">' +
                                    '<div class="checkbox c-checkbox">'+
                                        '<label>'+
                                            '<input type="checkbox" value =' + data[i].field_id  + " " +   selectedValue + '>'+
                                                '<span class="fa fa-check"></span>' + data[i].name.replace((/_/g), " ") +
                                        '</label>'+
                                    '</div>'+
                                '</div>'

                            }

                            if(i%columnsNo == 3)
                            {
                               columns +=  '</div>'
                            }
                            if(data[i].selected ==true)
                            {
                                trueCheckBox += 1;
                            }
                        }

                        if(length == trueCheckBox)
                        {
                             $("#checkAll").prop('checked', $(this).prop("checked"));
                        }
                        else
                        {
                            $("#checkAll").prop('checked', '');
                        }

                        $(columns).appendTo('.file-wrapper');
                        // $compile(columns)($scope);
                        $("#checkAll").change(function () {
                            $("input:checkbox").prop('checked', $(this).prop("checked"));

                        });
                        $scope.isPreloader = false;
                        // $uibModalInstance.dismiss('cancel');
                    })
                    .error(function(error)
                    {
                        $scope.isPreloader = false;
                        AppService.isAuth(error);
                    })

                    $scope.updateColumns = function()
                    {
                        $scope.isPreloader = true;
                        var field_Ids =[];
                        $("input:checkbox:checked").each(function()
                        {
                            field_Ids.push($(this).val());
                        });
                        var data =
                        {
                            field_id: field_Ids
                        }
                        
                        AppService.post(items.url, true, data)
                        .success(function (data)
                        {
                            $state.reload();
                            $uibModalInstance.dismiss('cancel');
                            $scope.isPreloader = false;
                        })
                        .error(function(error)
                        {
                            $scope.isPreloader = false;
                            AppService.isAuth(error);
                        })
                    }

                    $scope.close = function()
                    {
                        $uibModalInstance.dismiss('cancel');
                    }
                }

           }
        }
    ])
})();

/**
 * Shipment Listing Controller and its functionality.
 * 
 * @return void
 */
(function () {
	'use strict';
	angular
	.module('app.report')
	.controller('shipmentListingController', shipmentListingController);

	shipmentListingController.$inject = [
									'$rootScope', 
									'$state', 
									'$scope', 
									'AppService', 
									'$location', 
									'$window', 
									'$uibModal', 
									'$localStorage', 
									'$stateParams',
									'$compile',
									'$helper'
								];

	function shipmentListingController(
		$rootScope, 
		$state, 
		$scope, 
		AppService, 
		$location, 
		$window, 
		$uibModal, 
		$localStorage, 
		$stateParams,
		$compile,
		$helper
		) 
	{
		var $this = this;

		$this.activate = function() {

			$scope.shipmentData = {};

			$scope.shipmentStatuses = [
				{ status_value: 1, status_name: 'AWB ASSIGNED' },
				{ status_value: 2, status_name: 'LABEL GENERATED' },
				{ status_value: 3, status_name: 'PICKUP GENERATED' },
				{ status_value: 4, status_name: 'PICKUP QUEUED' },
				{ status_value: 5, status_name: 'MANIFEST GENERATED' },
				{ status_value: 6, status_name: 'SHIPPED' },
				{ status_value: 7, status_name: 'DELIVERED' },
				{ status_value: 8, status_name: 'CANCELED' },
				{ status_value: 9, status_name: 'RTO INITIATED' },
				{ status_value: 10, status_name: 'RTO DELIVERED' },
				{ status_value: 11, status_name: 'PENDING' },
				{ status_value: 12, status_name: 'LOST' },
				{ status_value: 13, status_name: 'PICKUP ERROR' },
				{ status_value: 14, status_name: 'RTO ACKNOWLEDGED' },
				{ status_value: 15, status_name: 'PICKUP RESCHEDULED' },
				{ status_value: 16, status_name: 'CANCELLATION REQUESTED' },
				{ status_value: 17, status_name: 'OUT FOR DELIVERY' },
				{ status_value: 18, status_name: 'IN TRANSIT' }
			];

			$scope.tabList = [
				{ id   : "seller_details", name : "Seller Details" },
				{ id   : "remittance", name : "Remittance" },
				{ id   : "shipment", name : "Shipment" },
				{ id   : "ndr", name : "NDR" },
				{ id   : "wd", name : "Weight Discrepancy" }
			];

			$scope.showCompanyItem = false;
			$scope.associatedTabIDToDisplay = false;
			$scope.defaultTabToDisplay = 'seller_details';
			$scope.activeTabItem = 'seller_details';

			/**
			 * Contains Tab Specific Data.
			 * 
			 * @type array
			 */
			$scope.tabSpecificData 	= {};

			$scope.awb = '';
			$scope.order_id = '';
			$scope.client_id = '';
			$scope.email = '';
			$scope.shipment_status = '';
			$scope.from = '';
			$scope.to = '';
			$scope.channel_id = '';
			$scope.courier_id = '';
			$scope.wd = $scope.fc = $scope.is_international = '';

			$scope.maxSize = 5;
			$scope.totalItems = 10000000;
			$scope.page = $stateParams.page;

			if(!$rootScope.DateFilter){
                $rootScope.DateFilter =
                {
                    'from': '',
                    'to': ''
                }
            }

            $scope.date_from = $stateParams.date_from;
            $scope.date_from = $stateParams.date_to;

			$scope.itemsPerPage = [
				{ value: '15', id: 0 },
				{ value: '30', id: 1 },
				{ value: '60', id: 2 },
				{ value: '100',id: 3 },
			];

			if ($stateParams.perPage == 30) {
				$scope.selectedItems = 1;
			} else if ($stateParams.perPage == 60) {
				$scope.selectedItems = 2;
			} else if ($stateParams.perPage == 100) {
				$scope.selectedItems = 3;
			} else {
				$scope.selectedItems = 0;
			}

			if( $stateParams.client_id )
			{
				$scope.client_id = $stateParams.client_id;
			}
			
			$scope.shipment_status = $stateParams.status ? $stateParams.status : '';
			$scope.fc = $stateParams.fc ? $stateParams.fc : '';
			$scope.wd = $stateParams.wd ? $stateParams.wd : '';
			$scope.is_international = $stateParams.is_international ? $stateParams.is_international : '';
				
			$scope.currentBalance = [];

			$scope.paginatedData = function () {
				$("th").remove();
				updateState();
			}
			
			function getAllData(data) {

				// start the preloader.
				$scope.isPreloader = true;

                var start = $stateParams.date_from 
                				? moment($stateParams.date_from , 'YYYY-MMM-DD').format('YYYY-MM-DD') 
                					: moment().subtract(12, 'month').format('YYYY-MM-DD');

                var end   = $stateParams.date_to 
                				? moment($stateParams.date_to , 'YYYY-MMM-DD').format('YYYY-MM-DD') 
                					: moment().format('YYYY-MM-DD');

				AppService.get('admin/shipments?awb=' + $scope.awb +
						'&client_id=' + $scope.client_id +
						'&status=' + ($scope.shipment_status ? $scope.shipment_status : '')+
						'&email=' + $scope.email +
						'&channel_id=' + ( $scope.channel_id ? $scope.channel_id : '' ) +
						'&courier_id=' + ( $scope.courier_id ? $scope.courier_id : '')+
						'&from=' + start +
						'&to=' + end +
						'&page=' + $scope.page +
						'&per_page=' +$stateParams.perPage +
						'&wd=' + $scope.wd +
						'&fc=' + $scope.fc +
						'&is_international=' + $scope.is_international +
						'&order_id=' + $scope.order_id, true, data)
					.success(function (data) {

						// stop the preloader.
						$scope.isPreloader = false;

						$scope.shipmentData = data.data;
						$scope.metaData = data.meta.pagination;
						$scope.totalItems = $scope.metaData.total;

						for (var shipment in data.data) {
							$scope.currentBalance[ data.data[shipment].company.id ] = '-';
						}

						// pagination parameters to display.
						$scope.showingShipmentNo = {
							from: $scope.totalItems == 0 ? 0 : ($stateParams.page - 1) * $stateParams.perPage + 1,
							to: Math.min($scope.totalItems, $stateParams.page * $stateParams.perPage)
						}

					})
					.error(function (error) {
						$scope.isPreloader = false;
						AppService.isAuth(error);
					})
			}

			$scope.searchBy = function ($event) {
				updateState();
			}

			$scope.filterByStatus = function () {
				$("th").remove();
                setTimeout(function() {
                    updateState();
                }, 2);
			}

			$scope.filterByCouriers = function () {
				updateState();
			}

			$scope.changePerPage = function()
            {
                $("th").remove();
                setTimeout(function() {
                    updateState();
                }, 2);
            }

			function updateState(shipment_type)
            {
                $state.go(
                	'.', 
                	{
                		page: $scope.page, 
                		perPage: $scope.itemsPerPage[$scope.selectedItems].value, 
                		date_from: $stateParams.date_from,
                    	date_to: $stateParams.date_to,
                    	client_id: $scope.client_id,
                    	order_id: $scope.order_id,
                    	awb: $scope.awb,
                    	email: $scope.email,
                    	channel_id: $scope.channel_id,
                    	courier_id: $scope.courier_id,
                    	status: $scope.shipment_status,
                    	shipment_status: $scope.shipment_status
                    },
                    {
                    	reload:false,
                    	notify:false
                    }
           		);
                getAllData();
            }

	        //new date picker JS
            var start = $stateParams.date_from ? moment($stateParams.date_from , 'YYYY-MMM-DD'): moment().subtract(12, 'month');
            var end = $stateParams.date_to ? moment($stateParams.date_to , 'YYYY-MMM-DD'): moment();

            var user = $localStorage.USER;
            var lock = 0;
            var counter = 0;

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);

            cb(start, end);
            function cb(start, end)
            {
            	$stateParams.date_from = start.format('YYYY-MMM-DD').toString();
            	$stateParams.date_to = end.format('YYYY-MMM-DD').toString();
                
                updateState(1);
                
                if(!counter && start){
                    $rootScope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
                    $rootScope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
                }

                if($stateParams.date_from){
                    $('#reportrange span').html($stateParams.date_from + ' - ' + $stateParams.date_to);
                } else{
                    $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
                }

                if(counter){
                     var s1=start;
                     var e1=end;
                     supx(s1, e1);
                }
                
                counter++;
                
                if($scope.finala && lock){
                    start = $scope.finala;
                    end = $scope.finalb;
                }
            }

            function supx(a, b){            	
                var from = a.format('YYYY-MMM-DD');
                var to   = b.format('YYYY-MMM-DD');

                start = from;
                end = to;
                $scope.finala = from;
                $scope.finalb = to;
                $("th").remove();
                lock = 1;
            }
		}

		/**
         * Show company details
         * 
         * @param  json shipment
         * 
         * @return void
         */
        $scope.showCompanyDetails = function( shipment )
        {
            if($scope.showCompanyItem != shipment.order_id){
                $scope.showCompanyItem = shipment.order_id;
                $scope.associatedTabIDToDisplay = $scope.defaultTabToDisplay + '_' + shipment.id;
                $scope.setTabItemActive($scope.associatedTabIDToDisplay);
                $scope.getTabSpecificData( $scope.defaultTabToDisplay, shipment.id );
            } else {
                $scope.showCompanyItem = false;
            }
        }
        
        /**
         * Show awb/order related details.
         * 
         * @param  json shipment
         * 
         * @return void
         */
        $scope.showAssociatedTab = function( tabType, shipmentId )
        {	
        	var tabId = tabType + '_' + shipmentId;

            if($scope.associatedTabIDToDisplay != tabId ){
                $scope.associatedTabIDToDisplay = tabId;
                $scope.setTabItemActive(tabId);
                $scope.getTabSpecificData(tabType, shipmentId );
            }
        }

        /**
         * To set tab item active.
         * 
         * @param string tabItem
         */
        $scope.setTabItemActive = function(tabItem) {
		    $scope.activeTabItem = tabItem;
		}

        /**
		 * To display edit status form in modal.
		 * 
		 * @param  json shipment
		 * 
		 * @return void
		 */
		$scope.editStatusFormModal = function(shipment)
        {
        	var items = {

        		shipment : shipment,
        		shipmentStatuses : $scope.shipmentStatuses
        	};

            var modalInstance = $uibModal.open({
                animation: false,
                keyboard: false,
                backdrop  : 'static',
                templateUrl: 'app/views/modals/editShipmentData.html',
                controller: 'shipmentDataUpdateController',
                size: 'md',
                resolve: {
                    items: function ()
                    {
                        return items;
                    }
                }
            }).result.then(function(){
                // afterModal();
            });
        }

		/**
		 * To display current balance.
		 * 
		 * @param  int $company_id
		 * 
		 * @return void
		 */
		$scope.showCurrentBalance = function( company_id ) {

			$scope.isPreloader = true;

			var data = { };

			AppService.post('admin/sellers/currentbalance/'+ company_id, true, data)
			.success(function(data){
				
				$scope.currentBalance[ data.company_id ] = data.current_balance;
				$scope.isPreloader = false;
				
                AppService.alertValidation('Feched Successfully', true);
			})
			.error(function(error){

				$scope.isPreloader = false;
				AppService.isAuth(error);
			});
        }

        /**
         * To get tab specific data.
         * 
         * @param  string tab     
         * @param  int shipmentId
         * 
         * @return void         
         */
        $scope.getTabSpecificData = function( tab, shipmentId)
        {
        	var data = {};

        	$scope.isPreloader = true;
			
			if( tab == 'seller_details')
			{
        		$scope.isPreloader = false;
				return false;
			}

			AppService.get('admin/shipments/'+shipmentId+'/stats/'+ tab, true, data)
				.success(function (data) {

					$scope.isPreloader = false;
					$scope.tabSpecificData[shipmentId] = data;
					if( $scope.tabSpecificData.hasOwnProperty(shipmentId) )
					{
						$scope.tabSpecificData[shipmentId][tab] = data;
					} else {
						$scope.tabSpecificData[shipmentId] = [];
						$scope.tabSpecificData[shipmentId][tab] = data;
					}					
				})
				.error(function (error) {
					$scope.isPreloader = false;
					AppService.isAuth(error);
				});
        }
		
		function getFiltersData(){
			AppService.get('orders/manifestfilters', true)
			.success(function(data) {
			  $scope.courier_filter_data = data.shippingPartners;
			})
			.error(function(error) {
			  AppService.isAuth(error);
			});
	    }

      	getFiltersData();

		// initialize/activate the controller.
		$this.activate();
	}

})();

(function () {
    'use strict';
    angular.module('app.report').controller('weightDisputeReportController', weightDisputeReportController);
    weightDisputeReportController.$inject = ['$rootScope', '$scope' , '$state', '$stateParams', 'AppService', '$window', '$uibModal', '$localStorage', '$compile'];
    function weightDisputeReportController($rootScope, $scope, $state, $stateParams, AppService, $window, $uibModal, $localStorage, $compile) {
        activate();
        function activate() 
        {   
            window.Intercom('update');
            var date = new Date();
            $scope.currentDate = date;
            var DateFilter =
            {
                'from': '',
                'to': ''
            }
            
            var filter = 
            {
                company_name: '',
                courier_name: '',
                awb_number: '',
                whmcs_client_id: '',
                cod_reconcile_status: '',
                dispute_status: '',
                order_status:''
            }
            $scope.filter = filter;
            $scope.DateFilter = DateFilter;
            $scope.isShowFilter = false;
            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ];

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }

            $scope.paginatedData = function()
            {                   
                getWtdisReportDetail();
                //$state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.sortType = 'base_channel_code';
            $scope.sortReverse  = false;

            $scope.changePerPage = function()
            {
                getWtdisReportDetail();
                //$state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getWtdisReportDetail();
            }

            $scope.hideFilter = function()
            {
                $scope.isShowFilter =  false;
                $('.report-filter').html('Filters');
            }

            $scope.getReportFilter = function()
            {   
                $scope.isPreloader = true;
                $scope.isShowFilter =  !$scope.isShowFilter;
                if($('.report-filter').html() == 'Apply Filters')
                {  
                    filter.company_name = $('.company_name').val() !== undefined ? $('.company_name').val() :'';
                    filter.courier_name = $('.courier_name').val() !== undefined ? $('.courier_name').val() :'';
                    filter.awb_number = $('.awb_number').val() !== undefined ? $('.awb_number').val() :'';
                    filter.whmcs_client_id = $('.whmcs_client_id').val() !== undefined ? $('.whmcs_client_id').val() :'';
                    filter.cod_reconcile_status = $('.cod_reconcile_status').val() !== undefined ? $('.cod_reconcile_status').val() :'';
                    filter.dispute_status = $('.dispute_status').val() !== undefined ? $('.dispute_status').val() :'';;
                    $('.report-filter').html('Filters');
                    getWtdisReportDetail();
                }
                else
                {   
                    $('.report-filter').html('Apply Filters');
                    if( $('.filters-appened').children().length < 2 )
                    {
                        AppService.get('internal/report/wtdis/filters', true)
                        .success(function (data)
                        {   
                            var tableFilter = AppService.dynamicFilters(data);
                            $(tableFilter).appendTo('.filters-appened');
                            $compile(tableFilter)($scope);
                            $scope.isPreloader = false;
                        })
                        .error(function(error)
                        {   
                            $scope.isPreloader = false;
                            AppService.isAuth(error);
                        })
                    }
                    else
                    {
                        $scope.isPreloader = false;
                    }
                }
            }

            
            $scope.customeColumns = function()
            {   
                var items = 
                {
                    url : 'internal/report/wtdis/fields'
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/reportv1/reportColumns.html',
                    controller: 'setColumnsController',
                    size: 'lg',
                    resolve: {
                        items: function ()
                        {
                         return items;
                        }
                    }
                });
            }

            function getWtdisReportDetail()
            {
                $scope.isPreloader = true;
                $('.table-append').html('');
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('internal/report/weightdispute?company_name='+ filter.company_name +"&courier_name="+ filter.courier_name+ '&cod_reconcile_status=' + filter.cod_reconcile_status + '&awb_number='+ filter.awb_number +'&whmcs_client_id=' + filter.whmcs_client_id +'&from='+ DateFilter.from + "&to="+ DateFilter.to + '&page='+ $scope.page +'&per_page='+ perPage +'&dispute_status='+ filter.dispute_status , true)
                .success(function (data)
                {   
                    var tableHtml = AppService.dynamicTable(data.data);
                    $(tableHtml).appendTo('.table-append');
                    $scope.metaData = data.meta.pagination;
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo = 
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    } 
                    $scope.isPreloader = false;
                    AppService.setHeight();
                })
                .error(function(error)
                {   
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            }


            //new date picker JS
            var start = moment().subtract(1, 'month');
            var end = moment();
            var user = $localStorage.USER;
            
            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);
            function cb(start, end) 
            {   
                
                DateFilter.from = start.format('YYYY-MMM-DD').toString();
                DateFilter.to = end.format('YYYY-MMM-DD').toString();
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));
            }
            getWtdisReportDetail();
        }
    }
})(); 
(function () {
    'use strict';
    angular
    .module('app.report')
    .controller('WDSlabController', WDSlabController);

    WDSlabController.$inject = ['$scope' , '$state', 'AppService', '$localStorage', 'Notify'];

    function WDSlabController($scope, $state, AppService, $localStorage, Notify) {
        activate();
        function activate(){
          $scope.selectCouriers = selectCouriers;
          $scope.updateVariance = updateVariance;
          $scope.getVariance = getVariance;
          $scope.toggleCheckAll = toggleCheckAll;

          $scope.selectedCouriers = [];

          getCourierList();
          getPlanList();

          function getCourierList () {
            AppService.get('courier/courierList', true)
              .then(function(res) {
                $scope.couriersList = res.data;
              });
          }

          function getPlanList () {
            // body...
          }

          function toggleCheckAll (source) {
            var checkstate = $scope.selectedCouriers;
            var checkboxes = document.getElementsByName('courier');
            for (var i = 0; i < checkboxes.length; i++) {
              checkboxes[i].checked = source;
              selectCouriers(checkboxes[i].value - 0);
            }
            // console.log($scope.selectedCouriers)
          }

          function updateVariance(){
            var data = {
              'courier_id': $scope.selectedCouriers,
              'plan_id': [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],
              'slab_max': $scope.slabMax,
              'variance': $scope.variance
            }

            AppService.post('admin/weight_variance', true, data)
            .success(function(res){
              Notify.alert(res.message)
            })
            .error(function(res) {
              Notify.alert(res.message)
            })
          }

          function getVariance () {
            $scope.get_variance = null;
            var data = {
              'courier_id': $scope.get_couriers,
              'plan_id': 1,
              'slab_max': $scope.get_slabMax
            }

            AppService.get_with_params('admin/weight_variance', data, true)
            .success(function(res){
              if(res.data){
                $scope.get_variance = res.data.variance.toString();
              } else {
                Notify.alert(res.message);
              }
            })
            .error(function(res){
              Notify.alert(res.message,{status: 'danger'})
            })
          }

          function selectCouriers (courierID) {
            var a = $("#courierId-" + courierID).prop('checked');
            if(!a){
              $scope.allSelected = false
            }
            var index = $scope.selectedCouriers.indexOf(courierID)
            if(index == -1){
              $scope.selectedCouriers.push(courierID);
            } else {
              $scope.selectedCouriers.splice(index, 1)
            }
          }
        }
    }
})();


(function () {
    'use strict';
    angular
    .module('app.shiprocket')
    .controller('billingChargeDetailController', billingChargeDetailController);

    billingChargeDetailController.$inject = ['$rootScope', '$scope', 'SR_CONSTANTS', '$uibModal', '$state', 'AppService', 'Notify', '$window', '$stateParams', '$localStorage', '$timeout'];

    function billingChargeDetailController($rootScope, $scope, SR_CONSTANTS, $uibModal, $state, AppService, Notify, $window, $stateParams, $localStorage, $timeout) {
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }
        ////////////////
        function activate(user){

            var orderid = {
                className : 'orderids',
                width: $('.orderids').outerWidth(),
                tableClass : 'billingChargeDetail'
            }
            var statmemtbalance = {
                className : 'statmemtbalance',
                width: $('.statmemtbalance').outerWidth()
            }

            $scope.is_weight_dispute = user.is_weight_dispute;
            $scope.is_statement = user.is_statement;
            $scope.is_autorecharge_upgradable = user.is_autorecharge_upgradable || false;

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.weightDiscrepancyLoading = true;
            $scope.weightDiscrepancyData = {};
            $scope.accountHasWeightDiscrepancy = false;
            $rootScope.isDisable = false;
            $rootScope.clickCount = 0;

            $scope.sortType = '';
            $scope.searchText = $stateParams.search ? $stateParams.search : '';
            $scope.searchStatus = $stateParams.status ? $stateParams.status : '';
            $scope.isPreloader = true;
            $scope.sortReverse  = false;
            $scope.showHistoryItem = false;

            var date = new Date();
            $scope.currentDate = date;
            $scope.DateFilter =
            {
                'from': $stateParams.from ? $stateParams.from : '',
                'to': $stateParams.to ? $stateParams.to : ''
            }

            $scope.openUrl = openUrl;
            $scope.searchBy = searchBy;
            $scope.sortTable = sortTable;
            $scope.openHistory = openHistory;
            $scope.updateState = updateState;
            $scope.acceptWeight = acceptWeight;
            $scope.rejectWeight = rejectWeight;
            $scope.disableButtons = disableButtons;
            $scope.showDataWeightDiscrepancy = showDataWeightDiscrepancy;

            $scope.itemsPerPage = [
              {value:'15', id:0},
              {value:'30', id:1},
              {value:'60', id:2},
              {value:'100', id:3}
            ]

            if($stateParams.perPage == 30){
                $scope.selectedItems = 1;
            }
            else if($stateParams.perPage == 60){
                $scope.selectedItems = 2;
            }
            else if($stateParams.perPage == 100){
                $scope.selectedItems = 3;
            }
            else{
                $scope.selectedItems = 0;
            }

            //show history start

            AppService.get(SR_CONSTANTS.api_urls.billing_discrepancy, true)
            .success(function(data) {
                $scope.weightDiscrepancyLoading = false;
                if(data.data.length) {
                    $scope.weightDiscrepancyData = data;
                    $scope.accountHasWeightDiscrepancy = true;

                }else {
                    $scope.weightDiscrepancyData = {};
                    $scope.accountHasWeightDiscrepancy = false;
                }
            })
            .error(function(error){
                AppService.isAuth(data);
            });

            function sortTable(type){
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getChargedDetailData();
            }

            function showDataWeightDiscrepancy() {
                var dataTosend = {
                    data: $scope.weightDiscrepancyData,
                    fromBillingPage: true
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop  : 'static',
                    keyboard  : false,
                    templateUrl: 'weight-discrepancy.html',
                    controller: 'weightDiscrepancyController',
                    size: 'lg',
                    resolve: {
                        items: function (){
                          return dataTosend;
                        }
                    }
                }).result.then(function(data){
                    if(data == "done"){
                        Notify.alert("There are no more weight discrepancies in your account. All the Discrepancies were paid for.");
                        $scope.accountHasWeightDiscrepancy = false;
                        $scope.weightDiscrepancyData = {};
                    }
                });
            };

            function openHistory(order){
                $scope.disputeData = []
                if($scope.showHistoryItem != order.order_id){
                    $scope.showHistoryItem = order.order_id
                    AppService.weightDisputeHistory(order.awb_code, true)
                    .then(function(res){
                        $scope.disputeData = res.data.data;
                    });
                } else {
                    $scope.showHistoryItem = false;
                }
            }
            //show history end

            function openUrl(billUrl){
              $window.open(billUrl, '_blank');
            }


            function searchBy(event){
              switch (event.keyCode) {
                case 13:
                  updateState();
                  break;
                case 8:
                  return;
                  break;
              }
            }

            function getChargedDetailData(){
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC";
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                var params = {
                  page: $scope.page,
                  per_page: perPage,
                  sort_by: $scope.sortType,
                  sort: sort,
                  search: $scope.searchText,
                  from: $scope.DateFilter.from,
                  to: $scope.DateFilter.to,
                  status: $scope.searchStatus
                }
                
                AppService.get_with_params('account/details/charge', params, true)
                .success(function (data){
                    if(!data.data.length){
                        $scope.isPreloader = false;
                    }
                    $scope.chargedDetail = data.data;
                    $scope.metaData = data.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    AppService.setHeight();
                    $scope.$on('chargedDetail', function(ngRepeatFinishedEvent){
                        AppService.setWidth(orderid);
                        $scope.isPreloader = false;
                    })
                })
                .error(function(error){
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            };

            function acceptWeight(isBulk, awb){
                $rootScope.clickCount++
                $rootScope.isDisable = true;
                var awbData, dataSend;
                if (isBulk == 'bulk'){
                    awbData = getSelectedItems('awb');
                    dataSend = {
                        clickCount : $rootScope.clickCount,
                        awb:awbData.awbs
                            };
                }
                else{
                    dataSend = {
                      clickCount : $rootScope.clickCount,
                      awb:[awb]
                    };
                }
                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop  : 'static',
                    keyboard  : true,
                    templateUrl: '/app/views/modals/weight_discrepancy_confirmation.html',
                    controller: 'weightDiscrepancyConfirmationController',
                    size: 'recharge',
                    resolve: {
                        items: function (){
                            return dataSend;
                        }
                    }
                });
            }

            function rejectWeight(orderId){
                $rootScope.clickCount++
                $rootScope.isDisable = true;
                // var dataSend = orderId;
                var dataSend = {
                  clickCount : $rootScope.clickCount,
                  awb:orderId
                };
                var modalInstance = $uibModal.open({
                    animation: true,
                    backdrop  : 'static',
                    keyboard  : false,
                    templateUrl: '/app/views/modals/weight_discrepancy_reject.html',
                    controller: 'weightDiscrepancyConfirmationController',
                    size: 'sm-400',
                    resolve: {
                        items: function (){
                          return dataSend;
                        }
                    }
                });
            }

            function getSelectedItems(id, isCancel) {
                var awblist = [];
                $("input:checkbox[name=orderId]:checked").each(function() {
                    if (id === 'awb') {
                        awblist.push($(this).data('awb'));
                    }
                });

                if (!awblist.length) {
                  return false;
                }
                if (isCancel) {
                  return awblist;
                }
                var data = {
                  awbs: awblist
                }
                return data;
            }

            function disableButtons() {
                setTimeout(function() {
                    var orderslength = getSelectedItems("awb", true);
                    if (orderslength.length >= '1') {
                        $('.acceptWeight-btn').attr('disabled', false).addClass('accept_despute');
                    } else {
                        $('.acceptWeight-btn').attr('disabled', true).removeClass('accept_despute');
                    }
                }, 2);
            }

            function updateState(){
              $state.go('.', {
                page: $scope.page,
                perPage: $scope.itemsPerPage[$scope.selectedItems].value,
                status: $scope.searchStatus,
                search: $scope.searchText,
                from: $stateParams.from,
                to: $stateParams.to
              },{
                notify: false,
                reload: false
              });

              $timeout(getChargedDetailData(),2)
            }
            //new date picker JS
            var start = $scope.DateFilter.from ? moment($scope.DateFilter.from , 'YYYY-MMM-DD'): moment().subtract(1, 'month');
            var end = $scope.DateFilter.to ? moment($scope.DateFilter.to , 'YYYY-MMM-DD'): moment();

            var lock = 0;
            var counter = 0;

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);

            cb(start, end);
            function cb(start, end){
                $scope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
                $scope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));

                if(counter){
                  var s1=start;
                  var e1=end;
                  supx(s1, e1);
                } else {
                  getChargedDetailData();
                }
                counter++;
                if($scope.finala && lock){
                  start = $scope.finala;
                  end = $scope.finalb;
                }
            }

            function supx(a, b){
                a = a.format('YYYY-MMM-DD');
                b = b.format('YYYY-MMM-DD');
                $state.go('.', {
                  page: $scope.page,
                  perPage: $scope.itemsPerPage[$scope.selectedItems].value,
                  status: $scope.searchStatus,
                  search: $scope.searchText,
                  from: a,
                  to: b
                },{
                  notify: false,
                  reload: false
                });
                $timeout(getChargedDetailData(),2)

                start = a;
                end = b;
                $scope.finala = a;
                $scope.finalb = b;
                lock = 1;
            }
        }
    }
})();


(function () {
    'use strict';
    angular
    .module('app.shiprocket')
    .controller('billingCreditDetailController', billingCreditDetailController);

    billingCreditDetailController.$inject = ['$rootScope', '$scope', '$state', 'AppService', '$window', '$stateParams', '$localStorage', 'SR_CONSTANTS', '$timeout', 'ga_service', 'GoogleAdWordsService', '$cookies', 'Notify', '$location'];

    function billingCreditDetailController($rootScope, $scope, $state, AppService, $window, $stateParams, $localStorage, SR_CONSTANTS, $timeout, ga_service, GoogleAdWordsService, $cookies, Notify, $location) {
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }
        ////////////////
        function activate(user){

            if ($stateParams.recharge == true || $stateParams.recharge == 'true'){
              var url_params = $location.search();
              var utmValue = $cookies.getObject('UTM');

              if(utmValue && utmValue.utm_source){
                if(url_params.utm_source==''){
                  _.merge(url_params, utmValue);
                  $state.go('.', url_params);
                }
              }

              GoogleAdWordsService.sendRechargeSuccessConversion();

              Notify.alert('Recharge Successful',{status: 'success', timeout: 3000});
              // GA AND FB EVENT On RECHARGE SUCCESFUL
              //AppService.goog_report_conversion("1009765584", "Th6HCIvb2mwQ0Jm_4QM");
              var w = window;
              w.google_conversion_id = 1009765584;
              w.google_conversion_language = "en";
              w.google_conversion_format = "3";
              w.google_conversion_color = "ffffff";
              w.google_conversion_label = 'Th6HCIvb2mwQ0Jm_4QM';
              w.google_remarketing_only = false;
              var opt = new Object();
              var conv_handler = window['google_trackConversion'];
              if (typeof(conv_handler) == 'function') {
                conv_handler(opt);
              }

              if(angular.isDefined($stateParams.is_first_recharge) && $stateParams.is_first_recharge){
                ga_service.send('Recharge', 'First Successful Recharge');
              }
              ga_service.send('Recharge', 'Recharge Succesful');
              fbq('track', 'Purchase', {currency: 'INR', value: $localStorage.temp_data.amount});

              $cookies.remove('UTM');

              delete $localStorage.temp_data;
            }

            var description = {
                className : 'description',
                width: $('.description').outerWidth(),
                tableClass: 'billingChargeDetailcharge'
            }

            $scope.is_weight_dispute = user.is_weight_dispute;
            $scope.is_statement = user.is_statement;
            $scope.is_autorecharge_upgradable = user.is_autorecharge_upgradable || false;
            var date = new Date();
            $scope.currentDate = date;
            $scope.DateFilter =
            {
                'from': $stateParams.from ? $stateParams.from : '' ,
                'to': $stateParams.to ? $stateParams.to : ''
            }

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.sortType = '';
            $scope.sortReverse  = false;
            $scope.isPreloader = true;

            $scope.openUrl = openUrl;
            $scope.sortTable = sortTable;
            $scope.updateState = updateState;

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ]

            if($stateParams.perPage == 30){
                $scope.selectedItems = 1;
            }
            else if($stateParams.perPage == 60){
                $scope.selectedItems = 2;
            }
            else if($stateParams.perPage == 100){
                $scope.selectedItems = 3;
            }
            else {
                $scope.selectedItems = 0;
            }

            function sortTable(type){
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getCreditDetailData();
            }

            function getRechargeSummary() {
              AppService.get(SR_CONSTANTS.api_urls.recharge_summary + '?from=' + $scope.DateFilter.from + '&to=' + $scope.DateFilter.to, true)
              .then(function(res) {
                $scope.recharge_summary = res.data.data;
              })
            }

            function openUrl(billUrl){
              $window.open(billUrl, '_blank');
            }

            function getCreditDetailData(){
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC";
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('courier/client_transactions?page='+ $scope.page +'&per_page='+ perPage + '&sort_by=' +$scope.sortType +'&sort=' +sort + '&from=' + $scope.DateFilter.from + '&to=' + $scope.DateFilter.to, true)
                .success(function (data){
                    if(!data.data.length){
                        $scope.isPreloader = false;
                    }
                    $scope.creditDetailData = data.data;
                    $scope.metaData = data.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    AppService.setHeight();
                    $scope.$on('creditDetailData', function(ngRepeatFinishedEvent){
                        AppService.setWidth(description);
                        $scope.isPreloader = false;
                    });
                })
                .error(function(error){
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            };

            function updateState(){
              $state.go('.', {
                page: $scope.page,
                perPage: $scope.itemsPerPage[$scope.selectedItems].value,
                from: $scope.DateFilter.from,
                to: $scope.DateFilter.to
              }, {
                notify: false,
                reload: false
              });
              $timeout(function(){
                getCreditDetailData();
              }, 2);
            }

            //new date picker JS
            var start = $scope.DateFilter.from ? moment($scope.DateFilter.from, 'YYYY-MMM-DD') : moment().subtract(3, 'month');
            var end = $scope.DateFilter.to ? moment($scope.DateFilter.to, 'YYYY-MMM-DD') : moment();

            $('#reportrange').daterangepicker({
              startDate: start,
              endDate: end,
              ranges: {
                'All': [moment(user.created_at.date), moment()],
                'Today': [moment(), moment()],
                'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                'This Month': [moment().startOf('month'), moment().endOf('month')],
                'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
              }
            }, cb);
            cb(start, end);

            function cb(start, end) {
              $scope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
              $scope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
              updateState();
              getRechargeSummary();
              if (start.format('YYYY-MMM-DD').toString() == '1970-08-17') {
                $('#reportrange span').html('All');
              } else {
                $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));

              }
            }
        }
    }
})();

;(function(angular) {
    'use strict';
    angular
        .module('app.shiprocket')
        .controller('billingPlanDetailController', BillingPlanDetailController)

        BillingPlanDetailController.$inject = ['AppService', '$scope', '$uibModal', '$localStorage', '$state', '$rootScope', '$cookies', 'OneSignalFactory','ga_service'];

        function BillingPlanDetailController(AppService, $scope, $uibModal, $localStorage, $state, $rootScope, $cookies, OneSignalFactory,ga_service) {

          $scope.user = $rootScope.loginUser;
          $scope.is_weight_dispute = $localStorage.USER.is_weight_dispute;
          $scope.is_statement = $localStorage.USER.is_statement;
          $scope.is_autorecharge_upgradable = $localStorage.USER.is_autorecharge_upgradable || false;
          $scope.activePlanId = null;
          $scope.activePlanTab =null;

          if($state.current.name === "app.rateCalculator"){
            AppService.get('billing/rates', true)
            .success(function (data) {
                $scope.planRates = data;
                $scope.activateId = $localStorage.USER.plan_id;
            })
            .error(function (error) {
                AppService.isAuth(error);
            });
          }

          if($localStorage.USER){
            activate();
          }
          function activate() {
            $scope.activeTab = [];
            $scope.clickTab = clickTab
            $scope.updatePlan = updatePlan;
            $scope.sub_menu_select = sub_menu_select;
            $scope.selfUpdateModal = selfUpdateModal;

            AppService.get('settings/plans/all', true)
            .success(function (data) {
                $scope.planData = data.data;
                var activePlanID = $scope.planData.find(isActive);
                $scope.activePlanScore = activePlanID.id;
                $scope.activePlanId = activePlanID.id-1;
                $scope.planData.forEach(function(e, i){
                  switch(e.id)
                  {
                    case activePlanID.id :  $scope.activePlanTab = i;
                    break;
                  }


                })
                $scope.isEnterprice = $scope.activePlanScore == 5;
                $scope.isProPlus = $scope.activePlanScore == 17;
                $scope.isSandbox = $scope.activePlanScore == 16;
                $scope.isEnterpricePlus = $scope.activePlanScore == 6;
                $scope.isAdvancePlus = $scope.activePlanScore == 10;
            })
            .error(function (error) {
                AppService.isAuth(error);
            });

            check_plan_upgrade_cookie();

            function check_plan_upgrade_cookie(){
              if(angular.isDefined($cookies.getObject('txn_id_'+$localStorage.USER.company_id))){

                var data = {
                  txn_id : $cookies.getObject('txn_id_'+$localStorage.USER.company_id)
                };
                AppService.post('billing/plan/validate_transaction', true, data)
                .then(function (res) {
                  if(res.data.success){
                    //transaction was successfull
                    OneSignalFactory.send_plan_update_tags($localStorage.USER.plan_id);
                    ga_service.send_ecommerce_data($cookies.getObject('txn_id_'+$localStorage.USER.company_id),res.data.amount); //sending ecommerce transaction data to ga                    
                  }
                  $cookies.remove('txn_id_'+$localStorage.USER.company_id); //delete cookie
                })
                .catch(function (error) {
                    $cookies.remove('txn_id_'+$localStorage.USER.company_id); //delete cookie
                    AppService.isAuth(error.data);
                });                

              }
            }

            function updatePlan(id, planName, price, plan) {
              var items =
                {
                    id: id,
                    is_active: $scope.activePlanScore,
                    planName: planName,
                    price: price,
                    plans: plan
                };

              AppService.intercomEventAndPing('upgardePlan Clicked');

              var modalInstance = $uibModal.open({
                  animation: true,
                  templateUrl: 'upgradeplan.html',
                  controller: 'updatePlanController',
                  size: 'recharge',
                  resolve: {
                      items: function () {
                          return items;
                      }
                  }
              });
            };

            function selfUpdateModal(id, planName, price, plan) {
                if ($scope.activePlanScore != 1) {  //id of current plan  is not of that of lite plan
                    updatePlan(id, planName, price, plan);
                } else {
                    var items = {
                            id: id,
                            is_active: $scope.activePlanID,
                            planName: planName,
                            price: price,
                            plans: plan
                        };

                    var modalInstance = $uibModal.open({
                        animation: true,
                        templateUrl: 'app/views/modals/selfUpdgradePlan.html',
                        controller: 'updatePlanController',
                        size: 'recharge',
                        resolve: {
                            items: function () {
                                return items;
                            }
                        }
                    });
                }
            };

            function isActive(plan) {
                if (plan.is_active) {
                    return plan.id;
                }
            }

            function clickTab(index, first_call) {
              $scope.activeTab = index;
              first_call? $rootScope.sub_menu = 'forward': '';

            };

            function sub_menu_select(subtab){
                $rootScope.sub_menu = subtab;
            }
          }
      }
})(angular);

(function () {
    'use strict';
    angular.module('app.shiprocket').controller('billingStatementController', billingStatementController);
    billingStatementController.$inject = ['$rootScope', '$scope', '$state', '$sessionStorage', '$auth', 'appConstant', 'AppService', '$window', '$stateParams', '$localStorage', 'SR_CONSTANTS', 'Notify', '$uibModal', '$location', 'ga_service', 'GoogleAdWordsService', '$cookies'];

    function billingStatementController($rootScope, $scope, $state, $sessionStorage, $auth, appConstant, AppService, $window, $stateParams, $localStorage, SR_CONSTANTS, Notify, $uibModal, $location, ga_service, GoogleAdWordsService, $cookies) {
        if(angular.isDefined($location.search().upgrade_status) &&  angular.isDefined($localStorage.USER.new_plan_id)){
            if($location.search().upgrade_status == 1){
                $localStorage.USER.plan_id = $localStorage.USER.new_plan_id;
                if($localStorage.USER.plan_id != 1){
                    $localStorage.USER.is_free_plan = false;
                }
                if($localStorage.USER.plan_id == 2){
                    $localStorage.USER.is_basic_plan = true;
                }
                var from_shopify = $localStorage.USER.from_shopify;
                delete $localStorage.USER.new_plan_id;
                delete $localStorage.USER.self_upgrade_plan_data;
                $auth.logout();

                AppService.post('auth/login/user', false, {token:$localStorage.USER.token})
                    .success(function(data) {
                        if(data.token){
                            delete $localStorage.USER;
                            delete $localStorage.channelErrorShown;
                            $auth.setToken(data.token);
                            sendUserInfoToIntercom(data);
                            $localStorage.USER = data;
                            $localStorage.USER.from_shopify = from_shopify;
                            $rootScope.isBasicPlan = data.is_basic_plan;
                            $rootScope.toggleOff = !data.inventory_sync_status;
                            $rootScope.loginUser = data;
                            setUserContextForSentry($localStorage, SR_CONSTANTS);
                            $rootScope.international_plans = _.indexOf(appConstant.internationalPlans, user.plan_id) > -1 ;
                            // $rootScope.international_plans = ($localStorage.USER.plan_id == 4) || ($localStorage.USER.plan_id == 3);
                        }
                    })
                    .error(function(data){
                        Notify.alert(data.message);
                        AppService.isAuth(error);
                    });

                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/modals/plan_upgrade_success.html',
                    controller:'bulkReassignController',
                    size: 'recharge',
                    resolve: {
                        items: function ()
                        {
                            $state.go('app.user_timeline');
                            return '';
                        }
                    }
                });

            }else if ($location.search().upgrade_status == 0){
                var modalInstance = $uibModal.open({
                    animation: true,
                    templateUrl: 'app/views/modals/retry-plan-upgrade.html',
                    controller:'retryPlanUpgradeController',
                    size: 'md',
                    resolve: {
                        items: function () {
                            return {
                                new_plan_id: $localStorage.USER.new_plan_id,
                                self_upgrade_plan_data: $localStorage.USER.self_upgrade_plan_data
                            };
                        }
                    }
                });
            }
        }

        function sendUserInfoToIntercom(data)
        {
            var intercomData = { };
            if( window.location.origin == 'https://app.shiprocket.in' )
            {
                intercomData.app_id = appConstant.intercomProductionID;
            }
            else
            {
                intercomData.app_id = appConstant.intercomDevelopmentID;
            }
            intercomData.first_name = data.first_name;
            intercomData.last_name = data.last_name;
            intercomData.email = data.email;
            intercomData.created_at = data.created_at;
            window.Intercom("boot", intercomData);
            //intercom code to send user info end
        }



        activate();
        ////////////////
        function activate()
        {
            $scope.is_weight_dispute = $localStorage.USER.is_weight_dispute;
            $scope.is_statement = $localStorage.USER.is_statement;
            $scope.is_autorecharge_upgradable = $localStorage.USER.is_autorecharge_upgradable || false;

            var orderdate = {
                className : 'orderdate',
                width: $('.orderdate').outerWidth(),
                tableClass: 'statement-wrappers'
            }
            var billid = {
                className : 'billid',
                width: $('.billid').outerWidth()
            }

            var description = {
                className : 'description',
                width: $('.description').outerWidth()

            }
            var statementbalance = {
                className : 'statementbalance',
                width: $('.statementbalance').outerWidth()

            }

            var date = new Date();
            $scope.currentDate = date;
            $scope.searchText = '';
            $scope.DateFilter =
            {
                'from': $stateParams.from ,
                'to': $stateParams.to
            };

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;
            $scope.sortType = '';
            $scope.sortReverse  = false;
            $scope.isPreloader = true;

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getStatementData();
            }

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ]

            if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }

            // getStatementData();
            $scope.paginatedData = function()
            {
                $("th").remove();
                $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value, from: $scope.DateFilter.from, to: $scope.DateFilter.to});
            }

            $scope.changePerPage = function()
            {
                $("th").remove();
                setTimeout(function() {
                    $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value, from: $scope.DateFilter.from, to: $scope.DateFilter.to});
                }, 2);
            }

            $scope.openUrl = function(billUrl)
            {
                $window.open(billUrl, '_blank');
            }

            $scope.searchBy = function()
            {
                getStatementData();
            }

            $scope.cancel = function()
            {
                // $("input:checkbox").prop( "checked", false );
                $uibModalInstance.dismiss('cancel');
                $state.reload();
            }

            function getStatementData()
            {
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC";
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('account/details/statement?page='+ $scope.page +'&per_page='+ perPage +'&search='+ $scope.searchText +'&from='+ $scope.DateFilter.from + '&to=' + $scope.DateFilter.to, true)
                .success(function (data)
                {
                    if(!data.data.length)
                    {
                        $scope.isPreloader = false;
                    }

                    $scope.statement = data.data;
                    $scope.metaData = data.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.totalCount = $scope.metaData.count;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }

                    AppService.setHeight();
                    $scope.$on('statement', function(ngRepeatFinishedEvent)
                    {
                        AppService.setWidth(orderdate, billid, description, statementbalance);
                        $scope.isPreloader = false;
                    });
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            };

            //new date picker JS
            var start = $stateParams.from? moment($stateParams.from, 'YYYY-MMM-DD'): moment().subtract(3, 'months');
            var end = $stateParams.to? moment($stateParams.to, 'YYYY-MMM-DD'): moment();
            var user = $localStorage.USER;
            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);
            function cb(start, end) {
                $scope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
                $scope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
                getStatementData();
                if(start.format('YYYY-MMM-DD').toString() == '1970-08-17')
                {
                    $('#reportrange span').html('All');
                }
                else
                {
                    $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));

                }
            }
        }
    }
})();

(function() {
  'use strict';
  angular.module('app.shiprocket').controller('courierpriorityController', courierpriorityController);
  courierpriorityController.$inject = ['$rootScope', '$scope', '$state', 'AppService', 'Notify', '$stateParams', '$uibModal'];

  function courierpriorityController($rootScope, $scope, $state, AppService, Notify, $stateParams, $uibModal) {
    activate();
    ////////////////
    function activate() {
      $scope.best = '';
      $scope.cheapest = '';
      $scope.fastest = '';
      $scope.custom = '';
      $scope.recommendation = '';
      $scope.isBestRecommendation = false;
      $scope.isCheapestRecommendation = false;
      $scope.isFastestRecommendation = false;
      $scope.isCustomRecommendation = false;
      $scope.checkedBestRated = false;
      $scope.checkedCheapest = false;
      $scope.checkedFastest = false;
      $scope.checkedCustom = false;
      $scope.updateRec = '';

      //intercom event
      AppService.intercomEventAndPing('Clicked Courier Priority');

      $scope.getCourierList = function() {
        courierList()
      }

      $scope.dragoverCallback = function(event, index, external, type) {
        return index < 10;
      };

      $scope.dropCallback = function(event, index, item, external, type) {
        return item;

      };

      $scope.courierTab = 0;
      $scope.courier_ids = {};

      $scope.toggleCourierStatus = function(item) {
        var key_exisits = $scope.courier_ids.hasOwnProperty(item.id);
        if (key_exisits) {
          delete $scope.courier_ids[item.id]
        } else {
          $scope.courier_ids[item.id] = item.status;
        }
      }

      $scope.confirmUpdate = function(){
        if(Object.keys($scope.courier_ids).length != 0){
          $scope.modalInstance = $uibModal.open({
            animation: true,
            templateUrl: 'courierUpdateConfirmation.html',
            scope: $scope,
            size: 'md',
            backdrop: 'static',
          });
        } else {
          Notify.alert('No changes have been made')
        }
      }

      $scope.updateCouriers = function() {
        var data = {
          'courier_ids': $scope.courier_ids
        }
        AppService.post('courier/disableCouriers', true, data)
          .then(function(res) {
            courierList();
            Notify.alert(res.data.message);
            $scope.courier_ids = {};
            $scope.modalInstance.close();
          })
      }

      AppService.get('courier/courierList', true)
        .then(function(res) {
          $scope.courierPartners = res.data;
        });



      $scope.setCourierPriority = function() {

        //intercom event
        AppService.intercomEventAndPing('Clicked "Save" in "Courier Priority');
        $scope.isPreloader = true;
        var length = $scope.couriers.length;
        var priority = [];

        for (var i = 0; i < length; i++) {
          priority.push($scope.couriers[i].courier_id);
        }
        var data = {
          'priority': priority
        }
        AppService.post('courier/priority', true, data)
          .success(function(data) {
            $scope.isPreloader = false;

            if (data.onboarding_completed_now) {
              var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'thankyoumessage.html',
                controller: 'bulkReassignController',
                size: 'sm',
                backdrop: 'static',
                keyboard: false,
                resolve: {
                  items: function() {
                    return '';
                  }
                }
              });

              $state.go('app.processing');
              return;
            }

            if ($stateParams.redirect_url == 'welcome') {
              $state.go('app.welcome');
              return;
            }

          })
          .error(function(error) {
            $scope.isPreloader = false;
            AppService.isAuth(error);
          })
      }

      $scope.cancelOrdering = function() {
        courierList();
      }

      function courierList() {
        $scope.isPreloader = true;
        AppService.get('courier/priority', true)
          .success(function(data) {
            $scope.couriers = data;
            $scope.isPreloader = false;
          })
          .error(function(error) {
            AppService.isAuth(error);
            $scope.isPreloader = false;
          })
      }



      $scope.customTab = function(tab) {
        var tabClicked = tab;
        if (tabClicked == 'custom') {
          $scope.best = false;
          $scope.cheapest = false;
          $scope.fastest = false;
          $scope.custom = true;
        } else if (tabClicked == 'best') {
          $scope.best = true;
          $scope.cheapest = false;
          $scope.fastest = false;
          $scope.custom = false;
        } else if (tabClicked == 'cheapest') {
          $scope.best = false;
          $scope.cheapest = true;
          $scope.fastest = false;
          $scope.custom = false;
        } else if (tabClicked == 'fastest') {
          $scope.best = false;
          $scope.cheapest = false;
          $scope.fastest = true;
          $scope.custom = false;
        } else {
          return false;
        }

      }

      $scope.selectedRecommendation = function() {
        $scope.isPreloader = true;
        AppService.get('settings/recommendation', true)
          .success(function(data) {
            $scope.recommendation = data;
            $scope.recommendation_options = data.recommendation_options;
            $scope.recommendBy = data.recommend_by;



            for (var i = 0; i < $scope.recommendation_options.length; i++) {

              if ($scope.recommendation_options[i].id == 3) {
                $scope.isBestRecommendation = true;
                //$scope.updateCheapest = $scope.recommendation_options[i];
              }
              if ($scope.recommendation_options[i].id == 1) {
                $scope.isCheapestRecommendation = true;
              }
              if ($scope.recommendation_options[i].id == 2) {
                $scope.isFastestRecommendation = true;
              }
              if ($scope.recommendation_options[i].id == 4) {
                $scope.isCustomRecommendation = true;
              }

            };

            if ($scope.recommendBy == null) {
              $scope.isPreloader = false;
              return false;
            } else {
              $scope.updateRec = data.recommend_by.id;
            }

            if ($scope.recommendBy.id == 1) {
              $scope.cheapest = true;
              $scope.checkedCheapest = true;
            } else if ($scope.recommendBy.id == 2) {
              $scope.fastest = true;
              $scope.checkedFastest = true;
            } else if ($scope.recommendBy.id == 3) {
              $scope.best = true;
              $scope.checkedBestRated = true;
            } else if ($scope.recommendBy.id == 4) {
              $scope.custom = true;
              $scope.checkedCustom = true;
            } else {
              return false;
            }

            $scope.isPreloader = false;
          })
          .error(function(error) {
            $scope.isPreloader = false;
            AppService.isAuth(error);
          })
      }

      $scope.updateRecommendation = function() {
        $scope.isPreloader = true;
        var data = {
          is_enabled: true,
          recommend_by: $scope.updateRec
        };
        AppService.post('settings/recommendation', true, data)
          .success(function(data) {
            $scope.isPreloader = false;
            $scope.planData = data.data;
            Notify.alert("Courier priority has been setup", {
              status: 'success'
            });
            if (data.onboarding_completed_now) {
              var modalInstance = $uibModal.open({
                animation: true,
                templateUrl: 'thankyoumessage4.html',
                controller: 'bulkReassignController',
                size: 'md',
                backdrop: 'static',
                keyboard: false,
                resolve: {
                  items: function() {
                    return '';
                  }
                }
              });

              $state.go('app.processing');
              return;
            }

            if ($stateParams.redirect_url == 'welcome') {
              $state.go('app.welcome');
              return;
            }

            $state.go($state.current, {}, {
              reload: true
            });

          })
          .error(function(error) {
            AppService.isAuth(error);
            $scope.isPreloader = false;
          })
      }

      // $scope.courierpriorityController = "courierpriorityController";
    }
  }
})();


(function () {
    'use strict';
    angular
    .module('app.shiprocket')
    .controller('invoiceController', invoiceController);

    invoiceController.$inject = ['$rootScope', '$scope', '$timeout', '$state', '$sessionStorage', '$auth', 'appConstant', 'AppService', '$window', '$stateParams', '$localStorage', 'SR_CONSTANTS', 'Notify', '$uibModal', '$location', 'ga_service', 'GoogleAdWordsService'];

    function invoiceController($rootScope, $scope, $timeout, $state, $sessionStorage, $auth, appConstant, AppService, $window, $stateParams, $localStorage, SR_CONSTANTS, Notify, $uibModal, $location, ga_service, GoogleAdWordsService){
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }
        ////////////////
        function activate(user){
            var currentFilters = $location.search();
            $scope.filterModels = {
                courier_id: angular.isDefined(currentFilters.courier_id) ? currentFilters.courier_id : "",
                shipment_status: angular.isDefined(currentFilters.shipment_status) ? currentFilters.shipment_status : ""
            }

            $scope.token = user.token;
            $scope.is_weight_dispute = user.is_weight_dispute;
            $scope.is_statement = user.is_statement;
            $scope.is_autorecharge_upgradable = user.is_autorecharge_upgradable || false;

            var billid = {
                className : 'billid',
                width: $('.billid').outerWidth(),
                tableClass: 'invoice-wrappers'
            }

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;
            $scope.perPage = $stateParams.perPage;
            $scope.sortType = '';
            $scope.sortReverse  = false;
            $scope.isPreloader = true;

            $scope.openUrl = openUrl;
            $scope.parseFl = parseFl;
            $scope.sortTable = sortTable;
            $scope.paginatedData = paginatedData

            function parseFl(num){
              return parseFloat(num)
            }

            function sortTable(type){
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getStatementData();
            }

            function paginatedData(){
                $("th").remove();
                var currentFilters = $location.search();
                currentFilters.perPage = 15;
                currentFilters.page = $scope.page;
                $location.search(currentFilters);
                // getInvoiceData();
            }

            function openUrl(billUrl){
                $window.open(billUrl, '_blank');
            }

            $scope.invoice_url = SR_CONSTANTS.APIBaseUrl + 'account/details/invoice_link?invoice_id='
            getInvoiceData();

            function getInvoiceData(){
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
                var perPage = 15;
                var filters = $location.search();
                if (angular.isDefined(filters.perPage)) {
                  filters.per_page = filters.perPage;
                } else {
                  filters.per_page = 15;
                }
                delete filters.perPage;
                var url = 'account/details/client_invoices';
                AppService.get_with_params(url, filters, true)
                .success(function (data){
                    delete filters.per_page;
                    if(!data.data.length){
                        $scope.isPreloader = false;
                    }
                    $scope.invoices = data.data;
                    $scope.metaData = data.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }

                    AppService.setHeight();
                    $scope.$on('invoices', function(ngRepeatFinishedEvent){
                        AppService.setWidth(billid);
                        $scope.isPreloader = false;
                    });
                })
                .error(function(error){
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            };
        }
    }
})();

;(function () {
    'use strict';
    angular
    .module('app.shiprocket')
    .controller('onHoldReconcilationController', onHoldReconcilationController);

    onHoldReconcilationController.$inject = ['$rootScope', '$scope', 'SR_CONSTANTS', '$uibModal', '$state', 'AppService', 'Notify', '$window', '$stateParams', '$localStorage'];

    function onHoldReconcilationController($rootScope, $scope, SR_CONSTANTS, $uibModal, $state, AppService, Notify, $window, $stateParams, $localStorage) {
        activate();
        ////////////////
        function activate()
        {
            $scope.is_weight_dispute = $localStorage.USER.is_weight_dispute;
            $scope.is_statement = $localStorage.USER.is_statement;
            $scope.is_autorecharge_upgradable = $localStorage.USER.is_autorecharge_upgradable || false;
            var orderdate = {
                className : 'orderdate',
                width: $('.orderdate').outerWidth(),
                tableClass: 'billingChargeDetail'
            }
            var orderid = {
                className : 'orderid',
                width: $('.orderid').outerWidth()
            }
            var statmemtbalance = {
                className : 'statmemtbalance',
                width: $('.statmemtbalance').outerWidth()
            }
            var billid = {
                className : 'billid',
                width: $('.billid').outerWidth()
            }
            var enteredWeight = {
                className : 'entered-weight',
                width: $('.entered-weight').outerWidth()
            }

            var chargedWeight = {
                className : 'charged-weight',
                width: $('.charged-weight').outerWidth()
            }


            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.sortType = '';
            $scope.sortReverse  = false;
            $scope.isPreloader = true;
            $scope.searchText = '';
            $scope.searchStatus = '';

            var date = new Date();
            $scope.currentDate = date;
            $scope.DateFilter =
            {
                'from': '',
                'to': ''
            }

            $scope.sortTable = function(type)
            {
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                onHoldAmountData();
            }

            $scope.itemsPerPage =
            [{value:'15', id:0},
            {value:'30', id:1},
            {value:'60', id:2},
            {value:'100', id:3}
            ]

             if($stateParams.perPage == 30)
            {
                $scope.selectedItems = 1;
            }else if($stateParams.perPage == 60)
            {
                $scope.selectedItems = 2;
            }else if($stateParams.perPage == 100)
            {
                $scope.selectedItems = 3;
            }else
            {
                $scope.selectedItems = 0;
            }

            $scope.paginatedData = function()
            {
                $("th").remove();
                $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
            }

            $scope.changePerPage = function()
            {
                $("th").remove();
                setTimeout(function() {
                    $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value});
                }, 2);
            }

            $scope.openUrl = function(billUrl)
            {
                $window.open(billUrl, '_blank');
            }

            $scope.searchBy = function()
            {
                onHoldAmountData();
            }

            function onHoldAmountData()
            {
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC";
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                AppService.get('account/details/onhold?page='+ $scope.page +'&per_page='+ perPage + '&sort_by=' +$scope.sortType +'&sort=' +sort +'&search='+ $scope.searchText + '&status=' + $scope.searchStatus +'&from='+ $scope.DateFilter.from + '&to=' + $scope.DateFilter.to, true)
                .success(function (res)
                {
                    if(!res.data.length)
                    {
                        $scope.isPreloader = false;
                    }
                    $scope.onHoldDetail = res.data;
                    $scope.metaData = res.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }

                    AppService.setHeight();
                    $scope.$on('onHoldDetail', function(ngRepeatFinishedEvent)
                    {
                        AppService.setWidth(orderdate, orderid, statmemtbalance);
                        $scope.isPreloader = false;
                    })
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            };

            function getSelectedItems(id, isCancel) {
                var awblist = [];
                $("input:checkbox[name=orderId]:checked").each(function() {
                    if (id === 'awb') {
                        awblist.push($(this).data('awb'));
                    }
                });

                if (!awblist.length) {
                    return false;
                }
                if (isCancel) {
                    return awblist;
                }

                var data = {
                    awbs: awblist
                }

                return data;
            }

            //new date picker JS
            var start = moment().subtract(3, 'months');
            var end = moment();
            var user = $localStorage.USER;

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);
            function cb(start, end) {

                $scope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
                $scope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
                onHoldAmountData();
                if(start.format('YYYY-MMM-DD').toString() == '1970-08-17')
                {
                    $('#reportrange span').html('All');
                }
                else
                {
                    $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));

                }

            }
        }
    }
})();

(function () {
    'use strict';
    angular
        .module('app.shiprocket')
        .controller('retryPlanUpgradeController', ['AppService', '$scope', '$uibModal', '$uibModalInstance', 'items', 'Notify', '$localStorage',
            function (AppService, $scope, $uibModal, $uibModalInstance, items, Notify, $localStorage) {
                activate();
                function activate() {

                    $scope.cancel = function () {
                        delete $localStorage.USER.new_plan_id;
                        delete $localStorage.USER.self_upgrade_plan_data;
                        $uibModalInstance.dismiss('cancel');
                        $state.reload();
                    };

                    $scope.retryUpdate = function () {

                        AppService.post('billing/plan/selfupgrade', true, items.self_upgrade_plan_data)
                            .success(function (data) {
                                // $scope.planPrice = data;
                                // $scope.isPreloader = false;
                                setTimeout(function () {
                                    $("body").html(data);
                                    $scope.isPreloader = false;
                                }, 200);
                            })
                            .error(function (error) {
                                AppService.isAuth(error);
                                $scope.isPreloader = false;
                            })
                    }
                }
            }
    ])
})();

(function () {
    'use strict';
    angular.module('app.shiprocket').controller('shiprocketPriceCheckController', shiprocketPriceCheckController);
    shiprocketPriceCheckController.$inject = ['$rootScope', '$scope', '$state', 'AppService', 'Notify', '$compile', 'appConstant', '$localStorage', 'loaderFactory'];
    function shiprocketPriceCheckController($rootScope, $scope, $state, AppService, Notify, $compile, appConstant, $localStorage, loaderFactory) {
        if($localStorage.USER){
          activate();
        }

        function activate()
        {
            var usr = $localStorage.USER;
            var directionsDisplay;
            var directionsService = new google.maps.DirectionsService();
            var map;
            var geocoder;
            var geocoder2;
            var map2;
            var directionsDisplay2;
            var directPath;
            var marker;
            var directCoords;
            var position;
            var gmarkers = [];
            var deliveryCodeArry =[];

            $scope.errorShow = false;
            $scope.courierProviderList = false;
            $scope.performancesExpaned = false;
            $scope.iscod = false;
            $scope.zoneRatePickupCode = usr.primary_pincode;
            $scope.plan_select_error = false;
            $scope.rateCal = {
                pickupCode : usr.primary_pincode,
                deliveryCode : '',
                weight : '',
                declaredValue : '',
                plan_id: undefined
            };
            $scope.dimension={
                l:undefined,
                b:undefined,
                h:undefined
            };
            $scope.volumetric_weight = null;
            $scope.codOption = [
                {  'Name':'No', 'Value': 0 }
            ];

            $scope.isCod={
                selected: $scope.codOption[0]
            };
            $scope.isReturn = '0';
            $scope.rateCalCopy = '';
            $scope.calculateRate = calculateRate;
            $scope.getPincode = getPincode;
            $scope.courierPerformanceDetail = courierPerformanceDetail;
            $scope.initMapDomestic = initMapDomestic;
            $scope.initMapInternational = initMapInternational;
            $scope.changeLocation = changeLocation;
            $scope.calculated_volumetric_weight = calculated_volumetric_weight;
            $scope.changeShipmentType = changeShipmentType;
            $scope.downloadZoneSheet = downloadZoneSheet;

            function downloadZoneSheet () {
              loaderFactory.display('Creating your Zone Servicebility Sheet')
              AppService.get('export/pincode_sheet/'+$scope.zoneRatePickupCode, true)
              .success(function(res){
                Notify.alert(res.message, {status: 'success', timeout: 5000 })
                loaderFactory.hide();
              })
              .error(function(err){
                Notify.alert(err.message, {status: 'danger', timeout: 5000 })
                loaderFactory.hide();
              })
            }

            function changeShipmentType (returnStatus) {
              $scope.isReturn = returnStatus;
              $rootScope.sub_menu = returnStatus == 1 ? 'returns' : 'forward'
            }
            //intercom event
            if($state.current.name == 'app.rateCalculator'){
              $scope.tab_active = 0;
            }
            else if($state.current.name == 'app.rateCalculator-international'){
              $scope.tab_active = 1;
            }

            if(usr){
              $scope.isNonInternationalPlan = _.indexOf(appConstant.internationalPlans, usr.plan_id) == -1;
            }

            AppService.intercomEventAndPing('Clicked Calculator');

            function changeLocation(state){
              $state.go(state, {}, {notify: true})
            };

            function initMapDomestic() {
                geocoder = new google.maps.Geocoder();
                directionsDisplay = new google.maps.DirectionsRenderer();
                var delhi = new google.maps.LatLng(28.6315, 77.2167);
                var mapOptions = {
                    zoom: 10,
                    center: delhi
                };
                map = new google.maps.Map(document.getElementById('map-domestic'), mapOptions);
                directionsDisplay.setMap(map);
                setTimeout(function(){
                    google.maps.event.trigger(map, 'resize');
                }, 50);
            };

            function initMapInternational() {
                geocoder2 = new google.maps.Geocoder();
                directionsDisplay2 = new google.maps.DirectionsRenderer();
                var ind = new google.maps.LatLng({lat: 20.59, lng: 78.96});
                var mapOptions2 = {
                    zoom: 4,
                    center: ind
                };
                setTimeout(function(){
                    google.maps.event.trigger(map2, 'resize');
                }, 50);
                map2 = new google.maps.Map(document.getElementById('map-international'), mapOptions2);
                directionsDisplay2.setMap(map2);

            };

            function calculateRate(isInternational, form) {
                var has_error = false;
                if(isInternational){
                    if(form.$invalid){
                        has_error = true;
                    }
                }

                if ($scope.rateCal.weight == undefined || $scope.rateCal.weight == undefined) {
                    Notify.alert("Weight should be positive and maximum till 3 decimal places");
                    return false;
                }
                var no_of_ones = 0;
                if ($scope.dimension.l < 0.5) {
                    no_of_ones++;
                }
                if ($scope.dimension.b < 0.5) {
                    no_of_ones++;
                }
                if ($scope.dimension.h < 0.5) {
                    no_of_ones++;
                }
                if (no_of_ones >= 1) {
                    Notify.alert("Dimension should be greater than 0.5 x 0.5 x 0.5.");
                    return false;
                }
                else{no_of_ones = 0;}

                if(has_error){
                    return;
                }
                var url = '';
                $scope.rateCalCopy = angular.copy($scope.rateCal);
                $scope.volumetric_weight_copy = angular.copy($scope.volumetric_weight);
                $('.cal-rate-btn').attr('disabled',true);

                AppService.intercomEventAndPing('Clicked Calculate');

                function removeMarkers(){
                    for(var i=0; i<gmarkers.length; i++)
                    {
                        gmarkers[i].setMap(null);
                    }
                }

                if (typeof(directPath) != 'undefined')
                {
                    directPath.setMap(null);
                    directCoords = [];
                    position = null;
                    removeMarkers();
                    gmarkers = [];
                }
                if(!$scope.rateCalCopy.declaredValue){
                    $scope.rateCalCopy.declaredValue = '0';
                }
                if($scope.volumetric_weight && $scope.volumetric_weight > 0){
                    var lxbxh = '&length=' + $scope.dimension.l + '&breadth=' + $scope.dimension.b + '&height=' + $scope.dimension.h;
                }

                if($scope.rateCalCopy.declaredValue == ''){
                    $scope.rateCalCopy.declaredValue = 0;
                }
                if($scope.volumetric_weight && $scope.volumetric_weight > 0){
                    var lxbxh = '&length=' + $scope.dimension.l + '&breadth=' + $scope.dimension.b + '&height=' + $scope.dimension.h;
                }

                if($scope.rateCalCopy.declaredValue == ''){
                    $scope.rateCalCopy.declaredValue = 0;
                }
                if($scope.volumetric_weight && $scope.volumetric_weight > 0){
                    var lxbxh = '&length=' + $scope.dimension.l + '&breadth=' + $scope.dimension.b + '&height=' + $scope.dimension.h;
                }

                $('.validation-alert').remove();
                $('.message').remove();
                if(isInternational){
                    url = 'courier/international/serviceability?delivery_country='+$scope.rateCal.delivery_country.iso_code_2+'&weight='+$scope.rateCal.weight+'&cod=0&courier_ship_type=0'+(($scope.volumetric_weight && $scope.volumetric_weight > 0)? lxbxh:'') +'&pickup_postcode=' +$scope.rateCal.pickupCode + '&is_international=1';
                }else{
                    url = 'courier/serviceability?pickup_postcode='+$scope.rateCal.pickupCode+'&delivery_postcode='+$scope.rateCal.deliveryCode +(($scope.volumetric_weight && $scope.volumetric_weight > 0)? lxbxh:'') +'&weight='+ $scope.rateCal.weight+'&cod='+ $scope.isCod.selected.Value +'&declared_value='+ $scope.rateCalCopy.declaredValue +'&rate_calculator=1&is_return=' + ($scope.isReturn - 0);
                }

                AppService.get(url , true)
                .success(function(data)
                {
                    isInternational? internationalRateCalculator(data):  domesticRateCalculator(data);
                })
                .error(function(error)
                {
                    $('.cal-rate-btn').attr('disabled',false);
                    $scope.isPreloader = false;
                    if(error.status_code == 422)
                    {
                        AppService.alertValidation(error.errors);
                    }
                    else
                    {
                         AppService.isAuth(error);
                    }

                })
            };

            function internationalRateCalculator(data) {
                var today = new Date();
                var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
                var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
                AppService.get('settings/company', true)
                    .success(function(data) {
                        var actual_pin_code = data.data.shipping_pin_code;
                        ga('set', 'metric1', actual_pin_code);
                        ga('set', 'metric2', "India");
                        ga('set', 'metric3', $scope.rateCal.delivery_country.name);
                        ga('send', 'event', {
                            eventCategory: 'international_calculator_pin_codes',
                            eventAction: 'international_calculate_clicked',
                            eventLabel: $localStorage.USER.email + "::" + date + "::" + time
                        });
                    })
                    .error(function(error) {

                    });

                var start = 'India';
                var end = $scope.rateCal.delivery_country.name;
                var request = {
                    origin: start,
                    destination: end,
                    travelMode: 'TRANSIT'
                };
                $('.cal-rate-btn').attr('disabled',false);

                if(data.status == 404)
                {
                    Notify.alert(data.message);
                }
                else if(data.status == 200)
                {
                    $scope.form.international_form.$setPristine();
                    $scope.courierProviderList = true;
                    $scope.courierList = data.data.available_courier_companies;
                    geocoder2.geocode({'address': start}, function(results, status) {
                        if (status === 'OK') {
                            var startPoint = results[0].geometry.location;
                            geocoder2.geocode({'address': end}, function(results, status) {
                                if (status === 'OK') {
                                    var endPoint = results[0].geometry.location;
                                    directCoords = [
                                        {lat: startPoint.lat(), lng: startPoint.lng()},
                                        {lat: endPoint.lat(), lng: endPoint.lng()}
                                    ];
                                    directPath = new google.maps.Polyline({
                                        path: directCoords,
                                        strokeColor: '#FF0000',
                                        strokeOpacity: 0.5,
                                        strokeWeight: 2
                                    });

                                    var latlngbounds = new google.maps.LatLngBounds();
                                    for (var i = 0; i < directCoords.length; i++) {
                                        latlngbounds.extend(directCoords[i]);
                                        position = new google.maps.LatLng(directCoords[i].lat, directCoords[i].lng);
                                        marker = new google.maps.Marker({
                                            position: position,
                                            map: map2,
                                            animation: google.maps.Animation.DROP
                                        });
                                        gmarkers.push(marker);
                                    }

                                    directPath.setMap(map2);
                                    map2.fitBounds(latlngbounds);
                                } else {
                                    console.log('Geocoder failed due to: ' + status);
                                }
                            });
                        } else {
                            console.log('Geocoder failed due to: ' + status);
                        }
                    });
                }
            };

            function domesticRateCalculator(data) {
                var today = new Date();
                var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();
                var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();
                AppService.get('settings/company', true)
                    .success(function(data) {
                        var actual_pin_code = data.data.shipping_pin_code;
                        ga('set', 'metric1', actual_pin_code);
                        ga('set', 'metric2', $scope.rateCal.pickupCode);
                        ga('set', 'metric3', $scope.rateCal.deliveryCode);
                        ga('send', 'event', {
                            eventCategory: 'Calculator_pin_codes',
                            eventAction: 'calculate_clicked',
                            eventLabel: $localStorage.USER.email + "::" + date + "::" + time
                        });
                    })
                    .error(function(error) {

                    });

                var start = $scope.rateCal.pickupCode + ', India';
                var end = $scope.rateCal.deliveryCode + ', India';
                var request = {
                    origin: start,
                    destination: end,
                    travelMode: 'DRIVING'
                };
                $('.cal-rate-btn').attr('disabled',false);

                if(data.status == 404)
                {
                    Notify.alert(data.message);
                }
                else if(data.status == 200)
                {
                    $scope.courierProviderList = true;
                    $scope.courierList = data.data.available_courier_companies;

                    $scope.surfaceMode = angular.copy(data.data.available_courier_companies);
                    $scope.airMode = _.remove($scope.surfaceMode , function(ob){
                        return ob.is_surface == false;
                    });

                    if ($scope.rateCal.pickupCode && $scope.rateCal.deliveryCode)
                    {
                        directionsService.route(request, function(response, status) {
                            if (status == google.maps.DirectionsStatus.OK) {
                                var startPoint = response.routes[0].legs[0].start_location;
                                var endPoint = response.routes[0].legs[0].end_location;
                                directCoords = [
                                    {lat: startPoint.lat(), lng: startPoint.lng()},
                                    {lat: endPoint.lat(), lng: endPoint.lng()}
                                ];
                                directPath = new google.maps.Polyline({
                                    path: directCoords,
                                    geodesic: true,
                                    strokeColor: '#FF0000',
                                    strokeOpacity: 0.5,
                                    strokeWeight: 2
                                });

                                var latlngbounds = new google.maps.LatLngBounds();
                                for (var i = 0; i < directCoords.length; i++) {
                                    latlngbounds.extend(directCoords[i]);
                                    position = new google.maps.LatLng(directCoords[i].lat, directCoords[i].lng);
                                    marker = new google.maps.Marker({
                                        position: position,
                                        map: map,
                                        animation: google.maps.Animation.DROP
                                    });
                                    gmarkers.push(marker);
                                }

                                directPath.setMap(map);
                                map.fitBounds(latlngbounds);
                            } else {
                                console.log("Directions Request failed: " + status);
                            }
                        });
                    }
                }


            }
            function getPincode(pincode_for, $event) {
                //Initialize Cod Option
                $scope.codOption =
                [
                    {
                        'Name':'No',
                        'Value': 0
                    },
                ]

                $scope.isCod.selected =$scope.codOption[0];

                var target = angular.element($event.currentTarget);
                $('.message').remove();
                if(target.val().length < 1 && target.val() == '')
                {
                    return false;
                }
                if(target.val().length <6 )
                {
                    target.parent().find('.message').remove();
                    var message =  '<div class="message validation-alert">Enter Valid Postcode</div>'
                    target.parent().after(message);
                    return false;
                }

                if(pincode_for == 'pickup')
                {
                    var url = 'courier/pickup/'+ $scope.rateCal.pickupCode + '?is_return=' + $scope.isReturn;
                }
                else if(pincode_for == 'delivery')
                {
                    var url = 'courier/delivery/'+ $scope.rateCal.deliveryCode + '?is_return=' + $scope.isReturn;
                    if(deliveryCodeArry.length)
                    {
                        url += '&pickup_couriers[]='+ deliveryCodeArry[0]
                    }
                    for (var i = 1; i < deliveryCodeArry.length; i++)
                    {
                        url +='&pickup_couriers[]='+ deliveryCodeArry[i]
                    }
                }
                else
                {
                    return true;
                }

                AppService.get(url , true)
                .success(function(data)
                {
                    $('.message').remove();
                    if(pincode_for == 'delivery')
                    {
                        $scope.deliverycourierList = data.data;
                        var length = $scope.deliverycourierList.length;
                        for (var i = 0; i < length; i++)
                        {
                            if($scope.deliverycourierList[i].cod === 1)
                            {
                                var codOptionObject =
                                {
                                    'Name': 'Yes',
                                    'Value': 1
                                }
                                $scope.codOption.push(codOptionObject);
                                break;
                            }
                        }
                    }
                    else
                    {
                        var data = data.data;
                        for (var i = 0; i < data.length; i++)
                        {
                            deliveryCodeArry.push(data[i].courier_company_id)
                        }
                    }
                    if(pincode_for == 'pickup')
                    {
                        $scope.pickupServiceableStatus ='fa-check-circle text-success';
                    }
                    else{}

                    if(pincode_for == 'delivery')
                    {
                            $scope.DeliveryServiceableStatus ='fa-check-circle text-success';
                    }
                    else{}
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                     if(error.status_code == 404)
                    {
                        if(pincode_for == 'pickup')
                        {
                        $scope.pickupServiceableStatus ='fa-times-circle text-danger';
                        }
                        else{}

                        if(pincode_for == 'delivery')
                        {
                            $scope.DeliveryServiceableStatus ='fa-times-circle text-danger';
                        }
                        else{}
                    }
                    else
                    {
                        AppService.isAuth(error);
                    }
                })
            }

            function courierPerformanceDetail(courier_id, $event, isInternational, rating) {
                if(!rating || rating <= 0)
                {
                    return;
                }
                var target = angular.element($event.currentTarget);
                if(target.closest('.courier-detail-wrapper').next('tr').hasClass('courier-performance-wrapper'))
                {
                    target.closest('.courier-detail-wrapper').find('.table-arrow').removeClass('icon-arrow-down').addClass('icon-arrow-right');
                    $('.courier-performance-wrapper').remove();
                    $scope.performancesExpaned = false;
                    return false;
                }
                $scope.isPreloader = true;
                var url = '';
                var data = {}
                if(isInternational){
                    url = 'courier/rating/courier/IN/'+ $scope.rateCal.delivery_country.iso_code_2 + "/" + courier_id
                }else{
                    url = 'courier/rating/courier/'+ $scope.rateCal.pickupCode +"/"+ $scope.rateCal.deliveryCode+ "/" + courier_id
                    data.cod = $scope.isCod.selected.Value;
                }


                AppService.get_with_params(url, data, true)
                .success(function(data){
                    var ratings = data.ratings;
                    var performances = data.performances;
                    var totalKeys = Object.keys(ratings);
                    var totalKeysPerformance = Object.keys(performances);
                    var performancesKeys = Object.keys(performances);
                    $scope.isPreloader = false;
                    var message =  '<tr class ="courier-performance-wrapper">'+
                                        '<td colspan="4" class="bg-gray"><h5 class="mt0 mb-sm">Performance Rating</h5>' +
                                             '<div class="table-responsive b bb0"> ' +
                                                '<table class="table table-striped table-bordered">' +
                                                    '<thead>'+
                                                        '<tr>'+
                                                            '<td width="40%"><strong>Parameters</strong></td>'+
                                                            '<td class="text-center" width="30%"><strong>SLA Performance</strong></td>'+
                                                            '<td class="text-center"><strong>Rating</strong></td>'+
                                                        '</tr>'+
                                                    '</thead>'+
                                                    '<tbody>'
                                                    var length = totalKeysPerformance.length;
                                                    for(var i = 0; i< length; i++ )
                                                    {
                                                        var rating = data.performances[totalKeysPerformance[i]].split("%");
                                                        rating = parseFloat(rating[0]);

                                                        message += '<tr>'+
                                                                    '<td class="text-capitalize">'+ totalKeys[i].replace((/_/g), " ") + '</td>'+
                                                                    '<td  class="text-center" width="30%">'+ rating +'%</td>'

                                                                    if(rating <= 0)
                                                                    {
                                                                        message +=  '<td class="pt-sm text-center">N/A</td>'
                                                                    }
                                                                    else{

                                                                        message +=  '<td class="pt-sm text-center">'+
                                                                                        '<div class="ratings">'+
                                                                                            '<div class="empty-stars"></div>'+
                                                                                            '<div class="full-stars" style="width:'+ data.ratings[totalKeys[i]]  +'"></div>'+
                                                                                        '</div>'+
                                                                                    '</td>'

                                                                    }

                                                            message +=  '</tr>'
                                                    }
                                                   message += '</tbody>'+
                                                '</table>'+
                                           ' </div>'+
                                           ' </div>'+
                                        '</td>'+
                                    '</tr>'
                        $('.table-arrow').removeClass('icon-arrow-down').addClass('icon-arrow-right');
                    $('.courier-detail-wrapper').slideDown("slow", function() { $('.courier-performance-wrapper').remove();});
                    target.closest('.courier-detail-wrapper').find('.table-arrow').removeClass('icon-arrow-right').addClass('icon-arrow-down');
                    target.closest('.courier-detail-wrapper').after(message);
                    $scope.performancesExpaned = true;
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                })
            };

            function calculated_volumetric_weight(){
                if($scope.dimension.l && $scope.dimension.b && $scope.dimension.h)
                {
                    $scope.errorShow = false;
                }
                else
                {
                  $scope.errorShow = true;
                }
                $scope.volumetric_weight = Number($scope.dimension.l) * Number($scope.dimension.b) * Number($scope.dimension.h) / 5000;
            };
        }

        if($state.current.name === 'app.rateCalculator-international')
        {
            $scope.form={
                international_form: {}
            };
            AppService.get('countries', true)
                .success(function(data)
                {
                    $scope.isPreloader = false;
                    $scope.shippingCountryList = data.data;
                })
                .error(function(error)
                {
                    AppService.isAuth(error);
                    $scope.isPreloader = false;
                });

        }
    }
})();

(function () {
	'use strict';
	angular
		.module('app.shiprocket')
		.controller('shopifyWebhookController', shopifyWebhookController);

	shopifyWebhookController.$inject = ['$rootScope', '$state', '$scope', 'AppService', '$location', '$window', '$uibModal', '$localStorage', '$stateParams', '$compile'];

	function shopifyWebhookController($rootScope, $state, $scope, AppService, $location, $window, $uibModal, $localStorage, $stateParams, $compile) {
		activate();

		function activate() {
			let url = new URL($location.absUrl());
			let ids = url.searchParams.getAll("ids[]");
			console.log(ids);

			let api_url = 'webhook/shopify';
			$scope.data = {
				order_id: ids
			};

			AppService.post(api_url, true, $scope.data)
				.success(function (data) {
					console.log(data);
				})
				.error(function (error) {
					console.log(error);
					// AppService.isAuth(error);
				});
			
			let modalInstance = $uibModal.open({
				animation: true,
				templateUrl: 'shopifyWebhook.html',
				scope: $scope,
				size: 'sm',
				backdrop  : 'static',
				resolve: {
					items: function() {
						return data;
					}
				}
				});
		}
	}
})();

(function () {
    'use strict';
    angular
    .module('app.shiprocket')
    .controller('statementController', statementController);

    statementController.$inject = ['$rootScope', '$scope', '$state', '$sessionStorage', '$auth', 'appConstant', 'AppService', '$window', '$stateParams', '$localStorage', 'SR_CONSTANTS', 'Notify', '$uibModal', '$location', 'ga_service', 'GoogleAdWordsService', '$document'];

    function statementController($rootScope, $scope, $state, $sessionStorage, $auth, appConstant, AppService, $window, $stateParams, $localStorage, SR_CONSTANTS, Notify, $uibModal, $location, ga_service, GoogleAdWordsService, $document){
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }
        ////////////////
        function activate(user){
            $scope.is_weight_dispute = user.is_weight_dispute;
            $scope.is_statement = user.is_statement;
            $scope.is_autorecharge_upgradable = user.is_autorecharge_upgradable || false;

            var currentFilters = $location.search();
            $scope.filterModels = {
              to: angular.isDefined(currentFilters.to) ? currentFilters.to : "",
              from: angular.isDefined(currentFilters.from) ? currentFilters.from : "",
              courier_id: angular.isDefined(currentFilters.courier_id) ? currentFilters.courier_id : "",
              shipment_status: angular.isDefined(currentFilters.shipment_status) ? currentFilters.shipment_status : ""
            }

            var orderdate = {
                className : 'orderdate',
                width: $('.orderdate').outerWidth(),
                tableClass: 'statement-wrappers'
            }
            var billid = {
                className : 'billid',
                width: $('.billid').outerWidth()
            }

            var description = {
                className : 'description',
                width: $('.description').outerWidth()

            }
            var statementbalance = {
                className : 'statementbalance',
                width: $('.statementbalance').outerWidth()

            }

            $scope.filterModels = {
              courier_id : $stateParams.courier_id ? $stateParams.courier_id : '',
              shipment_status : $stateParams.shipment_status ? $stateParams.shipment_status : '',
              from : $stateParams.from ? $stateParams.from : '',
              to : $stateParams.to ? $stateParams.to : ''
            }

            $scope.maxSize = 2;
            $scope.sortType = '';
            $scope.searchText = '';
            $scope.isPreloader = true;
            $scope.sortReverse  = false;
            $scope.totalItems = 10000000;
            $scope.page = $stateParams.page;

            $scope.cancel = cancel;
            $scope.openUrl = openUrl;
            $scope.searchBy = searchBy;
            $scope.sortTable = sortTable;
            $scope.exportData = exportData;
            $scope.changePerPage = changePerPage;
            $scope.paginatedData = paginatedData;
            $scope.getStatementData = getStatementData;

            function sortTable(type){
              $scope.sortType = type;
              $scope.sortReverse = !$scope.sortReverse;
              getStatementData();
            }

            $scope.itemsPerPage = [
              {value:'15', id:0},
              {value:'30', id:1},
              {value:'60', id:2},
              {value:'100', id:3}
            ]

            if($stateParams.perPage == 30){
                $scope.selectedItems = 1;
            }
            else if($stateParams.perPage == 60){
                $scope.selectedItems = 2;
            }
            else if($stateParams.perPage == 100){
                $scope.selectedItems = 3;
            }
            else {
                $scope.selectedItems = 0;
            }

            function getFiltersData(){
                AppService.get('orders/manifestfilters', true)
                .success(function(data) {
                    $scope.courier_filter_data = data.shippingPartners;
                    $scope.shipment_filter_data = data.shipment_status;
                })
                .error(function(error) {
                    AppService.isAuth(error, 'danger');
                });
            }

            function paginatedData(){
              $scope.isPreloader = true;
              var currentFilters = $location.search();
              currentFilters.page = $scope.page;
              currentFilters.per_page = $scope.itemsPerPage[$scope.selectedItems].value;
              $state.go('.', currentFilters, {notify: false})
              getFilteredData(currentFilters)
            }

            $document.on("click", function(){
              $('.popover').hide();
            });

            function changePerPage(){
              $scope.isPreloader = true;
              var currentFilters = $location.search();
              currentFilters.page = $scope.page;
              currentFilters.per_page = $scope.itemsPerPage[$scope.selectedItems].value;
              $state.go('.', currentFilters, {notify: false, reload: false})
              getFilteredData(currentFilters)
            }

            function openUrl(billUrl){
              $window.open(billUrl, '_blank');
            }

            $document.on("click", function(){
              $('.popover').hide();
            });

            function searchBy(event){
                if(event){
                  switch (event.keyCode) {
                    case 13:
                      getStatementData();
                      break;
                    case 8:
                      return;
                      break;
                  }
                } else {
                  getStatementData();
                }
            }

            function cancel(){
              $uibModalInstance.dismiss('cancel');
              $state.reload();
            }


            function exportData(){
              var filters = $location.search();
              var url = 'account/details/awb_billing?export=1&search='+ $scope.searchText;

              AppService.get_with_params(url,filters, true)
                  .then(function(res){
                      if(res.data.status == 200){
                          Notify.alert(res.data.message,  {status: 'success', timeout: 7000 });
                      } else {
                          Notify.alert(res.data.message,  {status: 'danger', timeout: 7000 });
                      }
                  })
            }

            function getBillingSummary(){
              AppService.get('account/details/billing_summary')
              .then(function(res){
                $scope.billing_summary = res.data.data;
              });
            }

            getFiltersData();
            getStatementData();
            getBillingSummary();

            function getFilteredData (filters) {
              $('.popover').hide();
              var url = 'account/details/awb_billing?search=' + $scope.searchText;
              // delete filters.perPage;
              AppService.get_with_params(url,filters, true)
              .success(function (data){
                  if(!data.data.length){
                      $scope.isPreloader = false;
                  }
                  $scope.statement = data.data;
                  $scope.metaData = data.meta.pagination
                  $scope.totalItems = $scope.metaData.total;
                  $scope.totalCount = $scope.metaData.count;
                  $scope.showingOrderNo =
                  {
                      from: $scope.totalItems == 0 ? 0: ($scope.page-1)* filters.per_page  +1,
                      to: Math.min($scope.totalItems, $scope.page*filters.per_page  )
                  }

                  AppService.setHeight();
                  $scope.$on('statement', function(ngRepeatFinishedEvent){
                      AppService.setWidth(orderdate, billid, description, statementbalance);
                      $scope.isPreloader = false;
                  });
              })
              .error(function(error){
                  $scope.isPreloader = false;
                  AppService.isAuth(error);
              })
            }

            function getStatementData(){
              $scope.isPreloader = true;
              var sort = $scope.sortReverse === true ? "ASC": "DESC" ;
              var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
              var filters = $location.search();
              if(angular.isDefined(filters.perPage)){
                  filters.per_page = filters.perPage;
              }else{
                  filters.per_page = 15;
              }
              getFilteredData(filters)
            };
        }
    }
})();

(function() {
  'use strict';
  angular.module('app.shiprocket').controller('transactionLogsController', TransactionLogsController);

  TransactionLogsController.$inject = ['$rootScope', '$uibModal','$scope', '$state', '$location', 'AppService', '$window', '$localStorage', 'SR_CONSTANTS','$stateParams'];

  function TransactionLogsController($rootScope, $uibModal, $scope, $state, $location, AppService, $window, $localStorage, SR_CONSTANTS, $stateParams) {
    var user = $localStorage.USER;
    if(user){
      activate(user);
    }

    function activate(user) {
      $scope.is_weight_dispute = user.is_weight_dispute;
      $scope.is_statement = user.is_statement;
      $scope.is_autorecharge_upgradable = user.is_autorecharge_upgradable || false;

      var billid = {
        className: 'billid',
        width: $('.billid').outerWidth(),
        tableClass: 'transaction-logs-wrappers'
      }

      var searchParams = angular.copy($location.search());

      $scope.maxSize = 2;
      $scope.totalItems = 10000000;
      $scope.page = searchParams.page;

      $scope.sortType = '';
      $scope.sortReverse = false;
      $scope.isPreloader = true;
      $scope.searchText = searchParams.searchText ? searchParams.searchText : '';

      var date = new Date();
      $scope.currentDate = date;
      $scope.DateFilter = {
        from: searchParams.date_from ? searchParams.date_from : '',
        to: searchParams.date_to ? searchParams.date_to : ''
      }

      $scope.itemsPerPage = [
        {value: '15',id: 0},
        {value: '30',id: 1},
        {value: '60',id: 2},
        {value: '100',id: 3}
      ]

      if (searchParams.perPage == 30) {
        $scope.selectedItems = 1;
      } else if (searchParams.perPage == 60) {
        $scope.selectedItems = 2;
      } else if (searchParams.perPage == 100) {
        $scope.selectedItems = 3;
      } else {
        $scope.selectedItems = 0;
      }

      //functions
      $scope.sortTable = sortTable;
      $scope.exportAwbs = exportAwbs;
      $scope.showDetails = showDetails;
      $scope.paginatedData = paginatedData;
      $scope.changePerPage = changePerPage;

      function sortTable(type) {
        $scope.sortType = type;
        $scope.sortReverse = !$scope.sortReverse;
        getTransactionLogs();
      }


      function paginatedData() {
        $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value},{notify: false});
        getTransactionLogs();
      }


      function changePerPage() {
        $state.go('.', {page: $scope.page, perPage: $scope.itemsPerPage[$scope.selectedItems].value},{notify: false});
        getTransactionLogs();
      }

      getRemittanceSummary();

      function getRemittanceSummary() {
        AppService.get(SR_CONSTANTS.api_urls.remittance_summary, true)
        .then(function(res) {
          $scope.remittance_summary = res.data.cod_payble;
        })
      }

      function showDetails(crfId, isReversal) {
        var url = "account/details/remittance/" + crfId + "/awbs";
        var exporturl = "account/details/remittance/" + crfId + "/export";
        var templateUrl = isReversal ? 'reversalDetails.html' : 'showAwbsCrfId.html';
        if(isReversal){
          url += '/reversal';
          exporturl += '?reversal=1'
        }
        var payload = {
          crf_id: crfId,
          export_url: exporturl,
        }
        AppService.get(url,true)
        .then(function(res){
          payload.data = res.data;
          var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: templateUrl,
            controller: 'remittanceDetailsController',
            size: 'lg',
            resolve: {
              items: function() {
                return payload;
              }
            }
          });
        })
        .catch(function(err){
          AppService.isAuth(err)
        })
      }

      function exportAwbs(crfId) {
        var url = "account/details/remittance/" + crfId + "/export";
        AppService.get(url, true)
        .then(function(res) {
          AppService.downloadDataWithUrl(res.data.download_url, crfId);
          return res.data.download_url;
        })
        .catch(function(err){
          AppService.isAuth(err);
        })
      }

      //new date picker JS
      var start = searchParams.date_from ? moment(searchParams.date_from, 'YYYY-MMM-DD') : moment().subtract(3, 'month');
      var end = searchParams.date_to ? moment(searchParams.date_to, 'YYYY-MMM-DD') : moment();

      $('#reportrange').daterangepicker({
        startDate: start,
        endDate: end,
        ranges: {
          'All': [moment(user.created_at.date), moment()],
          'Today': [moment(), moment()],
          'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
          'Last 7 Days': [moment().subtract(6, 'days'), moment()],
          'Last 30 Days': [moment().subtract(29, 'days'), moment()],
          'This Month': [moment().startOf('month'), moment().endOf('month')],
          'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
        }
      }, cb);
      cb(start, end);

      function cb(start, end) {
        $scope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
        $scope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
        getTransactionLogs();
        if (start.format('YYYY-MMM-DD').toString() == '1970-08-17') {
          $('#reportrange span').html('All');
        } else {
          $('#reportrange span').html(start.format('MMM D, YYYY') + ' - ' + end.format('MMM D, YYYY'));

        }
      }

      function getTransactionLogs() {
        $scope.isPreloader = true;
        var sort = $scope.sortReverse === true ? "ASC" : "DESC";
        var perPage = $scope.itemsPerPage[$scope.selectedItems].value;

        AppService.get('account/details/remittance?page=' + $scope.page + '&per_page=' + perPage + '&from=' + $scope.DateFilter.from + '&to=' + $scope.DateFilter.to, true)
          .success(function(data) {
            $scope.isPreloader = false;
            $scope.transaction_logs = data.data;
            $scope.metaData = data.meta.pagination
            $scope.totalItems = $scope.metaData.total;
            $scope.showingOrderNo = {
              from: $scope.totalItems == 0 ? 0 : ($scope.page - 1) * perPage + 1,
              to: Math.min($scope.totalItems, $scope.page * perPage)
            }
            AppService.setHeight();

            $scope.$on('transactionLogs', function(ngRepeatFinishedEvent) {
              AppService.setWidth(billid);
              $scope.isPreloader = false;
            });
          })
          .error(function(error) {
            $scope.isPreloader = false;
            AppService.isAuth(error);
          })
      };
    }
  }
})();

(function () {
    'use strict';
    angular
        .module('app.shiprocket')
        .controller('updatePlanController', ['AppService', '$scope', '$uibModal', '$uibModalInstance', 'items', 'Notify', '$sessionStorage' , '$localStorage' , '$sce', '$state', '$cookies', 'ga_service',
            function (AppService, $scope, $uibModal, $uibModalInstance, items, Notify, $sessionStorage, $localStorage,$sce, $state, $cookies, ga_service)
        {
            var selectedPlanId = undefined;
            activate();
            function activate()
            {
                var utmValue = $cookies.getObject('UTM');
            	var data =
                {
                	plan_id:items.id
                };

                if(utmValue)
                {
                    data.utm_source = utmValue.utm_source;
                    data.utm_campaign = utmValue.utm_campaign;
                    data.utm_content = utmValue.utm_content;
                    data.utm_medium = utmValue.utm_medium;
                    data.utm_term = utmValue.utm_term;
                    data.gclid = utmValue.gclid;
                }
                $scope.activePlanID = items.is_active;
                $scope.planName = items.planName;
                $scope.planId = items.id;
                $scope.plans = items.plans;
                $scope.selectedPlanData = 0;
                $scope.user = $localStorage.USER;

            	$scope.close = function()
                {
                    $uibModalInstance.dismiss('cancel');
                }

                $scope.activatePlan = function()
                {
                	$scope.isPreloader = true;
                  AppService.intercomEventAndPing('clicked upgrade');
                	AppService.post('settings/plans/upgrade', true, data)
	                .success(function (data)
	                {
	                    $scope.planData = data.data;
	                    $uibModalInstance.dismiss('cancel');
	                    if($scope.planId > $scope.activePlanID)
	                    {
	                    	var actiontaken = {text: 'upgrade', text2: 'upgrading'};
	                    }
	                    else
	                    {
	                    	var actiontaken = {text: 'downgrade', text2: 'downgrading'};
	                    }

	                    Notify.alert("Your request to "+ actiontaken.text +" plan has been taken. You will soon be contacted by our sales team who will assist you in "+actiontaken.text2+" the plan.");

	                })
	                .error(function(error)
	                {
	                    AppService.isAuth(error);
	                    $scope.isPreloader = false;
	                })
                }

                $scope.selfUpdatePlan = function(planId, planName)
                {
                    var id = planId;
                    selectedPlanId = planId;

                    $scope.formatPlanDropdownValue = $sce.trustAsHtml("");

                    if(id == undefined || id == null)
                    {
                        var data =
                        {
                            "plan_ids":[$scope.planId]
                        }
                    }
                    else
                    {
                       $scope.planName = planName;
                       $scope.selectedPlanId = id;
                        var data =
                        {
                            "plan_ids":[id]
                        }
                    }

                    AppService.intercomEventAndPing('clicked Self Upgrade Plan');
                    $scope.isPreloader = true;
                    AppService.get('billing/plan/prices/?plan_ids[]='+ data.plan_ids, true)
                    .success(function (data)
                    {
                        $scope.planPrice = data;
                        $scope.prices = $scope.planPrice[0].prices;
                        $scope.isPreloader = false;
                        $scope.selectedPlanData = "0";
                        $scope.formatPlanDropdown(0);
                        // Notify.alert("Your request to "+ actiontaken.text +" plan has been taken. You will soon be contacted by our sales team who will assist you in "+actiontaken.text2+" the plan.");

                    })
                    .error(function(error)
                    {
                        AppService.isAuth(error);
                        $scope.isPreloader = false;
                    })
                };

                $scope.cancel = function ()
                {
                   $uibModalInstance.dismiss('cancel');
                };

                $scope.planUpdate = function (){
                    var data = {
                        whmcs_product_id : $scope.planPrice[0].whmcs_product_id,
                        billing_cycle : $scope.prices[$scope.selectedPlanData].billing_cycle
                    };

                    $localStorage.USER.self_upgrade_plan_data = data;

                    if(angular.isDefined($cookies.getObject('UTM'))){
                        data = _.merge(data, $cookies.getObject('UTM'));
                    }
                    ga_service.send('Recharge', 'Clicked on pay - plan upgrade pop up')

                    AppService.post('billing/plan/selfupgrade', true, data)
                    .success(function (data)
                    {
                        $localStorage.USER.new_plan_id = selectedPlanId ? selectedPlanId:items.id;

                        setTimeout(function(){
                         $("body").html(data);
                         $scope.isPreloader = false;
                        }, 200);
                    })
                    .error(function(error)
                    {
                        AppService.isAuth(error);
                        $scope.isPreloader = false;
                        if(error.message == "Company city, state, phone is empty, please fill these details in company page"){
                            $state.go('app.companyAddressDetails');
                            $uibModalInstance.dismiss('cancel');
                        }
                    })
                }

            }
            $scope.formatPlanDropdownValue="";
            $scope.formatPlanDropdown = function(index) {
                $scope.selectedPlanData = index;
                var price = $scope.prices[index];
                var option = "";
                var currency = $scope.user.is_shopify_app_user ? '$' : '₹ '
                if(price.discount != 0){
                    option = price.slug+ '<span class="lineThrought">' +currency+ price.original_price+'</span> <span class="text-bold">₹ '+price.price+'</span> | <span class="text-danger text-bold">'+price.discount+'% OFF</span>';
                }
                else
                {
                    option = price.slug+ '<span">' +currency+price.original_price+'</span>';
                }
                $scope.formatPlanDropdownValue = $sce.trustAsHtml(option);
            };

        }
    ])
})();


(function () {
    'use strict';
    angular.module('app.shiprocket').controller('userCodReconciliationController', userCodReconciliationController);
    userCodReconciliationController.$inject = ['$rootScope', '$scope', '$state', '$location', 'AppService', '$window', '$localStorage','$timeout'];

    function userCodReconciliationController($rootScope, $scope, $state, $location, AppService, $window, $localStorage, $timeout) {
        var user = $localStorage.USER;
        if(user){
          activate(user);
        }
        ////////////////
        function activate(user){
            $scope.is_weight_dispute = user.is_weight_dispute;
            $scope.is_statement = user.is_statement;
            $scope.is_autorecharge_upgradable = user.is_autorecharge_upgradable || false;
            var orderdate = {
                className : '',
                width: $('.orderdate').outerWidth(),
                tableClass: 'cod-reconcilation'
            }

            var searchParams = angular.copy($location.search());

            $scope.maxSize = 2;
            $scope.totalItems = 10000000;
            $scope.page = searchParams.page ? searchParams.page : '1';

            $scope.sortType = '';
            $scope.sortReverse  = false;
            $scope.isPreloader = true;
            $scope.searchText = searchParams.searchText? searchParams.searchText: '';
            $scope.filterbyStatus = searchParams.filterbyStatus? searchParams.filterbyStatus: '';
            $scope.filterByCourier =
            {
                courier_name: searchParams.courierName? searchParams.courierName: 'All Courier List',
                id: searchParams.courierId? searchParams.courierId : ''
            }

            var date = new Date();
            $scope.currentDate = date;
            $scope.DateFilter =
            {
                from: searchParams.date_from? searchParams.date_from : '',
                to: searchParams.date_to? searchParams.date_to : ''
            }

            $scope.itemsPerPage = [
              {value:'15', id:0},
              {value:'30', id:1},
              {value:'60', id:2},
              {value:'100', id:3}
            ]

            if(searchParams.perPage == 30){
                $scope.selectedItems = 1;
            }
            else if(searchParams.perPage == 60){
                $scope.selectedItems = 2;
            }
            else if(searchParams.perPage == 100){
                $scope.selectedItems = 3;
            }
            else{
                $scope.selectedItems = 0;
            }

            //get courier list
            AppService.get('courier/priority', true)
            .success(function (data){
               $scope.courierList = data;
               var defaultOption =
               {
                    courier_name: 'All Courier List',
                    id: ''
               }
               $scope.courierList.unshift(defaultOption);

               if($scope.filterByCourier.id == ''){
                   $scope.filterByCourier = $scope.courierList[0];
               }
            })
            .error(function(error){
                $scope.isPreloader = false;
                AppService.isAuth(error);
            })

            AppService.get('account/details/cod/summary', true)
            .success(function (data){
                $scope.remittance_data = data;
            })
            .error(function(error){
                $scope.isPreloader = false;
                AppService.isAuth(error);
            })

            $scope.searchBy = searchBy;
            $scope.sortTable = sortTable;
            $scope.paginatedData = paginatedData;
            $scope.changePerPage = changePerPage;
            $scope.filterByStatus = filterByStatus;

            function sortTable(type){
                $scope.sortType = type;
                $scope.sortReverse = !$scope.sortReverse;
                getCreditDetailData();
            }


            function paginatedData(){
                $("th").remove();
                apply_filter();
            }


            function changePerPage(){
                $("th").remove();
                setTimeout(function() {
                    apply_filter();
                }, 2);
            }


            function filterByStatus(){
                apply_filter();
            }


            function searchBy(){
                apply_filter();
            }

            function apply_filter(){
                var data = {
                    page: $scope.page,
                    perPage: $scope.itemsPerPage[$scope.selectedItems].value,
                    date_from: $scope.DateFilter.from,
                    date_to: $scope.DateFilter.to,
                    searchText: $scope.searchText,
                    filterbyStatus: $scope.filterbyStatus,
                    courierId: searchParams.filterByCourier? searchParams.filterByCourier.id: '',
                    courierName: searchParams.filterByCourier?searchParams.filterByCourier.courier_name:''
                };
                $location.search(data);
                $timeout(getCodDetailData(),200);
            }



            //new date picker JS
            var start = searchParams.date_from ? moment(searchParams.date_from , 'YYYY-MMM-DD'): moment().subtract(3, 'month');
            var end = searchParams.date_to ? moment(searchParams.date_to , 'YYYY-MMM-DD'): moment();
            var lock = true;

            $('#reportrange').daterangepicker({
                startDate: start,
                endDate: end,
                ranges: {
                   'All': [moment(user.created_at.date), moment()],
                   'Today': [moment(), moment()],
                   'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                   'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                   'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                   'This Month': [moment().startOf('month'), moment().endOf('month')],
                   'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                }
            }, cb);
            cb(start, end);
            function cb(start, end){
                $scope.DateFilter.from = start.format('YYYY-MMM-DD').toString();
                $scope.DateFilter.to = end.format('YYYY-MMM-DD').toString();
                $('#reportrange span').html($scope.DateFilter.from + ' - ' + $scope.DateFilter.to);
                apply_filter();
            }

            function getCodDetailData(){
                $scope.isPreloader = true;
                var sort = $scope.sortReverse === true ? "ASC": "DESC";
                var perPage = $scope.itemsPerPage[$scope.selectedItems].value;
                var courierName = $scope.filterByCourier.id == '' ? '': $scope.filterByCourier.courier_name;
                AppService.get('account/details/cod?page='+ $scope.page +'&per_page='+ perPage + '&filter='+ $scope.filterbyStatus +'&filter_by=status&search='+ $scope.searchText +'&courier='+ courierName +'&from='+ $scope.DateFilter.from + '&to=' + $scope.DateFilter.to +'&export=0', true)
                .success(function (data){
                    searchParams = angular.copy($location.search());
                    if(!data.data.length)
                    {
                        $scope.isPreloader = false;
                    }
                    $scope.codDetailData = data.data;
                    $scope.metaData = data.meta.pagination
                    $scope.totalItems = $scope.metaData.total;
                    $scope.showingOrderNo =
                    {
                        from: $scope.totalItems == 0 ? 0: ($scope.page-1)* perPage +1,
                        to: Math.min($scope.totalItems, $scope.page*perPage)
                    }
                    AppService.setHeight();

                    $scope.$on('codDetailData', function(ngRepeatFinishedEvent)
                    {
                        AppService.setHeight();
                        AppService.setWidth(status);
                        $scope.isPreloader = false;
                    });
                })
                .error(function(error)
                {
                    $scope.isPreloader = false;
                    AppService.isAuth(error);
                })
            };

            getCodDetailData();

        }
    }
})();
